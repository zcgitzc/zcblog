[
  
  
    {
      "title"    : "JavaScript 模块化自我介绍",
      "title-lower"    : "javascript 模块化自我介绍",
      "sub-titile" : "JavaScript module introduce myself",
      "sub-titile-lower" : "javascript module introduce myself",
      "categories" : "",
      "tags"     : "Slides, Web, JavaScript",
      "url"      : "/zcblog/2019/07/09/js-module-introduce-myself/",
      "date"     : "2019-07-09 00:00:00 +0800",
      "content": "<h3 id=\"程序猿自己的-自我介绍-\">(程序猿自己的 <em>自我介绍</em> )</h3>\n\n<blockquote>\n  <p>下滑这里查看更多内容</p>\n</blockquote>\n\n<p>专门制作了适用于 Keynote 展示文稿的新布局，它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验。</p>\n\n<h3 id=\"watch-fullscreen-\"><a href=\"https://caojiele.com/js-module-introduce-myself\">Watch Fullscreen →</a></h3>\n\n<div class=\"visible-md visible-lg\">\n<img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1562683998026-42937005-a1e6-43cb-b51e-6aacf2952a56.png\" width=\"350\" /><br />\n<small class=\"img-hint\">你也可以通过扫描二维码在手机上观看</small>\n</div>\n\n<p>这个 Web Slides 开源在<a href=\"https://github.com/caojiele/js-module-introduce-myself\">我的 Github 上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork &amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目。</p>\n\n<h3 id=\"content\">Content</h3>\n\n<ul>\n  <li>第一章  简单介绍 <strong><em>Introduce?</em></strong> 从自己周围的事情说起</li>\n  <li>第二章  线上分享 <strong><em>Online Courses</em></strong> 我的一些<strong>搬砖</strong>体会链接，闲来无事就当娱乐啦🎢</li>\n  <li>第三章  开源项目 <strong><em>Source Projects</em></strong> 拥有一颗开源的心❤️</li>\n</ul>\n\n<h3 id=\"thanks\">Thanks</h3>\n\n<p><a href=\"http://lab.hakim.se/reveal-js\">Reveal.js</a></p>\n",
      "desc"     : "(程序猿自己的 自我介绍 )  下滑这里查看更多内容专门制作了适用于 Keynote 展示文稿的新布局，它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验。Watch Fullscreen →你也可以通过扫描二维码在手机上观看这个 Web Slides 开源在我的 Github 上，欢迎你帮助我完善这个展示文稿，你可以给我提 i..."
} ,
  
  
  
    {
      "title"    : "搞定JVM垃圾回收就是这么简单",
      "title-lower"    : "搞定jvm垃圾回收就是这么简单",
      "sub-titile" : "当需要排查各种内存溢出问题、当垃圾收集成为系统达到更高并发的瓶颈时，我们就需要对这些“自动化”的技术实施必要的监控和调节。",
      "sub-titile-lower" : "当需要排查各种内存溢出问题、当垃圾收集成为系统达到更高并发的瓶颈时，我们就需要对这些“自动化”的技术实施必要的监控和调节。",
      "categories" : "",
      "tags"     : "Java, JVM, GC",
      "url"      : "/zcblog/2019/04/18/java-jvm-gc/",
      "date"     : "2019-04-18 00:00:00 +0800",
      "content": "<h2 id=\"写在前面\">写在前面</h2>\n\n<h3 id=\"常见面试题\">常见面试题：</h3>\n<ul>\n  <li>如何判断对象是否死亡（两种方法）。</li>\n  <li>简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。</li>\n  <li>如何判断一个常量是废弃常量</li>\n  <li>如何判断一个类是无用的类</li>\n  <li>垃圾收集有哪些算法，各自的特点？</li>\n  <li>HotSpot为什么要分为新生代和老年代？</li>\n  <li>常见的垃圾回收器有那些？</li>\n  <li>介绍一下CMS,G1收集器。</li>\n  <li>Minor Gc和Full GC 有什么不同呢？</li>\n</ul>\n\n<h5 id=\"问题答案在下文中都有提到\">问题答案在下文中都有提到</h5>\n\n<h3 id=\"本文导火索\">本文导火索</h3>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-de8b7c1e47da295c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>当需要排查各种内存溢出问题、当垃圾收集成为系统达到更高并发的瓶颈时，我们就需要对这些“自动化”的技术实施必要的监控和调节。</p>\n\n<h2 id=\"1--揭开jvm内存分配与回收的神秘面纱\">1  揭开JVM内存分配与回收的神秘面纱</h2>\n\n<p>Java 的自动内存管理主要是针对对象内存的回收和对象内存的分配。同时，Java 自动内存管理最核心的功能是 <strong>堆</strong> 内存中对象的分配与回收。</p>\n\n<p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<strong>GC堆（Garbage Collected Heap）</strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden空间、From Survivor、To Survivor空间等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p>\n\n<p><strong>堆空间的基本结构：</strong></p>\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3堆结构.png\" width=\"400px\" />\n</div>\n\n<p>上图所示的 eden区、s0区、s1区都属于新生代，tentired 区属于老年代。大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 s0 或者 s1，并且对象的年龄还会加 1(Eden区-&gt;Survivor 区后对象的初始年龄变为1)，当它的年龄增加到一定程度（默认为15岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code class=\"highlighter-rouge\">-XX:MaxTenuringThreshold</code> 来设置。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-651a01631ee60fa2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<h3 id=\"11-对象优先在eden区分配\">1.1 对象优先在eden区分配</h3>\n\n<p>目前主流的垃圾收集器都会采用分代回收算法，因此需要将堆内存分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</p>\n\n<p>大多数情况下，对象在新生代中 eden 区分配。当 eden 区没有足够空间进行分配时，虚拟机将发起一次Minor GC.下面我们来进行实际测试以下。</p>\n\n<p>在测试之前我们先来看看 <strong>Minor GC和Full GC 有什么不同呢？</strong></p>\n\n<ul>\n  <li><strong>新生代GC（Minor GC）</strong>:指发生新生代的的垃圾收集动作，Minor GC非常频繁，回收速度一般也比较快。</li>\n  <li><strong>老年代GC（Major GC/Full GC）</strong>:指发生在老年代的GC，出现了Major GC经常会伴随至少一次的Minor GC（并非绝对），Major GC的速度一般会比Minor GC的慢10倍以上。</li>\n</ul>\n\n<p><strong>测试：</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">GCTest</span> <span class=\"o\">{</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">allocation1</span><span class=\"o\">,</span> <span class=\"n\">allocation2</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">allocation1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">30900</span><span class=\"o\">*</span><span class=\"mi\">1024</span><span class=\"o\">];</span>\n\t\t<span class=\"c1\">//allocation2 = new byte[900*1024];</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>通过以下方式运行：\n<img src=\"http://upload-images.jianshu.io/upload_images/6039661-62fc30dc9e6750aa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>添加的参数：<code class=\"highlighter-rouge\">-XX:+PrintGCDetails</code>\n<img src=\"http://upload-images.jianshu.io/upload_images/6039661-00f0a8221cae833c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>运行结果(红色字体描述有误，应该是对应于JDK1.7的永久代)：</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-359abb7b07a5bd83.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>从上图我们可以看出eden区内存几乎已经被分配完全（即使程序什么也不做，新生代也会使用2000多k内存）。假如我们再为allocation2分配内存会出现什么情况呢？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">allocation2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">900</span><span class=\"o\">*</span><span class=\"mi\">1024</span><span class=\"o\">];</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-0dbafaefa3f9f14d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>简单解释一下为什么会出现这种情况：</strong> 因为给allocation2分配内存的时候eden区内存几乎已经被分配完了，我们刚刚讲了当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC.GC期间虚拟机又发现allocation1无法存入Survivor空间，所以只好通过 <strong>分配担保机制</strong> 把新生代的对象提前转移到老年代中去，老年代上的空间足够存放allocation1，所以不会出现Full GC。执行Minor GC后，后面分配的对象如果能够存在eden区的话，还是会在eden区分配内存。可以执行如下代码验证：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">GCTest</span> <span class=\"o\">{</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">allocation1</span><span class=\"o\">,</span> <span class=\"n\">allocation2</span><span class=\"o\">,</span><span class=\"n\">allocation3</span><span class=\"o\">,</span><span class=\"n\">allocation4</span><span class=\"o\">,</span><span class=\"n\">allocation5</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">allocation1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">32000</span><span class=\"o\">*</span><span class=\"mi\">1024</span><span class=\"o\">];</span>\n\t\t<span class=\"n\">allocation2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">1000</span><span class=\"o\">*</span><span class=\"mi\">1024</span><span class=\"o\">];</span>\n\t\t<span class=\"n\">allocation3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">1000</span><span class=\"o\">*</span><span class=\"mi\">1024</span><span class=\"o\">];</span>\n\t\t<span class=\"n\">allocation4</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">1000</span><span class=\"o\">*</span><span class=\"mi\">1024</span><span class=\"o\">];</span>\n\t\t<span class=\"n\">allocation5</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">1000</span><span class=\"o\">*</span><span class=\"mi\">1024</span><span class=\"o\">];</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"12-大对象直接进入老年代\">1.2 大对象直接进入老年代</h3>\n<p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。</p>\n\n<p><strong>为什么要这样呢？</strong></p>\n\n<p>为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。</p>\n\n<h3 id=\"13-长期存活的对象将进入老年代\">1.3 长期存活的对象将进入老年代</h3>\n<p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。</p>\n\n<p>如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并将对象年龄设为1.对象在 Survivor 中每熬过一次 MinorGC,年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code class=\"highlighter-rouge\">-XX:MaxTenuringThreshold</code> 来设置。</p>\n\n<h3 id=\"14-动态对象年龄判定\">1.4 动态对象年龄判定</h3>\n\n<p>为了更好的适应不同程序的内存情况，虚拟机不是永远要求对象年龄必须达到了某个值才能进入老年代，如果 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无需达到要求的年龄。</p>\n\n<h2 id=\"2-对象已经死亡\">2 对象已经死亡？</h2>\n\n<p>堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断那些对象已经死亡（即不能再被任何途径使用的对象）。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-b15c7f844b35044a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<h3 id=\"21-引用计数法\">2.1 引用计数法</h3>\n\n<p>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加1；当引用失效，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。</p>\n\n<p><strong>这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。</strong> 所谓对象之间的相互引用问题，如下面代码所示：除了对象objA 和 objB 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为0，于是引用计数算法无法通知 GC 回收器回收他们。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ReferenceCountingGc</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Object</span> <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">ReferenceCountingGc</span> <span class=\"n\">objA</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ReferenceCountingGc</span><span class=\"o\">();</span>\n\t\t<span class=\"nc\">ReferenceCountingGc</span> <span class=\"n\">objB</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ReferenceCountingGc</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">objA</span><span class=\"o\">.</span><span class=\"na\">instance</span> <span class=\"o\">=</span> <span class=\"n\">objB</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">objB</span><span class=\"o\">.</span><span class=\"na\">instance</span> <span class=\"o\">=</span> <span class=\"n\">objA</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">objA</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">objB</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"22-可达性分析算法\">2.2 可达性分析算法</h3>\n\n<p>这个算法的基本思想就是通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-157cbcc7e19c7f3a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"可达性分析算法\" /></p>\n\n<h3 id=\"23-再谈引用\">2.3 再谈引用</h3>\n\n<p>无论是通过引用计数法判断对象引用数量，还是通过可达性分析法判断对象的引用链是否可达，判定对象的存活都与“引用”有关。</p>\n\n<p>JDK1.2之前，Java中引用的定义很传统：如果reference类型的数据存储的数值代表的是另一块内存的起始地址，就称这块内存代表一个引用。</p>\n\n<p>JDK1.2以后，Java对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用四种（引用强度逐渐减弱）</p>\n\n<p><strong>1．强引用</strong></p>\n\n<p>以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于<strong>必不可少的生活用品</strong>，垃圾回收器绝不会回收它。当内存空 间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。</p>\n\n<p><strong>2．软引用（SoftReference）</strong></p>\n\n<p>如果一个对象只具有软引用，那就类似于<strong>可有可无的生活用品</strong>。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p>\n\n<p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。</p>\n\n<p><strong>3．弱引用（WeakReference）</strong></p>\n\n<p>如果一个对象只具有弱引用，那就类似于<strong>可有可无的生活用品</strong>。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。</p>\n\n<p>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>\n\n<p><strong>4．虚引用（PhantomReference）</strong></p>\n\n<p>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。</p>\n\n<p><strong>虚引用主要用来跟踪对象被垃圾回收的活动</strong>。</p>\n\n<p><strong>虚引用与软引用和弱引用的一个区别在于：</strong> 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃 圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是 否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p>\n\n<p>特别注意，在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为<strong>软引用可以加速JVM对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生</strong>。</p>\n\n<h3 id=\"24-不可达的对象并非非死不可\">2.4 不可达的对象并非“非死不可”</h3>\n\n<p>即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。</p>\n\n<p>被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。</p>\n\n<h3 id=\"25-如何判断一个常量是废弃常量\">2.5 如何判断一个常量是废弃常量</h3>\n\n<p>运行时常量池主要回收的是废弃的常量。那么，我们如何判断一个常量是废弃常量呢？</p>\n\n<p>假如在常量池中存在字符串 “abc”，如果当前没有任何String对象引用该字符串常量的话，就说明常量 “abc” 就是废弃常量，如果这时发生内存回收的话而且有必要的话，”abc” 就会被系统清理出常量池。</p>\n\n<p>注意：我们在 <a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247484303&amp;idx=1&amp;sn=af0fd436cef755463f59ee4dd0720cbd&amp;chksm=fd9855eecaefdcf8d94ac581cfda4e16c8a730bda60c3b50bc55c124b92f23b6217f7f8e58d5&amp;token=506869459&amp;lang=zh_CN#rd\">可能是把Java内存区域讲的最清楚的一篇文章</a> 也讲了JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。</p>\n\n<h3 id=\"26-如何判断一个类是无用的类\">2.6 如何判断一个类是无用的类</h3>\n\n<p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？</p>\n\n<p>判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面3个条件才能算是 <strong>“无用的类”</strong> ：</p>\n\n<ul>\n  <li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li>\n  <li>加载该类的 ClassLoader 已经被回收。</li>\n  <li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ul>\n\n<p>虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。</p>\n\n<h2 id=\"3-垃圾收集算法\">3 垃圾收集算法</h2>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-91577b01f7175674.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"垃圾收集算法\" /></p>\n\n<h3 id=\"31-标记-清除算法\">3.1 标记-清除算法</h3>\n\n<p>算法分为“标记”和“清除”阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。它是最基础的收集算法，效率也很高，但是会带来两个明显的问题：</p>\n\n<ol>\n  <li><strong>效率问题</strong></li>\n  <li><strong>空间问题（标记清除后会产生大量不连续的碎片）</strong></li>\n</ol>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-3d08ed6dcbe7e1b7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"标记-清除算法\" /></p>\n\n<h3 id=\"32-复制算法\">3.2 复制算法</h3>\n\n<p>为了解决效率问题，“复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-d3fe733b86bf29e5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复制算法\" /></p>\n\n<h3 id=\"33-标记-整理算法\">3.3 标记-整理算法</h3>\n<p>根据老年代的特点特出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-848371809327b7f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"标记-整理算法\" /></p>\n\n<h3 id=\"34-分代收集算法\">3.4 分代收集算法</h3>\n\n<p>当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将java堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</p>\n\n<p><strong>比如在新生代中，每次收集都会有大量对象死去，所以可以选择复制算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。</strong></p>\n\n<p><strong>延伸面试问题：</strong> HotSpot为什么要分为新生代和老年代？</p>\n\n<p>根据上面的对分代收集算法的介绍回答。</p>\n\n<h2 id=\"4-垃圾收集器\">4 垃圾收集器</h2>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-fbb1c59e70460283.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</strong></p>\n\n<p>虽然我们对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为知道现在为止还没有最好的垃圾收集器出现，更加没有万能的垃圾收集器，<strong>我们能做的就是根据具体应用场景选择适合自己的垃圾收集器</strong>。试想一下：如果有一种四海之内、任何场景下都适用的完美收集器存在，那么我们的HotSpot虚拟机就不会实现那么多不同的垃圾收集器了。</p>\n\n<h3 id=\"41-serial收集器\">4.1 Serial收集器</h3>\n<p>Serial（串行）收集器收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 <strong>“单线程”</strong> 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ <strong>“Stop The World”</strong> ），直到它收集结束。</p>\n\n<p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong>\n<img src=\"http://upload-images.jianshu.io/upload_images/6039661-9a1bb272b791e450.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" Serial收集器\" /></p>\n\n<p>虚拟机的设计者们当然知道Stop The World带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。</p>\n\n<p>但是Serial收集器有没有优于其他垃圾收集器的地方呢？当然有，它<strong>简单而高效（与其他收集器的单线程相比）</strong>。Serial收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率。Serial收集器对于运行在Client模式下的虚拟机来说是个不错的选择。</p>\n\n<h3 id=\"42-parnew收集器\">4.2 ParNew收集器</h3>\n<p><strong>ParNew收集器其实就是Serial收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和Serial收集器完全一样。</strong></p>\n\n<p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong>\n<img src=\"http://upload-images.jianshu.io/upload_images/6039661-8af8302d6f5b6ba7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ParNew收集器\" /></p>\n\n<p>它是许多运行在Server模式下的虚拟机的首要选择，除了Serial收集器外，只有它能与CMS收集器（真正意义上的并发收集器，后面会介绍到）配合工作。</p>\n\n<p><strong>并行和并发概念补充：</strong></p>\n\n<ul>\n  <li>\n    <p><strong>并行（Parallel）</strong> ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</p>\n  </li>\n  <li>\n    <p><strong>并发（Concurrent）</strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个CPU上。</p>\n  </li>\n</ul>\n\n<h3 id=\"43-parallel-scavenge收集器\">4.3 Parallel Scavenge收集器</h3>\n\n<p>Parallel Scavenge 收集器类似于ParNew 收集器。 <strong>那么它有什么特别之处呢？</strong></p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre>-XX:+UseParallelGC \n\n    使用Parallel收集器+ 老年代串行\n\n-XX:+UseParallelOldGC\n\n    使用Parallel收集器+ 老年代并行\n\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>Parallel Scavenge收集器关注点是吞吐量（高效率的利用CPU）。CMS等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是CPU中用于运行用户代码的时间与CPU总消耗时间的比值。</strong> Parallel Scavenge收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解的话，手工优化存在的话可以选择把内存管理优化交给虚拟机去完成也是一个不错的选择。</p>\n\n<p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong>\n<img src=\"http://upload-images.jianshu.io/upload_images/6039661-cce0d046b2989a4c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ParNew收集器\" /></p>\n\n<h3 id=\"44serial-old收集器\">4.4.Serial Old收集器</h3>\n<p><strong>Serial收集器的老年代版本</strong>，它同样是一个单线程收集器。它主要有两大用途：一种用途是在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后备方案。</p>\n\n<h3 id=\"45-parallel-old收集器\">4.5 Parallel Old收集器</h3>\n<p><strong>Parallel Scavenge收集器的老年代版本</strong>。使用多线程和“标记-整理”算法。在注重吞吐量以及CPU资源的场合，都可以优先考虑 Parallel Scavenge收集器和Parallel Old收集器。</p>\n\n<h3 id=\"46-cms收集器\">4.6 CMS收集器</h3>\n\n<p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它而非常符合在注重用户体验的应用上使用。</strong></p>\n\n<p><strong>CMS（Concurrent Mark Sweep）收集器是HotSpot虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</strong></p>\n\n<p>从名字中的<strong>Mark Sweep</strong>这两个词可以看出，CMS收集器是一种 <strong>“标记-清除”算法</strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p>\n\n<ul>\n  <li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下直接与root相连的对象，速度很快 ；</li>\n  <li><strong>并发标记：</strong> 同时开启GC和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以GC线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li>\n  <li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li>\n  <li><strong>并发清除：</strong> 开启用户线程，同时GC线程开始对为标记的区域做清扫。</li>\n</ul>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-51b1b650c67e6ae0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CMS垃圾收集器\" /></p>\n\n<p>从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：<strong>并发收集、低停顿</strong>。但是它有下面三个明显的缺点：</p>\n\n<ul>\n  <li><strong>对CPU资源敏感；</strong></li>\n  <li><strong>无法处理浮动垃圾；</strong></li>\n  <li><strong>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</strong></li>\n</ul>\n\n<h3 id=\"47-g1收集器\">4.7 G1收集器</h3>\n\n<p><strong>G1 (Garbage-First)是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征.</strong></p>\n\n<p>被视为JDK1.7中HotSpot虚拟机的一个重要进化特征。它具备一下特点：</p>\n\n<ul>\n  <li><strong>并行与并发</strong>：G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。</li>\n  <li><strong>分代收集</strong>：虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但是还是保留了分代的概念。</li>\n  <li><strong>空间整合</strong>：与CMS的“标记–清理”算法不同，G1从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。</li>\n  <li><strong>可预测的停顿</strong>：这是G1相对于CMS的另一个大优势，降低停顿时间是G1 和 CMS 共同的关注点，但G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内。</li>\n</ul>\n\n<p>G1收集器的运作大致分为以下几个步骤：</p>\n\n<ul>\n  <li><strong>初始标记</strong></li>\n  <li><strong>并发标记</strong></li>\n  <li><strong>最终标记</strong></li>\n  <li><strong>筛选回收</strong></li>\n</ul>\n\n<p><strong>G1收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的Region(这也就是它的名字Garbage-First的由来)</strong>。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了GF收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p>\n\n<p>参考：</p>\n\n<ul>\n  <li>《深入理解Java虚拟机：JVM高级特性与最佳实践（第二版》</li>\n  <li>https://my.oschina.net/hosee/blog/644618</li>\n</ul>\n",
      "desc"     : "写在前面常见面试题：  如何判断对象是否死亡（两种方法）。  简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。  如何判断一个常量是废弃常量  如何判断一个类是无用的类  垃圾收集有哪些算法，各自的特点？  HotSpot为什么要分为新生代和老年代？  常见的垃圾回收器有那些？  介绍一下CMS,G1收集器。  Minor Gc和Full..."
} ,
  
  
  
    {
      "title"    : "浅谈 RPC",
      "title-lower"    : "浅谈 rpc",
      "sub-titile" : "RPC-远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。",
      "sub-titile-lower" : "rpc-远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。",
      "categories" : "",
      "tags"     : "RPC, Dubbo, Spring Cloud",
      "url"      : "/zcblog/2019/04/17/rpc-introduction/",
      "date"     : "2019-04-17 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于Dubbo官网：<a href=\"http://dubbo.apache.org/zh-cn/blog/rpc-introduction.html\">浅谈 RPC</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p>近几年随着微服务化项目的崛起，逐渐成为许多公司中大型分布式系统架构的主流方式，而今天所说的 RPC 在这其中扮演着至关重要的角色。随着这段日子公司项目微服务化的演进，发现在日常开发中都在隐式或显式的使用 RPC，一些刚刚接触 RPC 的小伙伴会感觉无所适从，而一些入行多年的老手虽然使用 RPC 经验丰富，但有些对其原理也一知半解，缺乏对原理的深入理解，往往也会造成开发中的一些误用。</p>\n\n<h2 id=\"什么是rpc\">什么是RPC？</h2>\n\n<p>RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p>\n\n<p>RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。现在业界有很多开源的优秀 RPC 框架，例如 Spring Cloud、Dubbo、Thrift 等。</p>\n\n<h2 id=\"rpc-起源\">RPC 起源</h2>\n\n<p>RPC 这个概念术语在上世纪 80 年代由 <strong>Bruce Jay Nelson</strong> 提出。这里我们追溯下当初开发 RPC 的原动机是什么？在 Nelson 的论文 “Implementing Remote Procedure Calls” 中他提到了几点：</p>\n<ul>\n  <li>简单：RPC 概念的语义十分清晰和简单，这样建立分布式计算就更容易。</li>\n  <li>高效：过程调用看起来十分简单而且高效。</li>\n  <li>通用：在单机计算中过程往往是不同算法部分间最重要的通信机制。</li>\n</ul>\n\n<p>通俗一点说，就是一般程序员对于本地的过程调用很熟悉，那么我们把 RPC 作成和本地调用完全类似，那么就更容易被接受，使用起来毫无障碍。Nelson 的论文发表于 30 年前，其观点今天看来确实高瞻远瞩，今天我们使用的 RPC 框架基本就是按这个目标来实现的。</p>\n\n<h2 id=\"rpc-结构\">RPC 结构</h2>\n\n<p>Nelson 的论文中指出实现 RPC 的程序包括 5 个部分：</p>\n<ol>\n  <li>User</li>\n  <li>User-stub</li>\n  <li>RPCRuntime</li>\n  <li>Server-stub</li>\n  <li>Server</li>\n</ol>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1565251544323-5fed629b-3c94-469e-9313-0574217fd4db.png\" alt=\"RPC结构\" /></p>\n\n<p>这里 user 就是 client 端，当 user 想发起一个远程调用时，它实际是通过本地调用 user-stub。user-stub 负责将调用的接口、方法和参数通过约定的协议规范进行编码并通过本地的 RPCRuntime 实例传输到远端的实例。远端 RPCRuntime 实例收到请求后交给 server-stub 进行解码后发起本地端调用，调用结果再返回给 user 端。</p>\n\n<p>以上是粗粒度的 RPC 实现概念结构，接下来我们进一步细化它应该由哪些组件构成，如下图所示。</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1565251552486-2f9774ec-5e58-4fa8-b545-43d4056412bb.png\" alt=\"RPC 结构拆解\" /></p>\n\n<p>RPC 服务方通过 RpcServer 去导出（export）远程接口方法，而客户方通过 RpcClient 去引入（import）远程接口方法。客户方像调用本地方法一样去调用远程接口方法，RPC 框架提供接口的代理实现，实际的调用将委托给代理RpcProxy 。代理封装调用信息并将调用转交给RpcInvoker 去实际执行。在客户端的RpcInvoker 通过连接器RpcConnector 去维持与服务端的通道RpcChannel，并使用RpcProtocol 执行协议编码（encode）并将编码后的请求消息通过通道发送给服务方。</p>\n\n<p>RPC 服务端接收器 RpcAcceptor 接收客户端的调用请求，同样使用RpcProtocol 执行协议解码（decode）。解码后的调用信息传递给RpcProcessor 去控制处理调用过程，最后再委托调用给RpcInvoker 去实际执行并返回调用结果。如下是各个部分的详细职责：</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n</pre></td><td class=\"rouge-code\"><pre>1. RpcServer  \n\n   负责导出（export）远程接口  \n\n2. RpcClient  \n\n   负责导入（import）远程接口的代理实现  \n\n3. RpcProxy  \n\n   远程接口的代理实现  \n\n4. RpcInvoker  \n\n   客户方实现：负责编码调用信息和发送调用请求到服务方并等待调用结果返回  \n\n   服务方实现：负责调用服务端接口的具体实现并返回调用结果  \n\n5. RpcProtocol  \n\n   负责协议编/解码  \n\n6. RpcConnector  \n\n   负责维持客户方和服务方的连接通道和发送数据到服务方  \n\n7. RpcAcceptor  \n\n   负责接收客户方请求并返回请求结果  \n\n8. RpcProcessor  \n\n   负责在服务方控制调用过程，包括管理调用线程池、超时时间等  \n\n9. RpcChannel  \n\n   数据传输通道 \n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"rpc-工作原理\">RPC 工作原理</h2>\n\n<p>RPC的设计由Client，Client stub，Network ，Server stub，Server构成。 其中Client就是用来调用服务的，Cient stub是用来把调用的方法和参数序列化的（因为要在网络中传输，必须要把对象转变成字节），Network用来传输这些信息到Server stub， Server stub用来把这些信息反序列化的，Server就是服务的提供者，最终调用的就是Server提供的方法。</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/338441/1564724156391-2e5310f9-d646-47ec-ae3b-d843a4e61016.jpeg\" alt=\"RPC工作原理\" /></p>\n\n<ol>\n  <li>\n    <p>Client像调用本地服务似的调用远程服务；</p>\n  </li>\n  <li>\n    <p>Client stub接收到调用后，将方法、参数序列化</p>\n  </li>\n  <li>\n    <p>客户端通过sockets将消息发送到服务端</p>\n  </li>\n  <li>\n    <p>Server stub 收到消息后进行解码（将消息对象反序列化）</p>\n  </li>\n  <li>\n    <p>Server stub 根据解码结果调用本地的服务</p>\n  </li>\n  <li>\n    <p>本地服务执行(对于服务端来说是本地执行)并将结果返回给Server stub</p>\n  </li>\n  <li>\n    <p>Server stub将返回结果打包成消息（将结果消息对象序列化）</p>\n  </li>\n  <li>\n    <p>服务端通过sockets将消息发送到客户端</p>\n  </li>\n  <li>\n    <p>Client stub接收到结果消息，并进行解码（将结果消息发序列化）</p>\n  </li>\n  <li>\n    <p>客户端得到最终结果。</p>\n  </li>\n</ol>\n\n<p>RPC 调用分以下两种：</p>\n\n<ol>\n  <li>\n    <p>同步调用：客户方等待调用执行完成并返回结果。</p>\n  </li>\n  <li>\n    <p>异步调用：客户方调用后不用等待执行结果返回，但依然可以通过回调通知等方式获取返回结果。若客户方不关心调用返回结果，则变成单向异步调用，单向调用不用返回结果。</p>\n  </li>\n</ol>\n\n<p>异步和同步的区分在于是否等待服务端执行完成并返回结果。</p>\n\n<h2 id=\"rpc-能干什么\">RPC 能干什么？</h2>\n\n<p>RPC 的主要功能目标是让构建分布式计算（应用）更容易，在提供强大的远程调用能力时不损失本地调用的语义简洁性。为实现该目标，RPC 框架需提供一种透明调用机制，让使用者不必显式的区分本地调用和远程调用，在之前给出的一种实现结构，基于 stub 的结构来实现。下面我们将具体细化 stub 结构的实现。</p>\n\n<ul>\n  <li>可以做到分布式，现代化的微服务</li>\n  <li>部署灵活</li>\n  <li>解耦服务</li>\n  <li>扩展性强</li>\n</ul>\n\n<p>RPC的目的是让你在本地调用远程的方法，而对你来说这个调用是透明的，你并不知道这个调用的方法是部署哪里。通过RPC能解耦服务，这才是使用RPC的真正目的。</p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>这篇文章介绍了 RPC 的一些基本原理，相信到这里您已经对 RPC 有了一定理解。其实发现实现一个 RPC 不算难，难的是实现一个高性能高可靠的RPC框架。比如，既然是分布式了，那么一个服务可能有多个实例，你在调用时，要如何获取这些实例的地址呢？这时候就需要一个服务注册中心，比如在Dubbo中，就可以使用Zookeeper作为注册中心，在调用时，从Zookeeper获取服务的实例列表，再从中选择一个进行调用。那么选哪个调用好呢？这时候就需要负载均衡了，于是你又得考虑如何实现复杂均衡，比如Dubbo就提供了好几种负载均衡策略。所以请继续关注我的另外两篇文章<strong>RPC与服务化的关系</strong>和<strong>注册中心，配置中心， 服务发现浅谈</strong>，相信会帮助对RPC设计和实现有更多的理解。</p>\n",
      "desc"     : "  本文来自于Dubbo官网：浅谈 RPC，转载请保留链接 ;)近几年随着微服务化项目的崛起，逐渐成为许多公司中大型分布式系统架构的主流方式，而今天所说的 RPC 在这其中扮演着至关重要的角色。随着这段日子公司项目微服务化的演进，发现在日常开发中都在隐式或显式的使用 RPC，一些刚刚接触 RPC 的小伙伴会感觉无所适从，而一些入行多年的老手虽然使用 RPC 经验丰富，但有些对其原理也一知半解..."
} ,
  
  
  
    {
      "title"    : "小马哥Java面试题课程总结",
      "title-lower"    : "小马哥java面试题课程总结",
      "sub-titile" : "面试虐我千百遍，Java 并发真讨厌",
      "sub-titile-lower" : "面试虐我千百遍，java 并发真讨厌",
      "categories" : "",
      "tags"     : "Java, 面试, 慕课网手记",
      "url"      : "/zcblog/2019/04/14/java-interview-mercyblitz/",
      "date"     : "2019-04-14 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的<a href=\"https://www.imooc.com/u/4024769\">慕课网手记</a>：<a href=\"https://www.imooc.com/article/288342\">小马哥Java面试题课程总结</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p>前段时间在慕课网直播上听<a href=\"https://www.imooc.com/t/5387391\">小马哥</a>面试劝退（”面试虐我千百遍，Java 并发真讨厌”），发现讲得东西比自己拿到offer还要高兴，于是自己在线下做了一点小笔记，供各位参考。</p>\n\n<p>课程地址：<a href=\"https://www.bilibili.com/video/av49124110\">https://www.bilibili.com/video/av49124110</a></p>\n\n<p>源码文档地址：<a href=\"https://github.com/mercyblitz/tech-weekly/tree/master/2019.04.12%20%E3%80%8C%E5%B0%8F%E9%A9%AC%E5%93%A5%E6%8A%80%E6%9C%AF%E5%91%A8%E6%8A%A5%E3%80%8D-%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E6%9C%9F%E3%80%8A%E9%9D%A2%E8%AF%95%E8%99%90%E6%88%91%E5%8D%83%E7%99%BE%E9%81%8D%EF%BC%8CJava%20%E5%B9%B6%E5%8F%91%E7%9C%9F%E8%AE%A8%E5%8E%8C%EF%BC%88%E7%BB%AD%EF%BC%89%E3%80%8B\">https://github.com/mercyblitz/tech-weekly</a></p>\n\n<h2 id=\"java-多线程\">Java 多线程</h2>\n\n<h3 id=\"1线程创建\">1、线程创建</h3>\n\n<h4 id=\"基本版\">基本版</h4>\n<p>有哪些方法创建线程？</p>\n\n<p>仅仅只有<strong>new thread</strong>这种方法创建线程</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ThreadCreationQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// main 线程 -&gt; 子线程</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n        <span class=\"o\">},</span> <span class=\"s\">\"子线程-1\"</span><span class=\"o\">);</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n     * 不鼓励自定义（扩展） Thread\n     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">MyThread</span> <span class=\"kd\">extends</span> <span class=\"nc\">Thread</span> <span class=\"o\">{</span>\n\n        <span class=\"cm\">/**\n         * 多态的方式，覆盖父类实现\n         */</span>\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n            <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>与运行线程方法区分：\n<strong>java.lang.Runnable()</strong> 或 <strong>java.lang.Thread类</strong></p>\n\n<h4 id=\"进阶版\">进阶版</h4>\n<p>如何通过Java 创建进程？</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProcessCreationQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// 获取 Java Runtime</span>\n        <span class=\"nc\">Runtime</span> <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"nc\">Runtime</span><span class=\"o\">.</span><span class=\"na\">getRuntime</span><span class=\"o\">();</span>\n        <span class=\"nc\">Process</span> <span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"na\">exec</span><span class=\"o\">(</span><span class=\"s\">\"cmd /k start http://www.baidu.com\"</span><span class=\"o\">);</span>\n        <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"na\">exitValue</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"劝退版\">劝退版</h4>\n<p>如何销毁一个线程？</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ThreadStateQuestion</span> <span class=\"o\">{</span>\n\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// main 线程 -&gt; 子线程</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span> <span class=\"c1\">// new Runnable(){ public void run(){...}};</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n        <span class=\"o\">},</span> <span class=\"s\">\"子线程-1\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 启动线程</span>\n        <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// 先于 Runnable 执行</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 是否还活着: %s\\n\"</span><span class=\"o\">,</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">(),</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">());</span> <span class=\"c1\">// 1</span>\n        <span class=\"c1\">// 在 Java 中，执行线程 Java 是没有办法销毁它的，</span>\n        <span class=\"c1\">// 但是当 Thread.isAlive() 返回 false 时，实际底层的 Thread 已经被销毁了</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>Java代码中是无法实现的，只能表现一个线程的状态。</p>\n\n<p>而CPP是可以实现的。</p>\n\n<h3 id=\"2线程执行\">2、线程执行</h3>\n\n<h4 id=\"基本版-1\">基本版</h4>\n<p>如何通过 Java API 启动线程？</p>\n\n<p><strong>thread.start();</strong></p>\n\n<h4 id=\"进阶版-1\">进阶版</h4>\n<p>当有线程 T1、T2 以及 T3，如何实现T1 -&gt; T2 -&gt; T3的执行顺序？</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">threadJoinOneByOne</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t1\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t2\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t3\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// start() 仅是通知线程启动</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"c1\">// join() 控制线程必须执行完成</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p><strong>CountDownLatch</strong>也可以实现；</p>\n\n<p><strong>调整优先级</strong>并不能保证优先级高的线程先执行。</p>\n\n<h4 id=\"劝退版-1\">劝退版</h4>\n<p>以上问题请至少提供另外一种实现？（1.5）</p>\n\n<p>1、spin 方法</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">threadLoop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t1\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t2\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t3\"</span><span class=\"o\">);</span>\n\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 自旋 Spin</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>2、sleep 方法</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">threadSleep</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t1\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t2\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t3\"</span><span class=\"o\">);</span>\n\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// sleep</span>\n            <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>3、while 方法</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">threadWait</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t1\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t2\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t3\"</span><span class=\"o\">);</span>\n\n        <span class=\"n\">threadStartAndWait</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">);</span>\n        <span class=\"n\">threadStartAndWait</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">);</span>\n        <span class=\"n\">threadStartAndWait</span><span class=\"o\">(</span><span class=\"n\">t3</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">threadStartAndWait</span><span class=\"o\">(</span><span class=\"nc\">Thread</span> <span class=\"n\">thread</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">State</span><span class=\"o\">.</span><span class=\"na\">NEW</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">getState</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n            <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"n\">thread</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">try</span> <span class=\"o\">{</span>\n                    <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">wait</span><span class=\"o\">();</span> <span class=\"c1\">// 到底是谁通知 Thread -&gt; thread.notify();  JVM帮它唤起</span>\n                                  <span class=\"c1\">// LockSupport.park(); </span>\n                                 <span class=\"c1\">// 死锁发生</span>\n                <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h3 id=\"3线程终止\">3、线程终止</h3>\n\n<h4 id=\"基本版-2\">基本版</h4>\n<p>如何停止一个线程？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HowToStopThreadQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">Action</span> <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Action</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// 方法一</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t1\"</span><span class=\"o\">);</span>\n\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// 改变 action stopped 状态</span>\n        <span class=\"n\">action</span><span class=\"o\">.</span><span class=\"na\">setStopped</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// 方法二</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">isInterrupted</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">action</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">},</span> <span class=\"s\">\"t2\"</span><span class=\"o\">);</span>\n\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 中断操作(仅仅设置状态，而并非中止线程）</span>\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">interrupt</span><span class=\"o\">();</span>\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">Action</span> <span class=\"kd\">implements</span> <span class=\"nc\">Runnable</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// 线程安全问题，确保可见性（Happens-Before)</span>\n        <span class=\"kd\">private</span> <span class=\"kd\">volatile</span> <span class=\"kt\">boolean</span> <span class=\"n\">stopped</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">stopped</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 执行动作</span>\n                <span class=\"n\">action</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setStopped</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">stopped</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">stopped</span> <span class=\"o\">=</span> <span class=\"n\">stopped</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>想要停止一个线程是不可能的，真正的只能停止逻辑。</p>\n\n<h4 id=\"进阶版-2\">进阶版</h4>\n<p>为什么 Java 要放弃 Thread 的 stop()方法？</p>\n\n<p><strong>Because it is inherently unsafe. Stopping a thread causes it to unlock all the monitors that it has locked.</strong>(The monitors are unlocked as the ThreadDeath exception propagates up the stack.) If any of the objects previously protected by these monitors were in an inconsistent state, other threads may now view these objects in an inconsistent state. Such objects are said to be damaged. When threads operate on damaged objects, arbitrary behavior can result. This behavior may be subtle and difficult to detect, or it may be pronounced. Unlike other unchecked exceptions, ThreadDeath kills threads silently; thus, the user has no warning that his program may be corrupted. The corruption can manifest itself at any time after the actual damage occurs, even hours or days in the future.</p>\n\n<p>该方法具有固有的不安全性。用 Thread.stop 来终止线程将释放它已经锁定的所有监视器（作为沿堆栈向上传播的未检查 ThreadDeath 异常的一个自然后果）。如果以前受这些监视器保护的任何对象都处于一种不一致的状态，则损坏的对象将对其他线程可见，这有可能导致任意的行为。stop 的许多使用都应由只修改某些变量以指示目标线程应该停止运行的代码来取代。目标线程应定期检查该变量，并且如果该变量指示它要停止运行，则从其运行方法依次返回。如果目标线程等待很长时间（例如基于一个条件变量），则应使用 interrupt 方法来中断该等待。</p>\n\n<p><a href=\"https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html\">Why is Thread.stop deprecated?</a></p>\n\n<p><strong>简单的说，防止死锁，以及状态不一致的情况出现。</strong></p>\n\n<h4 id=\"劝退版-2\">劝退版</h4>\n<p>请说明 Thread interrupt()、isInterrupted() 以及 interrupted()的区别以及意义？</p>\n\n<p><strong>Thread interrupt()：</strong> 设置状态，调JVM的本地（native）<code class=\"highlighter-rouge\">interrupt0</code>()方法。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">interrupt</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span> <span class=\"o\">!=</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">())</span>\n            <span class=\"n\">checkAccess</span><span class=\"o\">();</span>\n\n        <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"n\">blockerLock</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Interruptible</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">blocker</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">interrupt0</span><span class=\"o\">();</span>  <span class=\"c1\">// Just to set the interrupt flag</span>\n                              <span class=\"c1\">//--&gt; private native void interrupt0();</span>\n                <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">interrupt</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">interrupt0</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>isInterrupted()：</strong> 调的是静态方法<code class=\"highlighter-rouge\">isInterrupted()</code>,当且仅当状态设置为中断时，返回<code class=\"highlighter-rouge\">false</code>，并不清除状态。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td><td class=\"rouge-code\"><pre>  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">interrupted</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">currentThread</span><span class=\"o\">().</span><span class=\"na\">isInterrupted</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n     * Tests whether this thread has been interrupted.  The &lt;i&gt;interrupted\n     * status&lt;/i&gt; of the thread is unaffected by this method.\n     *\n     * &lt;p&gt;A thread interruption ignored because a thread was not alive\n     * at the time of the interrupt will be reflected by this method\n     * returning false.\n     *\n     * @return  &lt;code&gt;true&lt;/code&gt; if this thread has been interrupted;\n     *          &lt;code&gt;false&lt;/code&gt; otherwise.\n     * @see     #interrupted()\n     * @revised 6.0\n     */</span>\n     \n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isInterrupted</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">isInterrupted</span><span class=\"o\">(</span><span class=\"kc\">false</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>interrupted()：</strong> 私有本地方法，即判断中断状态，又清除状态。</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"kd\">private</span> <span class=\"kd\">native</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isInterrupted</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"nc\">ClearInterrupted</span><span class=\"o\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"4线程异常\">4、线程异常</h3>\n\n<h4 id=\"基本版-3\">基本版</h4>\n<p>当线程遇到异常时，到底发生了什么？</p>\n\n<p>线程会挂</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ThreadExceptionQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//...</span>\n        <span class=\"c1\">// main 线程 -&gt; 子线程</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"s\">\"数据达到阈值\"</span><span class=\"o\">);</span>\n        <span class=\"o\">},</span> <span class=\"s\">\"t1\"</span><span class=\"o\">);</span>\n\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"c1\">// main 线程会中止吗？</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// Java Thread 是一个包装，它由 GC 做垃圾回收</span>\n        <span class=\"c1\">// JVM Thread 可能是一个 OS Thread，JVM 管理，</span>\n        <span class=\"c1\">// 当线程执行完毕（正常或者异常）</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"进阶版-3\">进阶版</h4>\n<p>当线程遇到异常时，如何捕获？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"o\">...</span>\n        <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">setDefaultUncaughtExceptionHandler</span><span class=\"o\">((</span><span class=\"n\">thread</span><span class=\"o\">,</span> <span class=\"n\">throwable</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 遇到了异常，详细信息：%s\\n\"</span><span class=\"o\">,</span>\n                    <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">(),</span>\n                    <span class=\"n\">throwable</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n        <span class=\"o\">});</span>\n<span class=\"o\">...</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"劝退版-3\">劝退版</h4>\n<p>当线程遇到异常时，ThreadPoolExecutor 如何捕获异常？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ThreadPoolExecutorExceptionQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n\n<span class=\"c1\">//        ExecutorService executorService = Executors.newFixedThreadPool(2);</span>\n\n        <span class=\"nc\">ThreadPoolExecutor</span> <span class=\"n\">executorService</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ThreadPoolExecutor</span><span class=\"o\">(</span>\n                <span class=\"mi\">1</span><span class=\"o\">,</span>\n                <span class=\"mi\">1</span><span class=\"o\">,</span>\n                <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"nc\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">MILLISECONDS</span><span class=\"o\">,</span>\n                <span class=\"k\">new</span> <span class=\"nc\">LinkedBlockingQueue</span><span class=\"o\">&lt;&gt;()</span>\n        <span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"cm\">/**\n             * 通过覆盖 {@link ThreadPoolExecutor#afterExecute(Runnable, Throwable)} 达到获取异常的信息\n             * @param r\n             * @param t\n             */</span>\n            <span class=\"nd\">@Override</span>\n            <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">afterExecute</span><span class=\"o\">(</span><span class=\"nc\">Runnable</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"nc\">Throwable</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 遇到了异常，详细信息：%s\\n\"</span><span class=\"o\">,</span>\n                        <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">(),</span>\n                        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n\n        <span class=\"o\">};</span>\n\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">execute</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"s\">\"数据达到阈值\"</span><span class=\"o\">);</span>\n        <span class=\"o\">});</span>\n\n        <span class=\"c1\">// 等待一秒钟，确保提交的任务完成</span>\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">awaitTermination</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"nc\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">SECONDS</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 关闭线程池</span>\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">shutdown</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"5线程状态\">5、线程状态</h3>\n\n<h4 id=\"基本版-4\">基本版</h4>\n<p>Java 线程有哪些状态，分别代表什么含义？</p>\n\n<p><strong>NEW</strong>: Thread state for a thread which has not yet started.</p>\n\n<p>未启动的。不会出现在Dump中。</p>\n\n<p><strong>RUNNABLE</strong>: Thread state for a runnable thread. A thread in the runnable state is executing in the Java virtual machine, but it may be waiting for other resources from the operating system such as processor.</p>\n\n<p>在虚拟机内执行的。运行中状态，可能里面还能看到locked字样，表明它获得了某把锁。</p>\n\n<p><strong>BLOCKE</strong>: Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling {@link Object#wait() Object.wait}.</p>\n\n<p>受阻塞并等待监视器锁。被某个锁(synchronizers)給block住了。</p>\n\n<p><strong>WAITING</strong>: Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;ul&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>{@link Object#wait() Object.wait} with no timeout<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>{@link #join() Thread.join} with no timeout<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>{@link LockSupport#park() LockSupport.park}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>A thread in the waiting state is waiting for another thread to perform a particular action.</p>\n\n<p>For example, a thread that has called Object.wait() on an object is waiting for another thread to call Object.notify() or Object.notifyAll() on that object. A thread that has called Thread.join() is waiting for a specified thread to terminate.</p>\n\n<p>无限期等待另一个线程执行特定操作。等待某个condition或monitor发生，一般停留在park(), wait(), sleep(),join() 等语句里。</p>\n\n<p><strong>TIMED_WAITING</strong>: Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;ul&gt;</span>\n     <span class=\"nt\">&lt;li&gt;</span>{@link #sleep Thread.sleep}<span class=\"nt\">&lt;/li&gt;</span>\n     <span class=\"nt\">&lt;li&gt;</span>{@link Object#wait(long) Object.wait} with timeout<span class=\"nt\">&lt;/li&gt;</span>\n     <span class=\"nt\">&lt;li&gt;</span>{@link #join(long) Thread.join} with timeout<span class=\"nt\">&lt;/li&gt;</span>\n     <span class=\"nt\">&lt;li&gt;</span>{@link LockSupport#parkNanos LockSupport.parkNanos}<span class=\"nt\">&lt;/li&gt;</span>\n     <span class=\"nt\">&lt;li&gt;</span>{@link LockSupport#parkUntil LockSupport.parkUntil}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>有时限的等待另一个线程的特定操作。和WAITING的区别是wait() 等语句加上了时间限制 wait(timeout)。</p>\n\n<p><strong>TERMINATED</strong>: 已退出的; Thread state for a terminated thread. The thread has completed execution.</p>\n\n<h4 id=\"进阶版-4\">进阶版</h4>\n<p>如何获取当前JVM 所有的现场状态？</p>\n\n<p>方法一：命令</p>\n\n<p><code class=\"highlighter-rouge\">jstack</code>: jstack用于打印出给定的java进程ID或core file或远程调试服务的Java堆栈信息。主要用来查看Java线程的调用堆栈的，可以用来分析线程问题（如死锁）。</p>\n\n<p><code class=\"highlighter-rouge\">jsp</code></p>\n\n<p><code class=\"highlighter-rouge\">jsp [option/ -l] pid</code></p>\n\n<p>方法二：ThreadMXBean</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AllThreadStackQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ThreadMXBean</span> <span class=\"n\">threadMXBean</span> <span class=\"o\">=</span> <span class=\"nc\">ManagementFactory</span><span class=\"o\">.</span><span class=\"na\">getThreadMXBean</span><span class=\"o\">();</span>\n        <span class=\"kt\">long</span><span class=\"o\">[]</span> <span class=\"n\">threadIds</span> <span class=\"o\">=</span> <span class=\"n\">threadMXBean</span><span class=\"o\">.</span><span class=\"na\">getAllThreadIds</span><span class=\"o\">();</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">threadId</span> <span class=\"o\">:</span> <span class=\"n\">threadIds</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">ThreadInfo</span> <span class=\"n\">threadInfo</span> <span class=\"o\">=</span> <span class=\"n\">threadMXBean</span><span class=\"o\">.</span><span class=\"na\">getThreadInfo</span><span class=\"o\">(</span><span class=\"n\">threadId</span><span class=\"o\">);</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">threadInfo</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"劝退版-4\">劝退版</h4>\n<p>如何获取线程的资源消费情况？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AllThreadInfoQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ThreadMXBean</span> <span class=\"n\">threadMXBean</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">ThreadMXBean</span><span class=\"o\">)</span> <span class=\"nc\">ManagementFactory</span><span class=\"o\">.</span><span class=\"na\">getThreadMXBean</span><span class=\"o\">();</span>\n        <span class=\"kt\">long</span><span class=\"o\">[]</span> <span class=\"n\">threadIds</span> <span class=\"o\">=</span> <span class=\"n\">threadMXBean</span><span class=\"o\">.</span><span class=\"na\">getAllThreadIds</span><span class=\"o\">();</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">threadId</span> <span class=\"o\">:</span> <span class=\"n\">threadIds</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"c1\">//            ThreadInfo threadInfo = threadMXBean.getThreadInfo(threadId);</span>\n<span class=\"c1\">//            System.out.println(threadInfo.toString());</span>\n            <span class=\"kt\">long</span> <span class=\"n\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">threadMXBean</span><span class=\"o\">.</span><span class=\"na\">getThreadAllocatedBytes</span><span class=\"o\">(</span><span class=\"n\">threadId</span><span class=\"o\">);</span>\n            <span class=\"kt\">long</span> <span class=\"n\">kBytes</span> <span class=\"o\">=</span> <span class=\"n\">bytes</span> <span class=\"o\">/</span> <span class=\"mi\">1024</span><span class=\"o\">;</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[ID:%d] 分配内存： %s KB\\n\"</span><span class=\"o\">,</span> <span class=\"n\">threadId</span><span class=\"o\">,</span> <span class=\"n\">kBytes</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"6线程同步\">6、线程同步</h3>\n\n<h4 id=\"基本版-5\">基本版</h4>\n<p>请说明 synchronized 关键字在修饰方法与代码块中的区别？</p>\n\n<p>字节码的区别 (一个monitor,一个synchronized关键字)</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SynchronizedKeywordQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">synchronizedBlock</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"nc\">SynchronizedKeywordQuestion</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">synchronized</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">synchronizedMethod</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"进阶版-5\">进阶版</h4>\n<p>请说明 synchronized 关键字与 ReentrantLock 之间的区别？</p>\n\n<ul>\n  <li>两者都是可重入锁</li>\n  <li>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</li>\n  <li>ReentrantLock 比 synchronized 增加了一些高级功能</li>\n</ul>\n\n<p>相比synchronized，ReentrantLock增加了一些高级功能。主要来说主要有三点：①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）</p>\n<ul>\n  <li>两者的性能已经相差无几</li>\n</ul>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/./essential-content-for-interview/PreparingForInterview/美团面试常见问题总结?id=_3-谈谈-synchronized-和-reentrantlock-的区别\">谈谈 synchronized 和 ReentrantLock 的区别</a></p>\n\n<h4 id=\"劝退版-5\">劝退版</h4>\n<p>请解释偏向锁对 synchronized 与 ReentrantLock 的价值？</p>\n\n<p>偏向锁只对 synchronized 有用，而 ReentrantLock 已经实现了偏向锁。</p>\n\n<p><a href=\"https://wiki.openjdk.java.net/display/HotSpot/Synchronization\">Synchronization and Object Locking</a></p>\n\n<h3 id=\"7线程通讯\">7、线程通讯</h3>\n\n<h4 id=\"基本版-6\">基本版</h4>\n<p>为什么 wait() 和 notify() 以及 notifyAll() 方法属于 Object ,并解释它们的作用？</p>\n\n<p>Java所有对象都是来自 Object</p>\n\n<p><strong>wait():</strong></p>\n\n<p><strong>notify():</strong></p>\n\n<p><strong>notifyAll():</strong></p>\n\n<h4 id=\"进阶版-6\">进阶版</h4>\n<p>为什么 Object wait() notify() 以及 notifyAll() 方法必须 synchronized 之中执行？</p>\n\n<p><strong>wait():</strong> 获得锁的对象，释放锁，当前线程又被阻塞，等同于Java 5 LockSupport 中的park方法</p>\n\n<p><strong>notify():</strong> 已经获得锁，唤起一个被阻塞的线程，等同于Java 5 LockSupport 中的unpark()方法</p>\n\n<p><strong>notifyAll():</strong></p>\n\n<h4 id=\"劝退版-6\">劝退版</h4>\n<p>请通过 Java 代码模拟实现 wait() 和 notify() 以及 notifyAll() 的语义？</p>\n\n<h3 id=\"8线程退出\">8、线程退出</h3>\n\n<h4 id=\"基本版-7\">基本版</h4>\n<p>当主线程退出时，守护线程会执行完毕吗？</p>\n\n<p>不一定执行完毕</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">DaemonThreadQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// main 线程</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Hello,World\"</span><span class=\"o\">);</span>\n<span class=\"c1\">//            Thread currentThread = Thread.currentThread();</span>\n<span class=\"c1\">//            System.out.printf(\"线程[name : %s, daemon:%s]: Hello,World\\n\",</span>\n<span class=\"c1\">//                    currentThread.getName(),</span>\n<span class=\"c1\">//                    currentThread.isDaemon()</span>\n<span class=\"c1\">//            );</span>\n        <span class=\"o\">},</span> <span class=\"s\">\"daemon\"</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 编程守候线程</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">setDaemon</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// 守候线程的执行依赖于执行时间（非唯一评判）</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"进阶版-7\">进阶版</h4>\n<p>请说明 ShutdownHook 线程的使用场景，以及如何触发执行？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ShutdownHookQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">Runtime</span> <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"nc\">Runtime</span><span class=\"o\">.</span><span class=\"na\">getRuntime</span><span class=\"o\">();</span>\n\n        <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"na\">addShutdownHook</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ShutdownHookQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"Shutdown Hook Question\"</span><span class=\"o\">));</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>使用场景：Spring 中 AbstractApplicationContext 的 registerShutdownHook()</p>\n\n<h4 id=\"劝退版-7\">劝退版</h4>\n<p>如何确保主线程退出前，所有线程执行完毕？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CompleteAllThreadsQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// main 线程 -&gt; 子线程</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">CompleteAllThreadsQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t1\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">CompleteAllThreadsQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t2\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">CompleteAllThreadsQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t3\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 不确定 t1、t2、t3 是否调用 start()</span>\n\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// 创建了 N Thread</span>\n\n        <span class=\"nc\">Thread</span> <span class=\"n\">mainThread</span> <span class=\"o\">=</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 获取 main 线程组</span>\n        <span class=\"nc\">ThreadGroup</span> <span class=\"n\">threadGroup</span> <span class=\"o\">=</span> <span class=\"n\">mainThread</span><span class=\"o\">.</span><span class=\"na\">getThreadGroup</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 活跃的线程数</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">threadGroup</span><span class=\"o\">.</span><span class=\"na\">activeCount</span><span class=\"o\">();</span>\n        <span class=\"nc\">Thread</span><span class=\"o\">[]</span> <span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">[</span><span class=\"n\">count</span><span class=\"o\">];</span>\n        <span class=\"c1\">// 把所有的线程复制 threads 数组</span>\n        <span class=\"n\">threadGroup</span><span class=\"o\">.</span><span class=\"na\">enumerate</span><span class=\"o\">(</span><span class=\"n\">threads</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Thread</span> <span class=\"n\">thread</span> <span class=\"o\">:</span> <span class=\"n\">threads</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"当前活跃线程: %s\\n\"</span><span class=\"o\">,</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"java-并发集合框架\">Java 并发集合框架</h2>\n\n<h3 id=\"1线程安全集合\">1、线程安全集合</h3>\n\n<h4 id=\"基本版-8\">基本版</h4>\n<p>请在 Java 集合框架以及 J.U.C 框架中各列举出 List、Set 以及 Map 的实现？</p>\n\n<p>Java 集合框架: LinkedList、ArrayList、HashSet、TreeSet、HashMap</p>\n\n<p>J.U.C 框架: CopyOnWriteArrayList、CopyOnWriteArraySet、ConcurrentSkipListSet、ConcurrentSkipListMap、ConcurrentHashMap</p>\n\n<h4 id=\"进阶版-8\">进阶版</h4>\n<p>如何将普通 List、Set 以及 Map 转化为线程安全对象？</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ThreadSafeCollectionQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"nc\">Set</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">,</span> <span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"nc\">Map</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">\"A\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 以上实现都是不变对象，不过第一个除外</span>\n\n        <span class=\"c1\">// 通过 Collections#sychronized* 方法返回</span>\n\n        <span class=\"c1\">// Wrapper 设计模式（所有的方法都被 synchronized 同步或互斥）</span>\n        <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">synchronizedList</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">);</span>\n\n        <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">synchronizedSet</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">);</span>\n\n        <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">synchronizedMap</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">);</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"劝退版-8\">劝退版</h4>\n<p>如何在 Java 9+ 实现以上问题？</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ThreadSafeCollectionQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// Java 9 的实现</span>\n        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// Java 9 + of 工厂方法，返回 Immutable 对象</span>\n\n        <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"nc\">Set</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">,</span> <span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"nc\">Map</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">\"A\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 以上实现都是不变对象，不过第一个除外</span>\n\n        <span class=\"c1\">// 通过 Collections#sychronized* 方法返回</span>\n\n        <span class=\"c1\">// Wrapper 设计模式（所有的方法都被 synchronized 同步或互斥）</span>\n        <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">synchronizedList</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">);</span>\n\n        <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">synchronizedSet</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">);</span>\n\n        <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">synchronizedMap</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">//</span>\n        <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">CopyOnWriteArrayList</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">list</span><span class=\"o\">);</span>\n        <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">CopyOnWriteArraySet</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">set</span><span class=\"o\">);</span>\n        <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ConcurrentHashMap</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">map</span><span class=\"o\">);</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"2线程安全-list\">2、线程安全 LIST</h3>\n\n<h4 id=\"基本版-9\">基本版</h4>\n<p>请说明 List、Vector 以及 CopyOnWriteArrayList 的相同点和不同点？</p>\n\n<p><strong>相同点：</strong></p>\n\n<p>Vector、CopyOnWriteArrayList 是 List 的实现。</p>\n\n<p><strong>不同点：</strong></p>\n\n<p>Vector 是同步的,任何时候不加锁。并且在设计中有个 interator ,返回的对象是 <code class=\"highlighter-rouge\">fail-fast</code>；</p>\n\n<p>CopyOnWriteArrayList 读的时候是不加锁；弱一致性，while true的时候不报错。</p>\n\n<h4 id=\"进阶版-9\">进阶版</h4>\n<p>请说明 Collections#synchromizedList(List) 与 Vector 的相同点和不同点？</p>\n\n<p><strong>相同点：</strong></p>\n\n<p>都是<code class=\"highlighter-rouge\">synchromized</code> 的实现方式。</p>\n\n<p><strong>不同点：</strong></p>\n\n<p>synchromized 返回的是list, 实现原理方式是 Wrapper 实现；</p>\n\n<p>而 Vector 是 List 的实现。实现原理方式是非 Wrapper 实现。</p>\n\n<h4 id=\"劝退版-9\">劝退版</h4>\n<p>Arrays#asList(Object…)方法是线程安全的吗？如果不是的话，如果实现替代方案？</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ArraysAsListMethodQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 调整第三个元素为 9</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 3 -&gt; 9</span>\n        <span class=\"c1\">// Arrays.asList 并非线程安全</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">::</span><span class=\"n\">println</span><span class=\"o\">);</span>\n        <span class=\"c1\">// Java &lt; 5 , Collections#synchronizedList</span>\n        <span class=\"c1\">// Java 5+ , CopyOnWriteArrayList</span>\n        <span class=\"c1\">// Java 9+ , List.of(...) 只读</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"3线程安全-set\">3、线程安全 SET</h3>\n\n<h4 id=\"基本版-10\">基本版</h4>\n<p>请至少举出三种线程安全的 Set 实现？</p>\n\n<p>synchronizedSet、CopyOnWriteArraySet、ConcurrentSkipListSet</p>\n\n<h4 id=\"进阶版-10\">进阶版</h4>\n<p>在 J.U.C 框架中，存在HashSet 的线程安全实现？如果不存在的话，要如何实现？</p>\n\n<p>不存在；</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ConcurrentHashSetQuestion</span> <span class=\"o\">{</span>\n\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">ConcurrentHashSet</span><span class=\"o\">&lt;</span><span class=\"no\">E</span><span class=\"o\">&gt;</span> <span class=\"kd\">implements</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"no\">E</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">Object</span> <span class=\"no\">OBJECT</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Object</span><span class=\"o\">();</span>\n\n        <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">ConcurrentHashMap</span><span class=\"o\">&lt;</span><span class=\"no\">E</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ConcurrentHashMap</span><span class=\"o\">&lt;&gt;();</span>\n\n        <span class=\"kd\">private</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"no\">E</span><span class=\"o\">&gt;</span> <span class=\"nf\">keySet</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">keySet</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">size</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">keySet</span><span class=\"o\">().</span><span class=\"na\">size</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">keySet</span><span class=\"o\">().</span><span class=\"na\">isEmpty</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">contains</span><span class=\"o\">(</span><span class=\"nc\">Object</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">keySet</span><span class=\"o\">().</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"nc\">Iterator</span><span class=\"o\">&lt;</span><span class=\"no\">E</span><span class=\"o\">&gt;</span> <span class=\"nf\">iterator</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">keySet</span><span class=\"o\">().</span><span class=\"na\">iterator</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"nf\">toArray</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nc\">Object</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">toArray</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"no\">E</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"no\">OBJECT</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">remove</span><span class=\"o\">(</span><span class=\"nc\">Object</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">containsAll</span><span class=\"o\">(</span><span class=\"nc\">Collection</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">addAll</span><span class=\"o\">(</span><span class=\"nc\">Collection</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"no\">E</span><span class=\"o\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">retainAll</span><span class=\"o\">(</span><span class=\"nc\">Collection</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">removeAll</span><span class=\"o\">(</span><span class=\"nc\">Collection</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">clear</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"劝退版-10\">劝退版</h4>\n<p>当 Set#iterator() 方法返回 Iterator 对象后，能否在其迭代中，给 Set 对象添加新的元素？</p>\n\n<p>不一定；Set 在传统实现中，会有<code class=\"highlighter-rouge\">fail-fast</code>问题；而在J.U.C中会出现弱一致性，对数据的一致性要求较低，是可以给 Set 对象添加新的元素。</p>\n\n<h3 id=\"4线程安全-map\">4、线程安全 MAP</h3>\n\n<h4 id=\"基本版-11\">基本版</h4>\n<p>请说明 Hashtable、HashMap 以及 ConcurrentHashMap 的区别？</p>\n\n<p><strong>Hashtable：</strong> key、value值都不能为空; 数组结构上，通过数组和链表实现。</p>\n\n<p><strong>HashMap：</strong> key、value值都能为空；数组结构上，当阈值到达8时，通过红黑树实现。</p>\n\n<p><strong>ConcurrentHashMap：</strong> key、value值都不能为空；数组结构上，当阈值到达8时，通过红黑树实现。</p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/37607299\">HashMap和Hashtable的比较</a></p>\n\n<h4 id=\"进阶版-11\">进阶版</h4>\n<p>请说明 ConcurrentHashMap 在不同的JDK 中的实现？</p>\n\n<p>JDK 1.6中，采用分离锁的方式，在读的时候，部分锁；写的时候，完全锁。而在JDK 1.7、1.8中，读的时候不需要锁的，写的时候需要锁的。并且JDK 1.8中在为了解决Hash冲突，采用红黑树解决。</p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/50675786\">HashMap? ConcurrentHashMap? 相信看完这篇没人能难住你！</a></p>\n\n<h4 id=\"劝退版-11\">劝退版</h4>\n<p>请说明 ConcurrentHashMap 与 ConcurrentSkipListMap 各自的优势与不足？</p>\n\n<p>在 java 6 和 8 中，ConcurrentHashMap 写的时候，是加锁的，所以内存占得比较小，而 ConcurrentSkipListMap 写的时候是不加锁的，内存占得相对比较大，通过空间换取时间上的成本，速度较快，但比前者要慢，ConcurrentHashMap 基本上是常量时间。ConcurrentSkipListMap 读和写都是log N实现，高性能相对稳定。</p>\n\n<h3 id=\"5线程安全-queue\">5、线程安全 QUEUE</h3>\n\n<h4 id=\"基本版-12\">基本版</h4>\n<p>请说明 BlockingQueue 与 Queue 的区别？</p>\n\n<p>BlockingQueue 继承了 Queue 的实现；put 方法中有个阻塞的操作（InterruptedException），当队列满的时候，put 会被阻塞；当队列空的时候，put方法可用。take 方法中，当数据存在时，才可以返回，否则为空。</p>\n\n<h4 id=\"进阶版-12\">进阶版</h4>\n<p>请说明 LinkedBlockingQueue 与 ArrayBlockingQueue 的区别？</p>\n\n<p>LinkedBlockingQueue 是链表结构；有两个构造器，一个是（Integer.MAX_VALUE)，无边界，另一个是(int capacity)，有边界；ArrayBlockingQueue 是数组结构；有边界。</p>\n\n<h4 id=\"劝退版-12\">劝退版</h4>\n<p>请说明 LinkedTransferQueue 与 LinkedBlockingQueue 的区别？</p>\n\n<p>LinkedTransferQueue 是java 7中提供的新接口，性能比后者更优化。</p>\n\n<h3 id=\"6priorityblockingqueue\">6、PRIORITYBLOCKINGQUEUE</h3>\n\n<h4 id=\"请评估以下程序的运行结果\">请评估以下程序的运行结果？</h4>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">priorityBlockingQueueQuiz</span><span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"k\">throw</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"nc\">BlockingQueue</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PriorityBlockingQueue</span><span class=\"o\">&lt;&gt;(</span><span class=\"mi\">2</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 1. PriorityBlockingQueue put(Object) 方法不阻塞，不抛异常</span>\n        <span class=\"c1\">// 2. PriorityBlockingQueue offer(Object) 方法不限制，允许长度变长</span>\n        <span class=\"c1\">// 3. PriorityBlockingQueue 插入对象会做排序，默认参照元素 Comparable 实现，</span>\n        <span class=\"c1\">//    或者显示地传递 Comparator</span>\n        <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"o\">);</span>\n        <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.size() =\"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">());</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.take() =\"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">take</span><span class=\"o\">());</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue =\"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>运行结果：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre>queue.size() = 3\nqueue.take() = 1\nqueue = [8,9]\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h3 id=\"7synchronousqueue\">7、SYNCHRONOUSQUEUE</h3>\n\n<h4 id=\"请评估以下程序的运行结果-1\">请评估以下程序的运行结果？</h4>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SynchronusQueueQuiz</span><span class=\"o\">{</span>\n    \n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"nc\">BlockingQueue</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SynchronousQueue</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"c1\">// 1. SynchronousQueue 是无空间，offer 永远返回 false</span>\n        <span class=\"c1\">// 2. SynchronousQueue take() 方法会被阻塞，必须被其他线程显示地调用 put(Object);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">pringln</span><span class=\"o\">(</span><span class=\"s\">\"queue.offer(1) = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">));</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">pringln</span><span class=\"o\">(</span><span class=\"s\">\"queue.offer(2) = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">));</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">pringln</span><span class=\"o\">(</span><span class=\"s\">\"queue.offer(3) = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">));</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.take() = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">take</span><span class=\"o\">());</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.size = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>运行结果：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre>queue.offer(1) = false\nqueue.offer(2) = false\nqueue.offer(3) = false\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>SynchronousQueue take() 方法会被阻塞</p>\n\n<h3 id=\"8blockingqueue-offer\">8、BLOCKINGQUEUE OFFER()</h3>\n\n<h4 id=\"请评估以下程序的运行结果-2\">请评估以下程序的运行结果？</h4>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">BlockingQueueQuiz</span><span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"n\">offer</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ArrayBlockingQueue</span><span class=\"o\">&lt;&gt;(</span><span class=\"mi\">2</span><span class=\"o\">));</span>\n        <span class=\"n\">offer</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">LinkedBlockingQueue</span><span class=\"o\">&lt;&gt;(</span><span class=\"mi\">2</span><span class=\"o\">));</span>\n        <span class=\"n\">offer</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">PriorityBlockingQueue</span><span class=\"o\">&lt;&gt;(</span><span class=\"mi\">2</span><span class=\"o\">));</span>\n        <span class=\"n\">offer</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">SynchronousQueue</span><span class=\"o\">&lt;&gt;());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">offer</span><span class=\"o\">(</span><span class=\"nc\">BlockingQueue</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">queue</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.getClass() = \"</span> <span class=\"o\">+</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.offer(1) = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">));</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.offer(2) = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">));</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.offer(3) = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">));</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.size() = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">());</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"queue.take() = \"</span> <span class=\"o\">+</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">take</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>运行结果：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n</pre></td><td class=\"rouge-code\"><pre>queue.getClass() = java.util.concurrent.ArrayBlockingQueue\nqueue.offer(1) = true\nqueue.offer(2) = true\nqueue.offer(3) = false\nqueue.size() = 2\nqueue.take() = 1\n\nqueue.getClass() = java.util.concurrent.LinkedBlockingQueue\nqueue.offer(1) = true\nqueue.offer(2) = true\nqueue.offer(3) = false\nqueue.size() = 2\nqueue.take() = 1\n\nqueue.getClass() = java.util.concurrent.PriorityBlockingQueue\nqueue.offer(1) = true\nqueue.offer(2) = true\nqueue.offer(3) = false\nqueue.size() = 3\nqueue.take() = 1\n\nqueue.getClass() = java.util.concurrent.SynchronousQueue\nqueue.offer(1) = false\nqueue.offer(2) = false\nqueue.offer(3) = false\nqueue.size() = 0\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>queue.take() 方法会被阻塞</p>\n\n<h2 id=\"java-并发框架\">Java 并发框架</h2>\n\n<h3 id=\"1锁-lock\">1、锁 LOCK</h3>\n\n<h4 id=\"基本版-13\">基本版</h4>\n<p>请说明 ReentranLock 与 ReentrantReadWriteLock 的区别？</p>\n\n<p>jdk 1.5 以后，ReentranLock(重进入锁)与 ReentrantReadWriteLock 都是可重进入的锁，ReentranLock 都是互斥的，而 ReentrantReadWriteLock 是共享的，其中里面有两个类，一个是 ReadLock（共享，并行，强调数据一致性或者说可见性），另一个是 WriteLock(互斥，串行)。</p>\n\n<h4 id=\"进阶版-13\">进阶版</h4>\n<p>请解释 ReentrantLock 为什么命名为重进入？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ReentrantLockQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n     * T1 , T2 , T3\n     *\n     * T1(lock) , T2(park), T3(park)\n     * Waited Queue -&gt; Head-&gt; T2 next -&gt; T3\n     * T1(unlock) -&gt; unpark all\n     * Waited Queue -&gt; Head-&gt; T2 next -&gt; T3\n     * T2(free), T3(free)\n     *\n     * -&gt; T2(lock) , T3(park)\n     * Waited Queue -&gt; Head-&gt; T3\n     * T2(unlock) -&gt; unpark all\n     * T3(free)\n     */</span>\n\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">ReentrantLock</span> <span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ReentrantLock</span><span class=\"o\">();</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// thread[main] -&gt;</span>\n        <span class=\"c1\">// lock     lock           lock</span>\n        <span class=\"c1\">// main -&gt; action1() -&gt; action2() -&gt; action3()</span>\n        <span class=\"n\">synchronizedAction</span><span class=\"o\">(</span><span class=\"nl\">ReentrantLockQuestion:</span><span class=\"o\">:</span><span class=\"n\">action1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action1</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">synchronizedAction</span><span class=\"o\">(</span><span class=\"nl\">ReentrantLockQuestion:</span><span class=\"o\">:</span><span class=\"n\">action2</span><span class=\"o\">);</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action2</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">synchronizedAction</span><span class=\"o\">(</span><span class=\"nl\">ReentrantLockQuestion:</span><span class=\"o\">:</span><span class=\"n\">action3</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action3</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Hello,World\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">synchronizedAction</span><span class=\"o\">(</span><span class=\"nc\">Runnable</span> <span class=\"n\">runnable</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">runnable</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h4 id=\"劝退版-13\">劝退版</h4>\n<p>请说明 Lock#lock() 与 Lock#lockInterruptibly() 的区别？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"cm\">/**\n     * java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued\n     * 如果当前线程已被其他线程调用了 interrupt() 方法时，这时会返回 true\n     * acquireQueued 执行完时，interrupt 清空（false）\n     * 再通过 selfInterrupt() 方法将状态恢复（interrupt=true）\n     */</span>\n         <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">lockVsLockInterruptibly</span><span class=\"o\">();</span>\n     <span class=\"o\">}</span>\n     \n        <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">lockVsLockInterruptibly</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">lockInterruptibly</span><span class=\"o\">();</span>\n            <span class=\"n\">action1</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 显示地恢复中断状态</span>\n            <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">interrupt</span><span class=\"o\">();</span>\n            <span class=\"c1\">// 当前线程并未消亡，线程池可能还在存活</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>lock()</strong>  优先考虑获取锁，待获取锁成功后，才响应中断。</p>\n\n<p>**lockInterruptibly() ** 优先考虑响应中断，而不是响应锁的普通获取或重入获取。</p>\n\n<p><strong>ReentrantLock.lockInterruptibly</strong> 允许在等待时由其它线程调用等待线程的 Thread.interrupt 方法来中断等待线程的等待而直接返回，这时不用获取锁，而会抛出一个 InterruptedException。</p>\n\n<p><strong>ReentrantLock.lock</strong> 方法不允许 Thread.interrupt 中断,即使检测到 Thread.isInterrupted ,一样会继续尝试获取锁，失败则继续休眠。只是在最后获取锁成功后再把当前线程置为 interrupted 状态,然后再中断线程。</p>\n\n<h3 id=\"2条件变量-condition\">2、条件变量 CONDITION</h3>\n\n<h4 id=\"基本版-14\">基本版</h4>\n<p>请举例说明 Condition 使用场景？</p>\n\n<ol>\n  <li>CoutDownLatch (condition 变种)</li>\n  <li>CyclicBarrier (循环屏障)</li>\n  <li>信号量/灯（Semaphore) java 9</li>\n  <li>生产者和消费者</li>\n  <li>阻塞队列</li>\n</ol>\n\n<h4 id=\"进阶版-14\">进阶版</h4>\n<p>请使用 Condition 实现 “生产者-消费者问题”？</p>\n\n<p><a href=\"https://blog.csdn.net/u014082714/article/details/83927697\">使用Condition实现生产者消费者</a></p>\n\n<h4 id=\"劝退版-14\">劝退版</h4>\n<p>请解释 Condition await() 和 signal() 与 Object wait () 和 notify() 的相同与差异？</p>\n\n<p>相同：阻塞和释放</p>\n\n<p>差异：Java Thread 对象和实际 JVM 执行的 OS Thread 不是相同对象，JVM Thread 回调 Java Thread.run() 方法，同时 Thread 提供一些 native 方法来获取 JVM Thread 状态，当JVM thread 执行后，自动 notify()了。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">())</span> <span class=\"o\">{</span> <span class=\"c1\">// Thread 特殊的 Object</span>\n            <span class=\"c1\">// 当线程 Thread isAlive() == false 时，thread.wait() 操作会被自动释放</span>\n            <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"n\">thread</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">try</span> <span class=\"o\">{</span>\n                    <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">wait</span><span class=\"o\">();</span> <span class=\"c1\">// 到底是谁通知 Thread -&gt; thread.notify();</span>\n<span class=\"c1\">//                    LockSupport.park(); // 死锁发生</span>\n                <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"3屏障-barriers\">3、屏障 BARRIERS</h3>\n\n<h4 id=\"基本版-15\">基本版</h4>\n<p>请说明 CountDownLatch 与 CyclicBarrier 的区别？</p>\n\n<p><strong>CountDownLatch</strong> : 不可循环的，一次性操作（倒计时）。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CountDownLatchQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// 倒数计数 5</span>\n        <span class=\"nc\">CountDownLatch</span> <span class=\"n\">latch</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">CountDownLatch</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">ExecutorService</span> <span class=\"n\">executorService</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newFixedThreadPool</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">);</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">submit</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n                <span class=\"n\">action</span><span class=\"o\">();</span>\n                <span class=\"n\">latch</span><span class=\"o\">.</span><span class=\"na\">countDown</span><span class=\"o\">();</span> <span class=\"c1\">// -1</span>\n            <span class=\"o\">});</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 等待完成</span>\n        <span class=\"c1\">// 当计数 &gt; 0，会被阻塞</span>\n        <span class=\"n\">latch</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Done\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 关闭线程池</span>\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">shutdown</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>CyclicBarrier</strong>：可循环的， 先计数 -1，再判断当计数 &gt; 0 时候，才阻塞。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CyclicBarrierQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">CyclicBarrier</span> <span class=\"n\">barrier</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">CyclicBarrier</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">);</span> <span class=\"c1\">// 5</span>\n\n        <span class=\"nc\">ExecutorService</span> <span class=\"n\">executorService</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newFixedThreadPool</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">);</span> <span class=\"c1\">// 3</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">20</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">submit</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n                <span class=\"n\">action</span><span class=\"o\">();</span>\n                <span class=\"k\">try</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// CyclicBarrier.await() = CountDownLatch.countDown() + await()</span>\n                    <span class=\"c1\">// 先计数 -1，再判断当计数 &gt; 0 时候，才阻塞</span>\n                    <span class=\"n\">barrier</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BrokenBarrierException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">});</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 尽可能不要执行完成再 reset</span>\n        <span class=\"c1\">// 先等待 3 ms</span>\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">awaitTermination</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"nc\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">MILLISECONDS</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 再执行 CyclicBarrier reset</span>\n        <span class=\"c1\">// reset 方法是一个废操作</span>\n        <span class=\"n\">barrier</span><span class=\"o\">.</span><span class=\"na\">reset</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Done\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 关闭线程池</span>\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">shutdown</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"进阶版-15\">进阶版</h4>\n<p>请说明 Semaphore（信号量/灯） 的使用场景？</p>\n\n<p>Semaphore 和Lock类似，比Lock灵活。其中有 acquire() 和 release() 两种方法，arg 都等于 1。acquire() 会抛出 InterruptedException，同时从 <code class=\"highlighter-rouge\">sync.acquireSharedInterruptibly(arg:1)</code>可以看出是读模式（shared)； release()中可以计数，可以控制数量，permits可以传递N个数量。</p>\n\n<p><a href=\"https://blog.csdn.net/zbc1090549839/article/details/53389602\">Java中Semaphore(信号量)的使用</a></p>\n\n<h4 id=\"劝退版-15\">劝退版</h4>\n<p>请通过 Java 1.4 的语法实现一个 CountDownLatch?</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">LegacyCountDownLatchDemo</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// 倒数计数 5</span>\n        <span class=\"nc\">MyCountDownLatch</span> <span class=\"n\">latch</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MyCountDownLatch</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">ExecutorService</span> <span class=\"n\">executorService</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newFixedThreadPool</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">);</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">submit</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n                <span class=\"n\">action</span><span class=\"o\">();</span>\n                <span class=\"n\">latch</span><span class=\"o\">.</span><span class=\"na\">countDown</span><span class=\"o\">();</span> <span class=\"c1\">// -1</span>\n            <span class=\"o\">});</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 等待完成</span>\n        <span class=\"c1\">// 当计数 &gt; 0，会被阻塞</span>\n        <span class=\"n\">latch</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Done\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 关闭线程池</span>\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">shutdown</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n     * Java 1.5+ Lock 实现\n     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">MyCountDownLatch</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n\n        <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">Lock</span> <span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ReentrantLock</span><span class=\"o\">();</span>\n\n        <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">Condition</span> <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">newCondition</span><span class=\"o\">();</span>\n\n        <span class=\"kd\">private</span> <span class=\"nf\">MyCountDownLatch</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">count</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">await</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 当 count &gt; 0 等待</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">interrupted</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">InterruptedException</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>\n            <span class=\"k\">try</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">condition</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();</span> <span class=\"c1\">// 阻塞当前线程</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n                <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">countDown</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\n            <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>\n            <span class=\"k\">try</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">return</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">count</span><span class=\"o\">--;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"c1\">// 当数量减少至0时，唤起被阻塞的线程</span>\n                    <span class=\"n\">condition</span><span class=\"o\">.</span><span class=\"na\">signalAll</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n                <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n     * Java &lt; 1.5 实现\n     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">LegacyCountDownLatch</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n\n        <span class=\"kd\">private</span> <span class=\"nf\">LegacyCountDownLatch</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">count</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">await</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 当 count &gt; 0 等待</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">interrupted</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">InterruptedException</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">wait</span><span class=\"o\">();</span> <span class=\"c1\">// 阻塞当前线程</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">countDown</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">return</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">count</span><span class=\"o\">--;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"c1\">// 当数量减少至0时，唤起被阻塞的线程</span>\n                    <span class=\"n\">notifyAll</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"4线程池-thread-pool\">4、线程池 THREAD POOL</h3>\n\n<h4 id=\"基本版-16\">基本版</h4>\n<p>请问 J.U.C 中内建了几种 ExceptionService 实现？</p>\n\n<p>1.5：ThreadPoolExecutor、ScheduledThreadPoolExecutor</p>\n\n<p>1.7：ForkJoinPool</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ExecutorServiceQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"cm\">/**\n         * 1.5\n         *  ThreadPoolExecutor\n         *  ScheduledThreadPoolExecutor :: ThreadPoolExecutor\n         * 1.7\n         *  ForkJoinPool\n         */</span>\n        <span class=\"nc\">ExecutorService</span> <span class=\"n\">executorService</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newFixedThreadPool</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">);</span>\n\n        <span class=\"n\">executorService</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newScheduledThreadPool</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// executorService 不再被引用，它会被 GC -&gt; finalize() -&gt; shutdown()</span>\n        <span class=\"nc\">ExecutorService</span> <span class=\"n\">executorService2</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newSingleThreadExecutor</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"进阶版-16\">进阶版</h4>\n<p>请分别解释 ThreadPoolExecutor 构造器参数在运行时的作用？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cm\">/**\n * Creates a new {@code ThreadPoolExecutor} with the given initial\n * parameters.\n *\n * @param corePoolSize the number of threads to keep in the pool, even\n *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n * @param maximumPoolSize the maximum number of threads to allow in the\n *        pool\n * @param keepAliveTime when the number of threads is greater than\n *        the core, this is the maximum time that excess idle threads\n *        will wait for new tasks before terminating.\n * @param unit the time unit for the {@code keepAliveTime} argument\n * @param workQueue the queue to use for holding tasks before they are\n *        executed.  This queue will hold only the {@code Runnable}\n *        tasks submitted by the {@code execute} method.\n * @param threadFactory the factory to use when the executor\n *        creates a new thread\n * @param handler the handler to use when execution is blocked\n *        because the thread bounds and queue capacities are reached\n * @throws IllegalArgumentException if one of the following holds:&lt;br&gt;\n *         {@code corePoolSize &lt; 0}&lt;br&gt;\n *         {@code keepAliveTime &lt; 0}&lt;br&gt;\n *         {@code maximumPoolSize &lt;= 0}&lt;br&gt;\n *         {@code maximumPoolSize &lt; corePoolSize}\n * @throws NullPointerException if {@code workQueue}\n *         or {@code threadFactory} or {@code handler} is null\n */</span>\n<span class=\"kd\">public</span> <span class=\"nf\">ThreadPoolExecutor</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">corePoolSize</span><span class=\"o\">,</span>\n                          <span class=\"kt\">int</span> <span class=\"n\">maximumPoolSize</span><span class=\"o\">,</span>\n                          <span class=\"kt\">long</span> <span class=\"n\">keepAliveTime</span><span class=\"o\">,</span>\n                          <span class=\"nc\">TimeUnit</span> <span class=\"n\">unit</span><span class=\"o\">,</span>\n                          <span class=\"nc\">BlockingQueue</span><span class=\"o\">&lt;</span><span class=\"nc\">Runnable</span><span class=\"o\">&gt;</span> <span class=\"n\">workQueue</span><span class=\"o\">,</span>\n                          <span class=\"nc\">ThreadFactory</span> <span class=\"n\">threadFactory</span><span class=\"o\">,</span>\n                          <span class=\"nc\">RejectedExecutionHandler</span> <span class=\"n\">handler</span><span class=\"o\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>corePoolSize</strong>: 核心线程池大小。这个参数是否生效取决于allowCoreThreadTimeOut变量的值，该变量默认是false，即对于核心线程没有超时限制，所以这种情况下，corePoolSize参数是起效的。如果allowCoreThreadTimeOut为true，那么核心线程允许超时，并且超时时间就是keepAliveTime参数和unit共同决定的值，这种情况下，如果线程池长时间空闲的话最终存活的线程会变为0，也即corePoolSize参数失效。</p>\n\n<p><strong>maximumPoolSize</strong>: 线程池中最大的存活线程数。这个参数比较好理解，对于超出corePoolSize部分的线程，无论allowCoreThreadTimeOut变量的值是true还是false，都会超时，超时时间由keepAliveTime和unit两个参数算出。</p>\n\n<p><strong>keepAliveTime</strong>: 超时时间。</p>\n\n<p><strong>unit</strong>: 超时时间的单位，秒，毫秒，微秒，纳秒等，与keepAliveTime参数共同决定超时时间。</p>\n\n<p><strong>workQueue</strong>: 线程等待队列。当调用execute方法时，如果线程池中没有空闲的可用线程，那么就会把这个Runnable对象放到该队列中。这个参数必须是一个实现BlockingQueue接口的阻塞队列，因为要保证线程安全。有一个要注意的点是，只有在调用execute方法是，才会向这个队列中添加任务，那么对于submit方法呢，难道submit方法提交任务时如果没有可用的线程就直接扔掉吗？当然不是，看一下AbstractExecutorService类中submit方法实现，其实submit方法只是把传进来的Runnable对象或Callable对象包装成一个新的Runnable对象，然后调用execute方法，并将包装后的FutureTask对象作为一个Future引用返回给调用者。Future的阻塞特性实际是在FutureTask中实现的，具体怎么实现感兴趣的话可以看一下FutureTask的源码。</p>\n\n<p><strong>threadFactory</strong>: 线程创建工厂。用于在需要的时候生成新的线程。默认实现是Executors.defaultThreadFactory()，即new 一个Thread对象，并设置线程名称，daemon等属性。</p>\n\n<p><strong>handler</strong>: 拒绝策略。这个参数的作用是当提交任务时既没有空闲线程，任务队列也满了，这时候就会调用handler的rejectedExecution方法。默认的实现是抛出一个RejectedExecutionException异常。</p>\n\n<h4 id=\"劝退版-16\">劝退版</h4>\n<p>如何获取 ThreadPoolExecutor 正在运行的线程？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ThreadPoolExecutorThreadQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// main 线程启动子线程，子线程的创造来自于 Executors.defaultThreadFactory()</span>\n\n        <span class=\"nc\">ExecutorService</span> <span class=\"n\">executorService</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newCachedThreadPool</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 之前了解 ThreadPoolExecutor beforeExecute 和 afterExecute 能够获取当前线程数量</span>\n\n        <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Thread</span><span class=\"o\">&gt;</span> <span class=\"n\">threadsContainer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&gt;();</span>\n\n        <span class=\"n\">setThreadFactory</span><span class=\"o\">(</span><span class=\"n\">executorService</span><span class=\"o\">,</span> <span class=\"n\">threadsContainer</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span> <span class=\"c1\">// 开启 9 个线程</span>\n            <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">submit</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"o\">});</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 线程池等待执行 3 ms</span>\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">awaitTermination</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"nc\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">MILLISECONDS</span><span class=\"o\">);</span>\n\n        <span class=\"n\">threadsContainer</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n                <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"nl\">Thread:</span><span class=\"o\">:</span><span class=\"n\">isAlive</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">thread</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"线程池创造的线程 : \"</span> <span class=\"o\">+</span> <span class=\"n\">thread</span><span class=\"o\">);</span>\n                <span class=\"o\">});</span>\n\n        <span class=\"nc\">Thread</span> <span class=\"n\">mainThread</span> <span class=\"o\">=</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">ThreadGroup</span> <span class=\"n\">mainThreadGroup</span> <span class=\"o\">=</span> <span class=\"n\">mainThread</span><span class=\"o\">.</span><span class=\"na\">getThreadGroup</span><span class=\"o\">();</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">mainThreadGroup</span><span class=\"o\">.</span><span class=\"na\">activeCount</span><span class=\"o\">();</span>\n        <span class=\"nc\">Thread</span><span class=\"o\">[]</span> <span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">[</span><span class=\"n\">count</span><span class=\"o\">];</span>\n        <span class=\"n\">mainThreadGroup</span><span class=\"o\">.</span><span class=\"na\">enumerate</span><span class=\"o\">(</span><span class=\"n\">threads</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">threads</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"nl\">Thread:</span><span class=\"o\">:</span><span class=\"n\">isAlive</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">thread</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"线程 : \"</span> <span class=\"o\">+</span> <span class=\"n\">thread</span><span class=\"o\">);</span>\n                <span class=\"o\">});</span>\n\n        <span class=\"c1\">// 关闭线程池</span>\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">shutdown</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">setThreadFactory</span><span class=\"o\">(</span><span class=\"nc\">ExecutorService</span> <span class=\"n\">executorService</span><span class=\"o\">,</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Thread</span><span class=\"o\">&gt;</span> <span class=\"n\">threadsContainer</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">executorService</span> <span class=\"k\">instanceof</span> <span class=\"nc\">ThreadPoolExecutor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">ThreadPoolExecutor</span> <span class=\"n\">threadPoolExecutor</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">ThreadPoolExecutor</span><span class=\"o\">)</span> <span class=\"n\">executorService</span><span class=\"o\">;</span>\n            <span class=\"nc\">ThreadFactory</span> <span class=\"n\">oldThreadFactory</span> <span class=\"o\">=</span> <span class=\"n\">threadPoolExecutor</span><span class=\"o\">.</span><span class=\"na\">getThreadFactory</span><span class=\"o\">();</span>\n            <span class=\"n\">threadPoolExecutor</span><span class=\"o\">.</span><span class=\"na\">setThreadFactory</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">DelegatingThreadFactory</span><span class=\"o\">(</span><span class=\"n\">oldThreadFactory</span><span class=\"o\">,</span> <span class=\"n\">threadsContainer</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">DelegatingThreadFactory</span> <span class=\"kd\">implements</span> <span class=\"nc\">ThreadFactory</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">ThreadFactory</span> <span class=\"n\">delegate</span><span class=\"o\">;</span>\n\n        <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Thread</span><span class=\"o\">&gt;</span> <span class=\"n\">threadsContainer</span><span class=\"o\">;</span>\n\n        <span class=\"kd\">private</span> <span class=\"nf\">DelegatingThreadFactory</span><span class=\"o\">(</span><span class=\"nc\">ThreadFactory</span> <span class=\"n\">delegate</span><span class=\"o\">,</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Thread</span><span class=\"o\">&gt;</span> <span class=\"n\">threadsContainer</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">delegate</span> <span class=\"o\">=</span> <span class=\"n\">delegate</span><span class=\"o\">;</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">threadsContainer</span> <span class=\"o\">=</span> <span class=\"n\">threadsContainer</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"nc\">Thread</span> <span class=\"nf\">newThread</span><span class=\"o\">(</span><span class=\"nc\">Runnable</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Thread</span> <span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">newThread</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">);</span>\n            <span class=\"c1\">// cache thread</span>\n            <span class=\"n\">threadsContainer</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">thread</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">thread</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"5future\">5、FUTURE</h3>\n\n<h4 id=\"基本版-17\">基本版</h4>\n<p>如何获取 Future 对象？</p>\n\n<p>submit()</p>\n\n<h4 id=\"进阶版-17\">进阶版</h4>\n<p>请举例 Future get() 以及 get(Long,TimeUnit) 方法的使用场景？</p>\n\n<p><strong>超时等待</strong></p>\n\n<p><strong>InterruptedException</strong></p>\n\n<p><strong>ExcutionException</strong></p>\n\n<p><strong>TimeOutException</strong></p>\n\n<h4 id=\"劝退版-17\">劝退版</h4>\n<p>如何利用 Future 优雅地取消一个任务的执行？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CancellableFutureQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">ExecutorService</span> <span class=\"n\">executorService</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newSingleThreadExecutor</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">Future</span> <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">submit</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span> <span class=\"c1\">// 3秒内执行完成，才算正常</span>\n            <span class=\"n\">action</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">);</span>\n        <span class=\"o\">});</span>\n\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"nc\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">SECONDS</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// Thread 恢复中断状态</span>\n            <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">interrupt</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">ExecutionException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">TimeoutException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 执行超时，适当地关闭</span>\n            <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">interrupt</span><span class=\"o\">();</span> <span class=\"c1\">// 设置中断状态</span>\n            <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"na\">cancel</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span> <span class=\"c1\">// 尝试取消</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">shutdown</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">seconds</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"nc\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">SECONDS</span><span class=\"o\">.</span><span class=\"na\">toMillis</span><span class=\"o\">(</span><span class=\"n\">seconds</span><span class=\"o\">));</span> <span class=\"c1\">// 5 - 3</span>\n            <span class=\"c1\">// seconds - timeout = 剩余执行时间</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">interrupted</span><span class=\"o\">())</span> <span class=\"o\">{</span> <span class=\"c1\">// 判断并且清除中断状态</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">action</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"6volatile-变量\">6、VOLATILE 变量</h3>\n\n<h4 id=\"基本版-18\">基本版</h4>\n<p>在 Java 中，volatile 保证的是可见性还是原子性？</p>\n\n<p><strong>volatile</strong> 既有可见性又有原子性（非我及彼），可见性是一定的，原子性是看情况的。对象类型和原生类型都是可见性，原生类型是原子性。</p>\n\n<h4 id=\"进阶版-18\">进阶版</h4>\n<p>在 Java 中，volatile long 和 double 是线程安全的吗？</p>\n\n<p>volatile long 和 double 是线程安全的。</p>\n\n<h4 id=\"劝退版-18\">劝退版</h4>\n<p>在 Java 中，volatile 底层实现是基于什么机制？</p>\n\n<p><strong>内存屏障</strong>（变量 Lock）机制：一个变量的原子性的保证。</p>\n\n<h3 id=\"7原子操作-atomic\">7、原子操作 ATOMIC</h3>\n\n<h4 id=\"基本版-19\">基本版</h4>\n<p>为什么 AtomicBoolean 内部变量使用 int 实现，而非 boolean?</p>\n\n<p>操作系统有 X86 和 X64，在虚拟机中，基于boolean 实现就是用 int 实现的，用哪一种实现都可以。虚拟机只有32位和64位的，所以用32位的实现。</p>\n\n<h4 id=\"进阶版-19\">进阶版</h4>\n<p>在变量原子操作时，Atomic* CAS 操作比 synchronized 关键字哪个更重？</p>\n\n<p><a href=\"https://wiki.openjdk.java.net/display/HotSpot/Synchronization\">Synchronization</a></p>\n\n<p>同线程的时候，synchronized 刚快；而多线程的时候则要分情况讨论。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AtomicQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"n\">actualValue</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">AtomicInteger</span> <span class=\"n\">atomicInteger</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">AtomicInteger</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">);</span>\n        <span class=\"c1\">// if( value == 3 )</span>\n        <span class=\"c1\">//     value = 5</span>\n        <span class=\"n\">atomicInteger</span><span class=\"o\">.</span><span class=\"na\">compareAndSet</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 偏向锁 &lt; CAS 操作 &lt; 重锁（完全互斥）</span>\n        <span class=\"c1\">// CAS 操作也是相对重的操作，它也是实现 synchronized 瘦锁(thin lock)的关键</span>\n        <span class=\"c1\">// 偏向锁就是避免 CAS（Compare And Set/Swap)操作</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">synchronized</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">compareAndSet</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">expectedValue</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">newValue</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">actualValue</span> <span class=\"o\">==</span> <span class=\"n\">expectedValue</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">actualValue</span> <span class=\"o\">=</span> <span class=\"n\">newValue</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"劝退版-19\">劝退版</h4>\n<p>Atomic* CAS 的底层是如何实现？</p>\n\n<p>汇编指令：<code class=\"highlighter-rouge\">cpmxchg</code> (Compare and Exchange)</p>\n",
      "desc"     : "  本文来自于我的慕课网手记：小马哥Java面试题课程总结，转载请保留链接 ;)前段时间在慕课网直播上听小马哥面试劝退（”面试虐我千百遍，Java 并发真讨厌”），发现讲得东西比自己拿到offer还要高兴，于是自己在线下做了一点小笔记，供各位参考。课程地址：https://www.bilibili.com/video/av49124110源码文档地址：https://github.com/m..."
} ,
  
  
  
    {
      "title"    : "简单聊会 Docker",
      "title-lower"    : "简单聊会 docker",
      "sub-titile" : "Docker是基于Go语言实现的云开源项目，诞生于2013年初，最初发起者是dotCloud公司",
      "sub-titile-lower" : "docker是基于go语言实现的云开源项目，诞生于2013年初，最初发起者是dotcloud公司",
      "categories" : "",
      "tags"     : "Docker, 容器, 服务部署, 慕课网手记",
      "url"      : "/zcblog/2019/04/10/docker/",
      "date"     : "2019-04-10 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的<a href=\"https://www.imooc.com/u/4024769\">慕课网手记</a>：<a href=\"https://www.imooc.com/article/286100\">简单聊会 Docker</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p>最近在工作中一直在忙基础设施构建，发现在选型的时候，大家心里基本上都有一个自己的成熟架构。而在服务部署这块发现公司的同事们都大多数考虑Docker，在业余闲聊了后，发现他们对Docker只是在停留在使用，对一些Docker的基本知识还是不了解，并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？今天就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发并用其部署微服务。</p>\n\n<h3 id=\"docker简介\">Docker简介</h3>\n\n<p>Docker是基于Go语言实现的云开源项目，诞生于2013年初，最初发起者是dotCloud公司。Docker自开源后受到广泛的关注和讨论，目前已有多个相关项目，逐渐形成了围绕Docker的生态体系。dotCloud公司后来也改名为Docker Inc，专注于Docker相关技术和产品的开发。Docker 一直广受瞩目，被认为可能会改变软件行业。那么什么是Docker呢？我查阅了网上的一些相关资料，现用一段话总结了一下。</p>\n\n<p>Docker是一个开源的<strong>容器引擎</strong>，它可以帮助我们更快地交付应用。Docker可将应用程序和基础设施层隔离，并且能将基础设施当作程序一样进行管理。使用Docker，可更快地打包、测试以及部署应用程序，并可<strong>减少从编写到部署运行代码的周期</strong>。</p>\n\n<p>对一个事物有了一定了解后，我们的继续学习Docker官方的给出文档和源码。（这个今天不在此文章扩展，不然聊不完。）</p>\n\n<p>TIPS</p>\n\n<p>(1) Docker官方网站：<a href=\"https://www.docker.com/\">https://www.docker.com/</a></p>\n\n<p>(2) Docker GitHub：<a href=\"https://github.com/docker/docker\">https://github.com/docker/docker</a></p>\n\n<h3 id=\"docker快速入门\">Docker快速入门</h3>\n\n<p>执行如下命令，即可启动一个Nginx容器</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>docker run -d -p 91:80 nginx\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"docker架构\">Docker架构</h3>\n\n<p>我们来看一下来自Docker官方文档的架构图，如图所示。</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564878879211-edfd40de-4d37-42e1-a707-320dabaafd1f.png\" alt=\"Docker应用场景\" /></p>\n\n<p>我们来讲解上图中包含的组件。</p>\n\n<h4 id=\"1-docker-daemondocker守护进程\">(1) Docker daemon（Docker守护进程）</h4>\n\n<p>Docker daemon是一个运行在宿主机（DOCKER_HOST）的后台进程。我们可通过Docker客户端与之通信。</p>\n\n<h4 id=\"2-clientdocker客户端\">(2) Client（Docker客户端）</h4>\n\n<p>Docker客户端是Docker的用户界面，它可以接受用户命令和配置标识，并与Docker daemon通信。图中，docker build等都是Docker的相关命令。</p>\n\n<h4 id=\"3-imagesdocker镜像\">(3) Images（Docker镜像）</h4>\n\n<p>Docker镜像是一个只读模板，它包含创建Docker容器的说明。它和系统安装光盘有点像——我们使用系统安装光盘安装系统，同理，我们使用Docker镜像运行Docker镜像中的程序。</p>\n\n<h4 id=\"4-container容器\">(4) Container（容器）</h4>\n\n<p>容器是镜像的可运行实例。镜像和容器的关系有点类似于面向对象中，类和对象的关系。我们可通过Docker API或者CLI命令来启停、移动、删除容器。</p>\n\n<h4 id=\"5-registry\">(5) Registry</h4>\n\n<p>Docker Registry是一个集中存储与分发镜像的服务。我们构建完Docker镜像后，就可在当前宿主机上运行。但如果想要在其他机器上运行这个镜像，我们就需要手动拷贝。此时，我们可借助Docker Registry来避免镜像的手动拷贝。</p>\n\n<p>一个Docker Registry可包含多个Docker仓库；每个仓库可包含多个镜像标签；每个标签对应一个Docker镜像。这跟Maven的仓库有点类似，如果把Docker Registry比作Maven仓库的话，那么Docker仓库就可理解为某jar包的路径，而镜像标签则可理解为jar包的版本号。</p>\n\n<p>Docker Registry可分为公有Docker Registry和私有Docker Registry。最常用的Docker Registry莫过于官方的Docker Hub，这也是默认的Docker Registry。Docker Hub上存放着大量优秀的镜像，我们可使用Docker命令下载并使用。</p>\n\n<h3 id=\"docker应用场景\">Docker应用场景</h3>\n\n<p>常用的8个Docker的真实使用场景，分别是简化配置、代码流水线管理、提高开发效率、隔离应用、整合服务器、调试能力、多租户环境、快速部署。我们一直在谈Docker，Docker怎么使用，在怎么样的场合下使用？</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564878877952-6c167f5c-4d89-4857-8a1a-65047d83111e.png\" alt=\"Docker架构图\" /></p>\n\n<p>首先你在享有Docker带来的虚拟化能力的时候无需担心它带来的额外开销。其次，相比于虚拟机，你可以在同一台机器上创建更多数量的容器。</p>\n\n<p>Docker的另外一个优点是容器的启动与停止都能在几秒中内完成。Docker公司的创始人 Solomon Hykes曾经介绍过Docker在单纯的LXC之上做了哪些事情，你可以去看看。</p>\n\n<p>下面是我总结的一些Docker的使用场景，它为你展示了如何借助Docker的优势，在低开销的情况下，打造一个一致性的环境。</p>\n\n<h4 id=\"简化配置\">简化配置</h4>\n\n<p>这是Docker公司宣传的Docker的主要使用场景。虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），Docker在降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个Docker的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。</p>\n\n<h4 id=\"代码流水线code-pipeline管理\">代码流水线（Code Pipeline）管理</h4>\n\n<p>前一个场景对于管理代码的流水线起到了很大的帮助。代码从开发者的机器到最终在生产环境上的部署，需要经过很多的中间环境。而每一个中间环境都有自己微小的差别，Docker给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少。</p>\n\n<h4 id=\"提高开发效率\">提高开发效率</h4>\n\n<p>这就带来了一些额外的好处：Docker能提升开发者的开发效率。如果你想看一个详细一点的例子，可以参考Aater在DevOpsDays Austin 2014 大会或者是DockerCon上的演讲。</p>\n\n<p>不同的开发环境中，我们都想把两件事做好。一是我们想让开发环境尽量贴近生产环境，二是我们想快速搭建开发环境。</p>\n\n<p>理想状态中，要达到第一个目标，我们需要将每一个服务都跑在独立的虚拟机中以便监控生产环境中服务的运行状态。然而，我们却不想每次都需要网络连接，每次重新编译的时候远程连接上去特别麻烦。这就是Docker做的特别好的地方，开发环境的机器通常内存比较小，之前使用虚拟的时候，我们经常需要为开发环境的机器加内存，而现在Docker可以轻易的让几十个服务在Docker中跑起来。</p>\n\n<h4 id=\"隔离应用\">隔离应用</h4>\n\n<p>有很多种原因会让你选择在一个机器上运行不同的应用，比如之前提到的提高开发效率的场景等。</p>\n\n<p>我们经常需要考虑两点，一是因为要降低成本而进行服务器整合，二是将一个整体式的应用拆分成松耦合的单个服务（译者注：微服务架构）。如果你想了解为什么松耦合的应用这么重要，请参考Steve Yege的这篇论文，文中将Google和亚马逊做了比较。</p>\n\n<h4 id=\"整合服务器\">整合服务器</h4>\n\n<p>正如通过虚拟机来整合多个应用，Docker隔离应用的能力使得Docker可以整合多个服务器以降低成本。由于没有多个操作系统的内存占用，以及能在多个实例之间共享没有使用的内存，Docker可以比虚拟机提供更好的服务器整合解决方案。</p>\n\n<h4 id=\"调试能力\">调试能力</h4>\n\n<p>Docker提供了很多的工具，这些工具不一定只是针对容器，但是却适用于容器。它们提供了很多的功能，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试Bug。你可以在《Docker拯救世界》的文章中找到这一点的例证。</p>\n\n<h4 id=\"多租户环境\">多租户环境</h4>\n\n<p>另外一个Docker有意思的使用场景是在多租户的应用中，它可以避免关键应用的重写。我们一个特别的关于这个场景的例子是为IoT（译者注：物联网）的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。</p>\n\n<p>使用Docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于Docker环境的启动速度和其高效的diff命令。</p>\n\n<p>你可以在这里了解关于此场景的更多信息。</p>\n\n<h4 id=\"快速部署\">快速部署</h4>\n\n<p>在虚拟机之前，引入新的硬件资源需要消耗几天的时间。虚拟化技术（Virtualization）将这个时间缩短到了分钟级别。而Docker通过为进程仅仅创建一个容器而无需启动一个操作系统，再次将这个过程缩短到了秒级。这正是Google和Facebook都看重的特性。</p>\n\n<p>你可以在数据中心创建销毁资源而无需担心重新启动带来的开销。通常数据中心的资源利用率只有30%，通过使用Docker并进行有效的资源分配可以提高资源的利用率。</p>\n",
      "desc"     : "  本文来自于我的慕课网手记：简单聊会 Docker，转载请保留链接 ;)最近在工作中一直在忙基础设施构建，发现在选型的时候，大家心里基本上都有一个自己的成熟架构。而在服务部署这块发现公司的同事们都大多数考虑Docker，在业余闲聊了后，发现他们对Docker只是在停留在使用，对一些Docker的基本知识还是不了解，并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？今天就来详..."
} ,
  
  
  
    {
      "title"    : "开篇-分布式系统中的那些开源软件",
      "title-lower"    : "开篇-分布式系统中的那些开源软件",
      "sub-titile" : "讨论一个大型话题：分布式系统所能采用的主流软件",
      "sub-titile-lower" : "讨论一个大型话题：分布式系统所能采用的主流软件",
      "categories" : "",
      "tags"     : "分布式, Java, 慕课网手记",
      "url"      : "/zcblog/2019/04/09/software-distributed-system/",
      "date"     : "2019-04-09 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的<a href=\"https://www.imooc.com/u/4024769\">慕课网手记</a>：<a href=\"https://www.imooc.com/article/284696\">开篇-分布式系统中的那些开源软件</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1566474998506-b5c65f28-53a2-48ea-a49d-e912cdc49075.png\" alt=\"微服务框架历史演进\" /></p>\n\n<p>我们来讨论一个大型话题，把分布式系统所能采用的开源或者商业软件，方方面面都来讨论一下。这里做个记录，也算是我加入慕课网认证作者的一个里程碑，今后的文章也是会和这些软件相关的，毕竟单体的项目已经不复返，分布式的项目已经成为了主流。不管你看到这个大纲可能有的熟悉，还是有的不了解，没关系，我们今后会一个个掰开的学习掌握它们，（熟悉的就要更加熟悉，不会的就要学会并掌握它。）当然，这篇文章不能代表所有分布式所用到的技术，也欢迎各位在后面评论中留言补充。</p>\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-c370436f1ddce659b60d35595d4445c7_hd.jpg\" alt=\"微服务框架的常见特性\" /></p>\n\n<p><strong>基础框架</strong></p>\n\n<p>Spring Cloud，Dubbo，Motan，Sofa</p>\n\n<p><strong>分布式注册中心</strong></p>\n\n<p>Eureka（Netflix），Consul，Nacos，Etcd，Zookeeper</p>\n\n<p><strong>分布式监控中心</strong></p>\n\n<p>CAT，SBA，Prometheus，Grafana</p>\n\n<p><strong>分布式配置中心</strong></p>\n\n<p>Apollo，Nacos，DisConf，Spring Cloud Config</p>\n\n<p><strong>分布式网关</strong></p>\n\n<p>F5，Ngnix+（打通Consul），ESB，Kong，zuul,  gateway</p>\n\n<p><strong>分布式事务</strong></p>\n\n<p>Seata，dts，tcc-transaction，hmily，ByteTCC，myth，EasyTransaction，tx-lcn</p>\n\n<p><strong>分布式日志系统</strong></p>\n\n<p>ELK(Kibana，ElasticSearch，Logstash)，Kafka，Flume，Splunk</p>\n\n<p><strong>分布式定时任务调度和管理</strong></p>\n\n<p>Elastic Job，XXL Job</p>\n\n<p><strong>分布式限流熔断降级</strong></p>\n\n<p>Sentinel，Redis，Guava</p>\n\n<p><strong>分布式服务权限控制系统</strong></p>\n\n<p>OAuth，JWT，单点登录，Hystrix，shiro</p>\n\n<p><strong>分布式监控中心</strong></p>\n\n<p>CAT，SBA，Prometheus，Grafana，Graphite，Statsd，Solarwinds，Zabbix，Centreon，appDynamics，new relic，Kaeger</p>\n\n<p><strong>分布式服务和系统诊断</strong></p>\n\n<p>Arthas</p>\n\n<p><strong>分布式调用链</strong></p>\n\n<p>CAT，SkyWalking+RocketBolt，Zipkin，DynaTrace</p>\n\n<p><strong>分布式流程和服务编排</strong></p>\n\n<p>Coroutine，Akka，Kilim，Flowable，Axon</p>\n\n<p><strong>分布式锁</strong></p>\n\n<p>Redisson，Redis，Zookeeper</p>\n\n<p><strong>分布式压测平台</strong></p>\n\n<p>JMeter，LoadRunner</p>\n\n<p><strong>分布式全局主键系统</strong></p>\n\n<p>Redis，Zookeeper，Twitter Snowflake</p>\n\n<p><strong>分布式自动化测试</strong></p>\n\n<p>Postman、Jenkins</p>\n\n<p><strong>分布式自动化API文档</strong></p>\n\n<p>Swagger</p>\n\n<p><strong>分布式分库分表中间件</strong></p>\n\n<p><strong>多数据源</strong></p>\n\n<p>Sharding Sphere，MyCat</p>\n\n<p><strong>分布式消息队列中间件</strong></p>\n\n<p>RocketMQ，Kafka，ActiveMQ，Tibco</p>\n\n<p><strong>分布式缓存</strong></p>\n\n<p>Redis、MongoDB</p>\n\n<p><strong>分布式数据库分析诊断系统</strong></p>\n\n<p>慢SQL，听云</p>\n\n<p><strong>分布式自动化数据库脚本升级</strong></p>\n\n<p>Flyway</p>\n\n<p><strong>异构系统</strong></p>\n\n<p>Spring Cloud Sidecar，Service Mesh，istio，Sofa mesh</p>\n\n<p><strong>异构网关</strong></p>\n\n<p><strong>运维发布</strong></p>\n\n<p>DevOps，CICD和Pipeline，容器(Docker)化，K8S，Jenkins，蓝鲸，TriAquae，Choerodon（猪齿鱼）</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1566474998581-67fb061e-bec1-43bb-9337-09bac790c75b.png\" alt=\"Spring cloud 中间件生态\" /></p>\n",
      "desc"     : "  本文来自于我的慕课网手记：开篇-分布式系统中的那些开源软件，转载请保留链接 ;)我们来讨论一个大型话题，把分布式系统所能采用的开源或者商业软件，方方面面都来讨论一下。这里做个记录，也算是我加入慕课网认证作者的一个里程碑，今后的文章也是会和这些软件相关的，毕竟单体的项目已经不复返，分布式的项目已经成为了主流。不管你看到这个大纲可能有的熟悉，还是有的不了解，没关系，我们今后会一个个掰开的学习..."
} ,
  
  
  
    {
      "title"    : "聊聊 Nginx 的反向代理",
      "title-lower"    : "聊聊 nginx 的反向代理",
      "sub-titile" : " Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器 ",
      "sub-titile-lower" : " nginx是一款自由的、开源的、高性能的http服务器和反向代理服务器 ",
      "categories" : "",
      "tags"     : "Nginx, 分布式, 反向代理, 负载均衡, 慕课网手记",
      "url"      : "/zcblog/2019/04/03/nginx/",
      "date"     : "2019-04-03 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的<a href=\"https://www.imooc.com/u/4024769\">慕课网手记</a>：<a href=\"https://www.imooc.com/article/285351\">聊聊 Nginx 的反向代理</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<h2 id=\"背景\">背景</h2>\n\n<p>最近在优化服务基础设施这块，正好有时间写一下Nginx的体会。相信大家都听说过反向代理，一提到反向代理一定会想到Nginx。什么你没听过Nginx？那么你一定听说过Apache吧！Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。Apache的发展时期很长，而且是毫无争议的世界第一大服务器。它有着很多优点：稳定、开源、跨平台等等。它出现的时间太长了，它兴起的年代，互联网产业远远比不上现在。所以它被设计为一个重量级的。它不支持高并发的服务器。在Apache上运行数以万计的并发访问，会导致服务器消耗大量内存。操作系统对其进行进程或线程间的切换也消耗了大量的CPU资源，导致HTTP请求的平均响应速度降低。所以这些都决定了Apache不可能成为高性能WEB服务器，轻量级高并发服务器Nginx就应运而生了。</p>\n\n<h3 id=\"什么是nginx\">什么是Nginx</h3>\n\n<p>俄罗斯的工程师Igor Sysoev，他在为Rambler Media工作期间，使用C语言开发了Nginx。Nginx作为WEB服务器一直为Rambler Media提供出色而又稳定的服务。然后呢，Igor Sysoev将Nginx代码开源，并且赋予自由软件许可证。</p>\n\n<p>由于：</p>\n<ul>\n  <li>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器（这是个开源的时代啊~）</li>\n  <li>Nginx是一个跨平台服务器，可以运行在Linux,Windows,FreeBSD,Solaris, AIX,Mac OS等操作系统上。</li>\n  <li>可以作为反向代理进行负载均衡的实现，带来的极大的稳定性。</li>\n</ul>\n\n<p>Nginx这样做的目的主要是将数据的承载量分摊到多个服务器上进行执行，这只是在服务基础设施上提高性能的优化手段之一。从下面图就可以看出：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564804030380-3132fb67-da63-45e3-806c-31e9f36409bf.png\" alt=\"某项目架构图\" /></p>\n\n<h3 id=\"什么是反向代理\">什么是反向代理？</h3>\n\n<p>看了网上很多篇文章，下面这段话是我个人觉得介绍的最清楚的。\n反向代理（Reverse Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器；并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。\n所以反向代理服务器是引用在服务端。决定哪台服务器提供服务。\n那么我就模拟了一个基本的反向代理和负载均衡配置实现，下面是我的操作步骤：</p>\n\n<h4 id=\"反向代理的模拟\">反向代理的模拟</h4>\n\n<p>首先创建多个 tomcat 服务器，我这里创建了三个：\n<img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564804136025-e78d443b-000f-4f79-b3a5-6d6fc7db2375.png\" alt=\"创建多个 tomcat 服务器\" /></p>\n\n<p>然后修改每个 tomcat 运行在不同的端口号上，每个 server.xml配置文件需要修改三处端口：\n<img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564804176023-6d0fb3a1-af7e-4215-825d-b7c39a43976a.png\" alt=\"修改端口号\" /></p>\n\n<p>分别在 8080，8081，8082 端口配置 8006，8081，8010 端口，分别进行启动测试，但是注意防火墙配置问题。测试结果如下：\n<img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564804219061-a6a2ae92-c383-4986-880a-12b8ded7cbcf.png\" alt=\"测试结果\" /></p>\n\n<p>接着配置 nginx 的配置文件，进行反向代理：\n<img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564804259003-13052507-1418-4f80-988e-aa6f0b510e1e.png\" alt=\"配置 nginx 参数\" /></p>\n\n<p>最后不断访问刚配置的 test.tomcats.com 域名，发现三台 tomcat 成功运行的页面都有出现，比例大致 1：1：1：\n<img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564804263247-6aca979b-e75d-4a4a-abb0-989aaf497308.png\" alt=\"配置完后运行结果\" /></p>\n\n<p>恭喜你，配置成功了！</p>\n\n<h4 id=\"配置负载均衡\">配置负载均衡</h4>\n\n<p>其实很简单，就是在刚刚配置的 nginx 文件中 的 upstream tomcats 中的 server 后面添加一个 weight, 即可代表权重。权重越高，分派请求的数量就越多。默认权重是 1。\n<img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564804266343-33e4188b-920a-4f6f-820c-112ea4df2937.png\" alt=\"配置负载均衡\" /></p>\n",
      "desc"     : "  本文来自于我的慕课网手记：聊聊 Nginx 的反向代理，转载请保留链接 ;)背景最近在优化服务基础设施这块，正好有时间写一下Nginx的体会。相信大家都听说过反向代理，一提到反向代理一定会想到Nginx。什么你没听过Nginx？那么你一定听说过Apache吧！Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最..."
} ,
  
  
  
    {
      "title"    : "Git的奇技淫巧",
      "title-lower"    : "git的奇技淫巧",
      "sub-titile" : " Git是一个 分布式版本管理工具 ",
      "sub-titile-lower" : " git是一个 分布式版本管理工具 ",
      "categories" : "",
      "tags"     : "Git, 版本管理工具",
      "url"      : "/zcblog/2019/04/02/git/",
      "date"     : "2019-04-02 00:00:00 +0800",
      "content": "<blockquote>\n  <p>Git常用命令集合，Fork于<a href=\"https://github.com/git-tips/tips\">tips</a>项目</p>\n</blockquote>\n\n<p>Git是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p>\n\n<p>下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 “页面内查找” 的方式进行快速查询：<code class=\"highlighter-rouge\">Ctrl/Command+f</code>。</p>\n\n<h2 id=\"开卷必读\">开卷必读</h2>\n<p><em>如果之前未使用过 Git，可以学习 <a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\">Git 小白教程</a>入门</em></p>\n\n<ol>\n  <li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li>\n  <li>所有的命令都在<code class=\"highlighter-rouge\">git version 2.7.4 (Apple Git-66)</code>下测试通过</li>\n  <li>统一概念：\n    <ul>\n      <li>工作区：改动（增删文件和内容）</li>\n      <li>暂存区：输入命令：<code class=\"highlighter-rouge\">git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li>\n      <li>本地仓库(简称：本地)：输入命令：<code class=\"highlighter-rouge\">git commit 此次修改的描述</code>，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。</li>\n      <li>远程仓库(简称：远程)：输入命令：<code class=\"highlighter-rouge\">git push 远程仓库</code>，此次改动就放到了 ‘远程仓库’（GitHub 等)</li>\n      <li>commit-id：输出命令：<code class=\"highlighter-rouge\">git log</code>，最上面那行 <code class=\"highlighter-rouge\">commit xxxxxx</code>，后面的字符串就是 commit-id</li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"目录\">目录</h2>\n<ul>\n  <li><a href=\"#展示帮助信息\">展示帮助信息</a></li>\n  <li><a href=\"#回到远程仓库的状态\">回到远程仓库的状态</a></li>\n  <li><a href=\"#重设第一个commit\">重设第一个commit</a></li>\n  <li><a href=\"#展示工作区和暂存区的不同\">展示工作区和暂存区的不同</a></li>\n  <li><a href=\"#展示暂存区和最近版本的不同\">展示暂存区和最近版本的不同</a></li>\n  <li><a href=\"#展示暂存区工作区和最近版本的不同\">展示暂存区、工作区和最近版本的不同</a></li>\n  <li><a href=\"#快速切换分支上一个分支\">快速切换分支上一个分支</a></li>\n  <li><a href=\"#删除已经合并到-master-的分支\">删除已经合并到 master 的分支</a></li>\n  <li><a href=\"#展示本地分支关联远程仓库的情况\">展示本地分支关联远程仓库的情况</a></li>\n  <li><a href=\"#关联远程分支\">关联远程分支</a></li>\n  <li><a href=\"#列出所有远程分支\">列出所有远程分支</a></li>\n  <li><a href=\"#列出本地和远程分支\">列出本地和远程分支</a></li>\n  <li><a href=\"#创建并切换到本地分支\">创建并切换到本地分支</a></li>\n  <li><a href=\"#从远程分支中创建并切换到本地分支\">从远程分支中创建并切换到本地分支</a></li>\n  <li><a href=\"#删除本地分支\">删除本地分支</a></li>\n  <li><a href=\"#删除远程分支\">删除远程分支</a></li>\n  <li><a href=\"#重命名本地分支\">重命名本地分支</a></li>\n  <li><a href=\"#查看标签\">查看标签</a></li>\n  <li><a href=\"#查看标签详细信息\">查看标签详细信息</a></li>\n  <li><a href=\"#本地创建标签\">本地创建标签</a></li>\n  <li><a href=\"#推送标签到远程仓库\">推送标签到远程仓库</a></li>\n  <li><a href=\"#删除本地标签\">删除本地标签</a></li>\n  <li><a href=\"#删除远程标签\">删除远程标签</a></li>\n  <li><a href=\"#切回到某个标签\">切回到某个标签</a></li>\n  <li><a href=\"#放弃工作区的修改\">放弃工作区的修改</a></li>\n  <li><a href=\"#恢复删除的文件\">恢复删除的文件</a></li>\n  <li><a href=\"#以新增一个-commit-的方式还原某一个-commit-的修改\">以新增一个 commit 的方式还原某一个 commit 的修改</a></li>\n  <li><a href=\"#回到某个-commit-的状态并删除后面的-commit\">回到某个 commit 的状态，并删除后面的 commit</a></li>\n  <li><a href=\"#修改上一个-commit-的描述\">修改上一个 commit 的描述</a></li>\n  <li><a href=\"#查看-commit-历史\">查看 commit 历史</a></li>\n  <li><a href=\"#显示本地更新过-head-的-git-命令记录\">显示本地更新过 HEAD 的 git 命令记录</a></li>\n  <li><a href=\"#修改作者名\">修改作者名</a></li>\n  <li><a href=\"#修改远程仓库的-url\">修改远程仓库的 url</a></li>\n  <li><a href=\"#增加远程仓库\">增加远程仓库</a></li>\n  <li><a href=\"#列出所有远程仓库\">列出所有远程仓库</a></li>\n  <li><a href=\"#查看两个星期内的改动\">查看两个星期内的改动</a></li>\n  <li><a href=\"#把-A-分支的某一个-commit-放到-B-分支上\">把 A 分支的某一个 commit，放到 B 分支上</a></li>\n  <li><a href=\"#给-git-命令起别名\">给 git 命令起别名</a></li>\n  <li><a href=\"#存储当前的修改但不用提交-commit\">存储当前的修改，但不用提交 commit</a></li>\n  <li><a href=\"#保存当前状态包括-untracked-的文件\">保存当前状态，包括 untracked 的文件</a></li>\n  <li><a href=\"#展示所有-stashes\">展示所有 stashes</a></li>\n  <li><a href=\"#回到某个-stash-的状态\">回到某个 stash 的状态</a></li>\n  <li><a href=\"#回到最后一个-stash-的状态并删除这个-stash\">回到最后一个 stash 的状态，并删除这个 stash</a></li>\n  <li><a href=\"#删除所有的-stash\">删除所有的 stash</a></li>\n  <li><a href=\"#从-stash-中拿出某个文件的修改\">从 stash 中拿出某个文件的修改</a></li>\n  <li><a href=\"#展示所有-tracked-的文件\">展示所有 tracked 的文件</a></li>\n  <li><a href=\"#展示所有-untracked-的文件\">展示所有 untracked 的文件</a></li>\n  <li><a href=\"#展示所有忽略的文件\">展示所有忽略的文件</a></li>\n  <li><a href=\"#强制删除-untracked-的文件\">强制删除 untracked 的文件</a></li>\n  <li><a href=\"#强制删除-untracked-的目录\">强制删除 untracked 的目录</a></li>\n  <li><a href=\"#展示简化的-commit-历史\">展示简化的 commit 历史</a></li>\n  <li><a href=\"#查看某段代码是谁写的\">查看某段代码是谁写的</a></li>\n  <li><a href=\"#把某一个分支到导出成一个文件\">把某一个分支到导出成一个文件</a></li>\n  <li><a href=\"#从包中导入分支\">从包中导入分支</a></li>\n  <li><a href=\"#执行-rebase-之前自动-stash\">执行 rebase 之前自动 stash</a></li>\n  <li><a href=\"#从远程仓库根据-ID-拉下某一状态-到本地分支\">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li>\n  <li><a href=\"#详细展示一行中的修改\">详细展示一行中的修改</a></li>\n  <li><a href=\"#清除-gitignore-文件中记录的文件\">清除 <code class=\"highlighter-rouge\">.gitignore</code> 文件中记录的文件</a></li>\n  <li><a href=\"#展示所有-alias-和-configs\">展示所有 alias 和 configs</a></li>\n  <li><a href=\"#展示忽略的文件\">展示忽略的文件</a></li>\n  <li><a href=\"#commit-历史中显示-Branch1-有的但是-Branch2-没有-commit\">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li>\n  <li><a href=\"#在-commit-log-中显示-GPG-签名\">在 commit log 中显示 GPG 签名</a></li>\n  <li><a href=\"#删除全局设置\">删除全局设置</a></li>\n  <li><a href=\"#新建并切换到新分支上同时这个分支没有任何-commit\">新建并切换到新分支上，同时这个分支没有任何 commit</a></li>\n  <li><a href=\"#展示任意分支某一文件的内容\">展示任意分支某一文件的内容</a></li>\n  <li><a href=\"#clone-下来指定的单一分支\">clone 下来指定的单一分支</a></li>\n  <li><a href=\"#忽略某个文件的改动\">忽略某个文件的改动</a></li>\n  <li><a href=\"#忽略文件的权限变化\">忽略文件的权限变化</a></li>\n  <li><a href=\"#以最后提交的顺序列出所有-Git-分支\">以最后提交的顺序列出所有 Git 分支</a></li>\n  <li><a href=\"#在-commit-log-中查找相关内容\">在 commit log 中查找相关内容</a></li>\n  <li><a href=\"#把暂存区的指定-file-放到工作区中\">把暂存区的指定 file 放到工作区中</a></li>\n  <li><a href=\"#强制推送\">强制推送</a></li>\n  <li><a href=\"#一图详解\">一图详解</a></li>\n</ul>\n\n<h2 id=\"展示帮助信息\">展示帮助信息</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git <span class=\"nb\">help</span> <span class=\"nt\">-g</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>The command output as below:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre>The common Git guides are:\n   attributes          Defining attributes per path\n   cli                 Git command-line interface and conventions\n   core-tutorial       A Git core tutorial for developers\n   cvs-migration       Git for CVS users\n   diffcore            Tweaking diff output\n   everyday            A useful minimum set of commands for Everyday Git\n   glossary            A Git Glossary\n   hooks               Hooks used by Git\n   ignore              Specifies intentionally untracked files to ignore\n   modules             Defining submodule properties\n   namespaces          Git namespaces\n   repository-layout    Git Repository Layout\n   revisions           Specifying revisions and ranges for Git\n   tutorial            A tutorial introduction to Git\n   tutorial-2          A tutorial introduction to Git: part two\n   workflows           An overview of recommended workflows with Git\n\n'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help &lt;command&gt;' or 'git help &lt;concept&gt;' to read about a specific subcommand or concept.\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"回到远程仓库的状态\">回到远程仓库的状态</h2>\n\n<p>抛弃本地所有的修改，回到远程仓库的状态。</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git fetch <span class=\"nt\">--all</span> <span class=\"o\">&amp;&amp;</span> git reset <span class=\"nt\">--hard</span> origin/master\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"重设第一个-commit\">重设第一个 commit</h2>\n\n<p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git update-ref <span class=\"nt\">-d</span> HEAD\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示工作区和暂存区的不同\">展示工作区和暂存区的不同</h2>\n\n<p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git diff\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>还可以展示本地仓库中任意两个 commit 之间的文件变动：</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git diff &lt;commit-id&gt; &lt;commit-id&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示暂存区和最近版本的不同\">展示暂存区和最近版本的不同</h2>\n\n<p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git diff <span class=\"nt\">--cached</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示暂存区工作区和最近版本的不同\">展示暂存区、工作区和最近版本的不同</h2>\n\n<p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git diff HEAD\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"快速切换分支上一个分支\">快速切换分支上一个分支</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git checkout -\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"删除已经合并到-master-的分支\">删除已经合并到 master 的分支</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git branch <span class=\"nt\">--merged</span> master | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"s1\">'^\\*\\|  master'</span> | xargs <span class=\"nt\">-n</span> 1 git branch <span class=\"nt\">-d</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示本地分支关联远程仓库的情况\">展示本地分支关联远程仓库的情况</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git branch <span class=\"nt\">-vv</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"关联远程分支\">关联远程分支</h2>\n\n<p>关联之后，<code class=\"highlighter-rouge\">git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code class=\"highlighter-rouge\">git push</code>，不需要指定远程仓库了。</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git branch <span class=\"nt\">-u</span> origin/mybranch\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>或者在 push 时加上 <code class=\"highlighter-rouge\">-u</code> 参数</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git push origin/mybranch <span class=\"nt\">-u</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"列出所有远程分支\">列出所有远程分支</h2>\n\n<p>-r 参数相当于：remote</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git branch <span class=\"nt\">-r</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"列出本地和远程分支\">列出本地和远程分支</h2>\n\n<p>-a 参数相当于：all</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git branch <span class=\"nt\">-a</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"创建并切换到本地分支\">创建并切换到本地分支</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git checkout <span class=\"nt\">-b</span> &lt;branch-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"从远程分支中创建并切换到本地分支\">从远程分支中创建并切换到本地分支</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git checkout <span class=\"nt\">-b</span> &lt;branch-name&gt; origin/&lt;branch-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"删除本地分支\">删除本地分支</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git branch <span class=\"nt\">-d</span> &lt;local-branchname&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"删除远程分支\">删除远程分支</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git push origin <span class=\"nt\">--delete</span> &lt;remote-branchname&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>或者</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git push origin :&lt;remote-branchname&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"重命名本地分支\">重命名本地分支</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git branch <span class=\"nt\">-m</span> &lt;new-branch-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"查看标签\">查看标签</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git tag\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>展示当前分支的最近的 tag</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git describe <span class=\"nt\">--tags</span> <span class=\"nt\">--abbrev</span><span class=\"o\">=</span>0\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"查看标签详细信息\">查看标签详细信息</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git tag <span class=\"nt\">-ln</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"本地创建标签\">本地创建标签</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git tag &lt;version-number&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nv\">$ </span>git tag <span class=\"nt\">-a</span> &lt;version-number&gt; <span class=\"nt\">-m</span> <span class=\"s2\">\"v1.0 发布(描述)\"</span> &lt;commit-id&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"推送标签到远程仓库\">推送标签到远程仓库</h2>\n\n<p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git push origin &lt;local-version-number&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>一次性推送所有标签，同步到远程仓库：</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git push origin <span class=\"nt\">--tags</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"删除本地标签\">删除本地标签</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git tag <span class=\"nt\">-d</span> &lt;tag-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"删除远程标签\">删除远程标签</h2>\n\n<p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令：</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git push origin :refs/tags/&lt;tag-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"切回到某个标签\">切回到某个标签</h2>\n\n<p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git checkout <span class=\"nt\">-b</span> branch_name tag_name\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"放弃工作区的修改\">放弃工作区的修改</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git checkout &lt;file-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>放弃所有修改：</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git checkout <span class=\"nb\">.</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"恢复删除的文件\">恢复删除的文件</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre>git rev-list <span class=\"nt\">-n</span> 1 HEAD <span class=\"nt\">--</span> &lt;file_path&gt; <span class=\"c\">#得到 deleting_commit</span>\n\ngit checkout &lt;deleting_commit&gt;^ <span class=\"nt\">--</span> &lt;file_path&gt; <span class=\"c\">#回到删除文件 deleting_commit 之前的状态</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"以新增一个-commit-的方式还原某一个-commit-的修改\">以新增一个 commit 的方式还原某一个 commit 的修改</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git revert &lt;commit-id&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"回到某个-commit-的状态并删除后面的-commit\">回到某个 commit 的状态，并删除后面的 commit</h2>\n\n<p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre>git reset &lt;commit-id&gt;  <span class=\"c\">#默认就是-mixed参数。</span>\n\ngit reset –mixed HEAD^  <span class=\"c\">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span>\n\ngit reset –soft HEAD~3  <span class=\"c\">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span>\n\ngit reset –hard &lt;commit-id&gt;  <span class=\"c\">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"修改上一个-commit-的描述\">修改上一个 commit 的描述</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git commit <span class=\"nt\">--amend</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"查看-commit-历史\">查看 commit 历史</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git log\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"查看某段代码是谁写的\">查看某段代码是谁写的</h2>\n\n<p>blame 的意思为‘责怪’，你懂的。</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git blame &lt;file-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"显示本地更新过-head-的-git-命令记录\">显示本地更新过 HEAD 的 git 命令记录</h2>\n\n<p>每次更新了 HEAD 的 git 命令比如 commint、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。\n这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git reflog\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"修改作者名\">修改作者名</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git commit <span class=\"nt\">--amend</span> <span class=\"nt\">--author</span><span class=\"o\">=</span><span class=\"s1\">'Author Name &lt;email@address.com&gt;'</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"修改远程仓库的-url\">修改远程仓库的 url</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git remote set-url origin &lt;URL&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"增加远程仓库\">增加远程仓库</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git remote add origin &lt;remote-url&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"列出所有远程仓库\">列出所有远程仓库</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git remote\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"查看两个星期内的改动\">查看两个星期内的改动</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git whatchanged <span class=\"nt\">--since</span><span class=\"o\">=</span><span class=\"s1\">'2 weeks ago'</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"把-a-分支的某一个-commit放到-b-分支上\">把 A 分支的某一个 commit，放到 B 分支上</h2>\n\n<p>这个过程需要 <code class=\"highlighter-rouge\">cherry-pick</code> 命令，<a href=\"http://sg552.iteye.com/blog/1300713#bc2367928\">参考</a></p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git checkout &lt;branch-name&gt; <span class=\"o\">&amp;&amp;</span> git cherry-pick &lt;commit-id&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"给-git-命令起别名\">给 git 命令起别名</h2>\n\n<p>简化命令</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre>git config <span class=\"nt\">--global</span> alias.&lt;handle&gt; &lt;<span class=\"nb\">command</span><span class=\"o\">&gt;</span>\n\n比如：git status 改成 git st，这样可以简化命令\n\ngit config <span class=\"nt\">--global</span> alias.st status\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"存储当前的修改但不用提交-commit\">存储当前的修改，但不用提交 commit</h2>\n\n<p>详解可以参考<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000\">廖雪峰老师的 git 教程</a></p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git stash\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"保存当前状态包括-untracked-的文件\">保存当前状态，包括 untracked 的文件</h2>\n\n<p>untracked 文件：新建的文件</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git stash <span class=\"nt\">-u</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示所有-stashes\">展示所有 stashes</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git stash list\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"回到某个-stash-的状态\">回到某个 stash 的状态</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git stash apply &lt;stash@<span class=\"o\">{</span>n<span class=\"o\">}&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"回到最后一个-stash-的状态并删除这个-stash\">回到最后一个 stash 的状态，并删除这个 stash</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git stash pop\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"删除所有的-stash\">删除所有的 stash</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git stash clear\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"从-stash-中拿出某个文件的修改\">从 stash 中拿出某个文件的修改</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git checkout &lt;stash@<span class=\"o\">{</span>n<span class=\"o\">}&gt;</span> <span class=\"nt\">--</span> &lt;file-path&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示所有-tracked-的文件\">展示所有 tracked 的文件</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git ls-files <span class=\"nt\">-t</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示所有-untracked-的文件\">展示所有 untracked 的文件</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git ls-files <span class=\"nt\">--others</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示所有忽略的文件\">展示所有忽略的文件</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git ls-files <span class=\"nt\">--others</span> <span class=\"nt\">-i</span> <span class=\"nt\">--exclude-standard</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"强制删除-untracked-的文件\">强制删除 untracked 的文件</h2>\n\n<p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code class=\"highlighter-rouge\">clean</code> 命令，<strong>注意两点</strong>：</p>\n<ol>\n  <li>clean 后，删除的文件无法找回</li>\n  <li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li>\n</ol>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git clean &lt;file-name&gt; <span class=\"nt\">-f</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"强制删除-untracked-的目录\">强制删除 untracked 的目录</h2>\n\n<p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git clean &lt;directory-name&gt; <span class=\"nt\">-df</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示简化的-commit-历史\">展示简化的 commit 历史</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git log <span class=\"nt\">--pretty</span><span class=\"o\">=</span>oneline <span class=\"nt\">--graph</span> <span class=\"nt\">--decorate</span> <span class=\"nt\">--all</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"把某一个分支到导出成一个文件\">把某一个分支到导出成一个文件</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git bundle create &lt;file&gt; &lt;branch-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"从包中导入分支\">从包中导入分支</h2>\n\n<p>新建一个分支，分支内容就是上面 <code class=\"highlighter-rouge\">git bundle create</code> 命令导出的内容</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git clone repo.bundle &lt;repo-dir&gt; <span class=\"nt\">-b</span> &lt;branch-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"执行-rebase-之前自动-stash\">执行 rebase 之前自动 stash</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git rebase <span class=\"nt\">--autostash</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"从远程仓库根据-id拉下某一状态到本地分支\">从远程仓库根据 ID，拉下某一状态，到本地分支</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git fetch origin pull/&lt;<span class=\"nb\">id</span><span class=\"o\">&gt;</span>/head:&lt;branch-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"详细展示一行中的修改\">详细展示一行中的修改</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git diff <span class=\"nt\">--word-diff</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"清除-gitignore-文件中记录的文件\">清除 gitignore 文件中记录的文件</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git clean <span class=\"nt\">-X</span> <span class=\"nt\">-f</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示所有-alias-和-configs\">展示所有 alias 和 configs</h2>\n\n<p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre>git config <span class=\"nt\">--local</span> <span class=\"nt\">--list</span> <span class=\"o\">(</span>当前目录<span class=\"o\">)</span>\ngit config <span class=\"nt\">--global</span> <span class=\"nt\">--list</span> <span class=\"o\">(</span>全局<span class=\"o\">)</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示忽略的文件\">展示忽略的文件</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git status <span class=\"nt\">--ignored</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"commit-历史中显示-branch1-有的但是-branch2-没有-commit\">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git log Branch1 ^Branch2\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"在-commit-log-中显示-gpg-签名\">在 commit log 中显示 GPG 签名</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git log <span class=\"nt\">--show-signature</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"删除全局设置\">删除全局设置</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git config <span class=\"nt\">--global</span> <span class=\"nt\">--unset</span> &lt;entry-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"新建并切换到新分支上同时这个分支没有任何-commit\">新建并切换到新分支上，同时这个分支没有任何 commit</h2>\n\n<p>相当于保存修改，但是重写 commit 历史</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git checkout <span class=\"nt\">--orphan</span> &lt;branch-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"展示任意分支某一文件的内容\">展示任意分支某一文件的内容</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git show &lt;branch-name&gt;:&lt;file-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"clone-下来指定的单一分支\">clone 下来指定的单一分支</h2>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git clone <span class=\"nt\">-b</span> &lt;branch-name&gt; <span class=\"nt\">--single-branch</span> https://github.com/user/repo.git\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"忽略某个文件的改动\">忽略某个文件的改动</h2>\n\n<p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git update-index <span class=\"nt\">--assume-unchanged</span> path/to/file\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>恢复 track 指定文件的改动</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git update-index <span class=\"nt\">--no-assume-unchanged</span> path/to/file\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"忽略文件的权限变化\">忽略文件的权限变化</h2>\n\n<p>不再将文件的权限变化视作改动</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git config core.fileMode <span class=\"nb\">false</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"以最后提交的顺序列出所有-git-分支\">以最后提交的顺序列出所有 Git 分支</h2>\n\n<p>最新的放在最上面</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git <span class=\"k\">for</span><span class=\"nt\">-each-ref</span> <span class=\"nt\">--sort</span><span class=\"o\">=</span><span class=\"nt\">-committerdate</span> <span class=\"nt\">--format</span><span class=\"o\">=</span><span class=\"s1\">'%(refname:short)'</span> refs/heads/\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"在-commit-log-中查找相关内容\">在 commit log 中查找相关内容</h2>\n\n<p>通过 grep 查找，given-text：所需要查找的字段</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git log <span class=\"nt\">--all</span> <span class=\"nt\">--grep</span><span class=\"o\">=</span><span class=\"s1\">'&lt;given-text&gt;'</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"把暂存区的指定-file-放到工作区中\">把暂存区的指定 file 放到工作区中</h2>\n\n<p>不添加参数，默认是 <code class=\"highlighter-rouge\">-mixed</code></p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git reset &lt;file-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"强制推送\">强制推送</h2>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>git push <span class=\"nt\">-f</span> &lt;remote-name&gt; &lt;branch-name&gt;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"一图详解\">一图详解</h2>\n\n<p><img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2019.04/02/git.png\" alt=\"git.png\" /></p>\n\n<p><strong><a href=\"#目录\">⬆ 返回顶部</a></strong></p>\n",
      "desc"     : "  Git常用命令集合，Fork于tips项目Git是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。下面的内容就是列举了常用的 Git 命令和一些小技巧，..."
} ,
  
  
  
    {
      "title"    : "Java 大厂面试",
      "title-lower"    : "java 大厂面试",
      "sub-titile" : "吐血超详细总结",
      "sub-titile-lower" : "吐血超详细总结",
      "categories" : "",
      "tags"     : "面试, Java, 慕课网手记",
      "url"      : "/zcblog/2019/04/01/interview-experience/",
      "date"     : "2019-04-01 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的<a href=\"https://www.imooc.com/u/4024769\">慕课网手记</a>：<a href=\"https://www.imooc.com/article/286545\">Java大厂面试（吐血超详细总结）</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p>这是我今年从四月份开始，主要的大厂面试经历，有些企业面试的还没来得及整理，还有些没有带答案就发出来了，不管怎样，请各位先思考如果是你怎么回答面试官？这篇文章会持续更新，请各位持续关注，希望对你有所帮助！</p>\n\n<h2 id=\"面试清单\">面试清单</h2>\n<ul>\n  <li><a href=\"#平安产险\">平安产险</a></li>\n  <li><a href=\"#飞猪\">飞猪</a></li>\n  <li><a href=\"#上汽大通\">上汽大通</a></li>\n  <li><a href=\"#浩鲸科技\">浩鲸科技</a></li>\n  <li><a href=\"#杏仁医生\">杏仁医生</a></li>\n  <li><a href=\"#兴盛优先\">兴盛优先</a></li>\n  <li><a href=\"#御泥坊\">御泥坊</a></li>\n  <li><a href=\"#拓维信息\">拓维信息</a></li>\n  <li><a href=\"#陆金所\">陆金所</a></li>\n  <li><a href=\"#蜜獾信息\">蜜獾信息</a></li>\n  <li><a href=\"#丰巢科技\">丰巢科技</a></li>\n  <li><a href=\"#思爱普\">SAP</a></li>\n  <li><a href=\"#房多多\">房多多</a></li>\n  <li><a href=\"#戴尔易安信\">DellEMC</a></li>\n  <li><a href=\"#亚马逊\">Amazon</a></li>\n  <li><a href=\"#有赞\">有赞</a></li>\n  <li><a href=\"#爱立信\">Ericsson</a></li>\n  <li><a href=\"#步步高\">步步高</a></li>\n  <li><a href=\"#福米科技\">福米科技</a></li>\n</ul>\n\n<h2 id=\"平安产险\">平安产险</h2>\n<p>先通过邮件发了一份线上测评（EQ+IQ), 做完达到要求后才能有后续的面试机会，没有通过<code class=\"highlighter-rouge\">两年之内</code>不能进平安任何一家公司。</p>\n\n<h3 id=\"一面\"><strong>一面</strong></h3>\n\n<h4 id=\"自我介绍\"><strong>自我介绍</strong></h4>\n\n<h4 id=\"看我工作时间不长问我为什么频繁跳槽间接问离职原因\"><strong>看我工作时间不长，问我为什么频繁跳槽（间接问离职原因）</strong></h4>\n\n<h4 id=\"关注过平安哪些架构\"><strong>关注过平安哪些架构？</strong></h4>\n<p>我就说了<a href=\"https://github.com/HaojunRen\">军哥</a>的pass平台</p>\n\n<h4 id=\"解释下什么是用户态和内核态两者有什么区别\"><strong>解释下什么是用户态和内核态？两者有什么区别？</strong></h4>\n\n<p><strong>内核态</strong>：当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于内核运行态（或简称为内核态）。其他的都属于<strong>用户态</strong>。</p>\n\n<p>用户程序运行在用户态,操作系统运行在内核态（操作系统内核运行在内核态，而服务器运行在用户态）。用户态不能干扰内核态.所以CPU指令就有两种,特权指令和非特权指令.不同的状态对应不同的指令。特权指令：只能由操作系统内核部分使用，不允许用户直接使用的指令。\n  如：I/O指令、置终端屏蔽指令、清内存、建存储保护、设置时钟指令（这几种记好，属于内核态）。非特权指令：所有程序均可直接使用。</p>\n\n<p><strong>所以：</strong></p>\n\n<p>系统态（核心态、特态、管态）：执行全部指令。</p>\n\n<p>用户态（常态、目态）：执行非特权指令。</p>\n\n<p><a href=\"https://blog.csdn.net/qq_39823627/article/details/78736650\">用户态和内核态的理解和区别</a></p>\n\n<h4 id=\"用过spring-boot哪些版本新版本相对于旧版本有哪些改变\"><strong>用过Spring boot哪些版本？新版本相对于旧版本有哪些改变？</strong></h4>\n\n<p><a href=\"https://github.com/spring-projects/spring-boot/wiki\">https://github.com/spring-projects/spring-boot/wiki</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/63596771\">Spring Boot 2.x 与 1.x 的区别，以及如何做版本迁移</a></p>\n\n<h4 id=\"webxml中dispatcherservlet的作用\"><strong>web.xml中DispatcherServlet的作用？</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/shilin000/p/4759015.html\">Spring MVC中的DispatcherServlet作用</a></p>\n\n<p><a href=\"https://blog.csdn.net/lhn1234321/article/details/83868724\">DispatcherServlet过程详解</a></p>\n\n<h4 id=\"讲下webxml中filter类过滤器\"><strong>讲下web.xml中Filter类（过滤器）</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/h2604396739/article/details/84899251\">web.xml中的配置，servlet，filter，listener的作用和原理</a></p>\n\n<h4 id=\"使用spring-boot以后与之前系统的配置方式区别方面spring-boot-和-spring-mvc-使用和配置上的区别\"><strong>使用Spring boot以后，与之前系统的配置方式区别方面？(Spring boot 和 Spring MVC 使用和配置上的区别？）</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/J080624/article/details/80758614\">SpringBoot - 注册Servlet、Filter和Listener(代码和注解两种方式)</a></p>\n\n<p><a href=\"https://www.zhihu.com/question/64671972/answer/223383505\">spring boot与spring mvc的区别是什么？</a></p>\n\n<h4 id=\"好像还有个reactivity什么的当时记不清了\"><strong>好像还有个reactivity什么的,当时记不清了。</strong></h4>\n<p>你们如果面试碰到了相关经典题目。欢迎补充！</p>\n\n<h3 id=\"二面\"><strong>二面</strong></h3>\n<p>整理中</p>\n\n<h2 id=\"飞猪\">飞猪</h2>\n<p>首先这个面试机会是来自于内推，当然内推的人和我一面的面试官都是同一个人，所以 嘿嘿嘿 你懂得…</p>\n\n<h3 id=\"一面-1\"><strong>一面</strong></h3>\n\n<h4 id=\"自我介绍-1\"><strong>自我介绍</strong></h4>\n\n<h4 id=\"介绍一下你这边最熟悉的项目在开发过程中印象最深刻地方\"><strong>介绍一下你这边最熟悉的项目？在开发过程中印象最深刻地方？</strong></h4>\n\n<h4 id=\"springboot-200和springboot-156的区别\"><strong>Springboot 2.0.0和Springboot 1.5.6的区别？</strong></h4>\n\n<p><a href=\"https://github.com/spring-projects/spring-boot/wiki\">https://github.com/spring-projects/spring-boot/wiki</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/63596771\">Spring Boot 2.x 与 1.x 的区别，以及如何做版本迁移</a></p>\n\n<h4 id=\"有没有看过springboot的源码很尴尬没有研究过\"><strong>有没有看过Springboot的源码？（很尴尬，没有研究过）</strong></h4>\n\n<p><a href=\"https://github.com/spring-projects/spring-boot\">https://github.com/spring-projects/spring-boot</a></p>\n\n<h4 id=\"springboot中遇到的一些坑及解决方法\"><strong>Springboot中遇到的一些坑及解决方法？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29161098\">Springboot与shiro整合遇到的坑</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/42678472\">Spring Boot 从1.0 升级到 2.0 所踩的坑</a></p>\n\n<h4 id=\"有没有看过spring的源码很尴尬了解过\"><strong>有没有看过Spring的源码？（很尴尬，了解过）</strong></h4>\n\n<p><a href=\"https://github.com/spring/spring\">https://github.com/spring/spring</a></p>\n\n<h4 id=\"你现在对dubbo了解得怎么样作为这个项目的贡献者没有深入阅读源码和实践真的是汗颜\"><strong>你现在对Dubbo了解得怎么样？（作为这个项目的贡献者，没有深入阅读源码和实践真的是汗颜）</strong></h4>\n\n<p><a href=\"https://github.com/apache/incubator-dubbo\">https://github.com/apache/incubator-dubbo</a></p>\n\n<p><a href=\"https://segmentfault.com/a/1190000018438985\">30 道 Dubbo 面试题及答案</a></p>\n\n<h4 id=\"jdk-19-的新特性我说没有用过19感觉19不是很稳定只用过18那说一下-18-有哪些新特性\"><strong>JDK 1.9 的新特性？（我说：没有用过1.9，感觉1.9不是很稳定,只用过1.8）那说一下 1.8 有哪些新特性？</strong></h4>\n\n<p><a href=\"https://www.zhihu.com/question/60786248/answer/180169329\">jdk8, jdk8u, jdk9, jdk10的侧重和区别是什么？</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29589033\">JDK 9新特性汇总</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/62601317\">JDK1.8新特性（持续更新）</a></p>\n\n<h4 id=\"jdk有哪些实现代理方法jdk动态代理和cglib动态代理有什么区别\"><strong>JDK有哪些实现代理方法？JDK动态代理和CGlib动态代理有什么区别？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/60922671\">深入理解静态代理与JDK动态代理</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/48736954\">JDK动态代理与CGLib动态代理相关问题</a></p>\n\n<h4 id=\"介绍下oom开发过程中遇到过哪些oom怎样解决的\"><strong>介绍下OOM?开发过程中遇到过哪些OOM,怎样解决的？</strong></h4>\n\n<p>OutOfMemoryError，当JVM因为没有足够的内存来为对象分配空间，并且垃圾回收器也已经没有空间可回收时，就会抛出这个error（注：非exception，因为这个问题已经严重到不足以被应用处理）。</p>\n\n<p>因为OutOfMemoryError是可以catch的。catch之后吞掉的话程序还能试着继续运行。例如说以前见过的一个案例是：一个Java服务器端应用，有段代码没写对导致有一个线程在疯狂创建大数组对象——直到OOM。这个线程注册的uncaught exception handler捕获到了这个异常，记录了日志，然后就把这个异常吞掉了。这样还能继续正常跑下去是因为：只是一个创建很大的数组对象的请求失败了而已，而出错的那个方法由于异常处理已经被退出了，程序的其它部分并没有受影响。</p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/63752449\">JVM 发生 OOM 的 8 种原因、及解决办法</a></p>\n\n<h4 id=\"介绍下java内存模型\"><strong>介绍下Java内存模型？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29881777\">Java内存模型（JMM）总结</a></p>\n\n<h4 id=\"你这边还有什么问题\"><strong>你这边还有什么问题？</strong></h4>\n\n<h3 id=\"二面-1\"><strong>二面</strong></h3>\n<p>整理中</p>\n\n<h2 id=\"上汽大通\">上汽大通</h2>\n<p>一套J2EE+Oracle的笔试 大概有五六张纸 我只依稀记得几道题</p>\n\n<h3 id=\"现场面试\">现场面试</h3>\n\n<h4 id=\"main方法中是否可以调用非静态方法\"><strong>main方法中是否可以调用非静态方法</strong></h4>\n\n<p>可以，一种方法将main方法写成静态方法，另一种将当前类实例化再调用它的非静态方法，例如：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span> <span class=\"o\">{</span>\n<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getnumber</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n<span class=\"n\">setnumber</span><span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">);</span>\n<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">a</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">setnumber</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">a</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">args</span><span class=\"o\">[]){</span>\n\n<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>改为：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n \n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getnumber</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">setnumber</span><span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">a</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n \n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">setnumber</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n \n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">args</span><span class=\"o\">[])</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Test</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Test</span><span class=\"o\">();</span>\n<span class=\"c1\">//      t.setnumber(10);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">getnumber</span><span class=\"o\">();</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h4 id=\"解释下aop和ioc的工作机制\"><strong>解释下AOP和IOC的工作机制？</strong></h4>\n\n<p>AOP思想的实现一般都是基于代理模式 ，在JAVA中一般采用JDK动态代理模式，但是我们都知道，JDK动态代理模式只能代理接口而不能代理类。因此，Spring AOP 会这样子来进行切换，因为Spring AOP 同时支持 CGLIB、ASPECTJ、JDK动态代理。</p>\n\n<p>Spring IOC的初始化过程：</p>\n\n<p>XML ——&gt; Resource ——&gt; BeanDefinition ——&gt; BeanFactory</p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/58006579\">如何理解Spring中的IOC和AOP</a></p>\n\n<h4 id=\"servlet的生命周期\"><strong>servlet的生命周期</strong></h4>\n\n<p>javax.servlet.Servlet接口中的init()、service()和destroy()方法来表示，主要包括四个阶段：</p>\n<ul>\n  <li>加载和实例化</li>\n  <li>初始化</li>\n  <li>请求处理</li>\n  <li>服务终止</li>\n</ul>\n\n<h4 id=\"stringstringbuffer和stringbuilder三者区别\"><strong>String、StringBuffer和StringBuilder三者区别？</strong></h4>\n\n<p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String。</p>\n\n<p>String最慢的原因：String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。</p>\n\n<p>在线程安全上，StringBuilder是线程不安全的，而StringBuffer是线程安全的。如果一个StringBuffer对象在字符串缓冲区被多个线程使用时，StringBuffer中很多方法可以带有synchronized关键字，所以可以保证线程是安全的，但StringBuilder的方法则没有该关键字，所以不能保证线程安全，有可能会出现一些错误的操作。所以如果要进行的操作是多线程的，那么就要使用StringBuffer，但是在单线程的情况下，还是建议使用速度比较快的StringBuilder。</p>\n\n<p>总结一下：</p>\n\n<ul>\n  <li>\n    <p>String：适用于少量的字符串操作的情况</p>\n  </li>\n  <li>\n    <p>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</p>\n  </li>\n  <li>\n    <p>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</p>\n\n    <p><a href=\"https://www.cnblogs.com/su-feng/p/6659064.html\">Java中的String，StringBuilder，StringBuffer三者的区别</a></p>\n\n    <p><a href=\"https://zhuanlan.zhihu.com/p/22298080\">StringBuffer 和 StringBuilder 的区别是什么？</a></p>\n  </li>\n</ul>\n\n<h4 id=\"怎么实现synchronized的可重入\"><strong>怎么实现synchronized的可重入？</strong></h4>\n\n<p>synchronized是可重入的，对同一个执行线程，它在获得了锁之后，在调用其他需要同样锁的代码时，可以直接调用。</p>\n\n<p>可重入是通过记录锁的持有线程和持有数量来实现的，当调用synchronized保护的代码时，检查对象是否已被锁，如果是，再检查是否被当前线程锁定，如果是，增加持有数量，如果不是被当前线程锁定，才加入等待队列，当释放锁时，减少持有数量，当数量为0时才释放整个锁。</p>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/./java/Multithread/JavaConcurrencyAdvancedCommonInterviewQuestions?id=_1-synchronized-关键字\">synchronized 关键字</a></p>\n\n<h4 id=\"runtimeexception和exception的区别\"><strong>RuntimeException和Exception的区别？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/47258269\">java基础学习(12)RuntimeException和Exception</a></p>\n\n<h4 id=\"wait和sleep的区别\"><strong>wait()和sleep()的区别？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/45666264\">sleep( ) 和 wait( ) 的这 5 个区别，你知道几个？</a></p>\n\n<h4 id=\"有三个线程t1t2t3确保三个线程t1执行完后t2执行t2执行完成后t3执行\"><strong>有三个线程t1、t2、t3。确保三个线程t1执行完后t2执行，t2执行完成后t3执行？</strong></h4>\n<p>用 Thread 类的 join 方法。</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">threadJoinOneByOne</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t1\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t2\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t3\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// start() 仅是通知线程启动</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"c1\">// join() 控制线程必须执行完成</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p><strong>CountDownLatch</strong>也可以实现</p>\n\n<p><strong>调整优先级</strong>并不能保证控制线程执行顺序</p>\n\n<h4 id=\"和的区别\"><strong>&amp;和&amp;&amp;的区别？</strong></h4>\n\n<p><strong>电路问题总结：</strong></p>\n\n<p>&amp;：不管怎样，都会执行”&amp;”符号左右两边的程序</p>\n\n<p>&amp;&amp;：只有当符号”&amp;&amp;”左边程序为真(true)后，才会执行符号”&amp;&amp;”右边的程序。</p>\n\n<p><strong>运算规则：</strong></p>\n\n<p>&amp;：只要左右两边有一个为false，则为false；只有全部都为true的时候，结果为true</p>\n\n<p>&amp;&amp;：只要符号左边为false，则结果为false；当左边为true，同时右边也为true，则结果为true</p>\n\n<h4 id=\"sql语句selectgroup-byorder-bywhere先后顺序\"><strong>sql语句<code class=\"highlighter-rouge\">select</code>、<code class=\"highlighter-rouge\">group by</code>、<code class=\"highlighter-rouge\">order by</code>、<code class=\"highlighter-rouge\">where</code>先后顺序？</strong></h4>\n\n<p>写的顺序：select … from… where…. group by… having… order by..</p>\n\n<p>执行顺序：from… where…group by… having…. select … order by…</p>\n\n<h4 id=\"解释java内存模型\"><strong>解释Java内存模型？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29881777\">Java内存模型（JMM）总结</a></p>\n\n<h4 id=\"jdbc如何连接数据库\"><strong>JDBC如何连接数据库？</strong></h4>\n<p><a href=\"https://zhuanlan.zhihu.com/p/33828916\">JDBC【介绍JDBC、使用JDBC连接数据库、简单的工具类】</a></p>\n\n<p>两位技术负责人+部长（周）简单聊了一下，自己的项目和经验，遇到过哪些问题？怎么解决的？怎么设计数据库模型？</p>\n\n<h2 id=\"浩鲸科技\">浩鲸科技</h2>\n\n<h3 id=\"一面-2\"><strong>一面</strong></h3>\n\n<h4 id=\"自我介绍-2\"><strong>自我介绍</strong></h4>\n\n<h4 id=\"谈一下自己最熟悉的项目中的业务框架\"><strong>谈一下自己最熟悉的项目中的业务框架？</strong></h4>\n<p>（登录+权限VIP服务绑定）</p>\n\n<h4 id=\"开发过程中后端如何提交给前端接口\"><strong>开发过程中后端如何提交给前端接口？</strong></h4>\n\n<h4 id=\"如何解决前后端token过期问题\"><strong>如何解决前后端token过期问题？</strong></h4>\n\n<p>每隔一段时间在后端请求中都将token传送过去，获取新的token值，并返回前端放入cookies中并记录cookie的存储失控,达到更新cookie中token的效果;而长时间不做操作的话我们就可以让他的token失效退出系统了。</p>\n\n<p><a href=\"https://blog.csdn.net/qq_31679735/article/details/79590850\">如何解决前后端token过期问题</a></p>\n\n<h4 id=\"如何实现在登录中高可用什么是高可用\"><strong>如何实现在登录中高可用？什么是高可用？</strong></h4>\n<p>用户信息存redis；加节点，加机器，多部署实例。</p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/43723276\">什么是高可用</a></p>\n\n<h4 id=\"你实际java开发多长时间\"><strong>你实际java开发多长时间？</strong></h4>\n\n<p>当问我这个问题的时候，我就知道前面答得并不是很好，所以面试官后面问的都是基础题。</p>\n\n<h4 id=\"抽象类和接口有什么区别\"><strong>抽象类和接口有什么区别？</strong></h4>\n\n<p><a href=\"https://www.zhihu.com/question/20149818/answer/142270191\">接口和抽象类有什么区别？</a></p>\n\n<h4 id=\"用过哪些集合list和set的区别\"><strong>用过哪些集合？list和set的区别？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/34518772\">深入理解Java中的List、Set与Map集合</a></p>\n\n<h4 id=\"用过哪些设计模式\"><strong>用过哪些设计模式？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/63601369\">如何在代码中应用设计模式</a></p>\n\n<h4 id=\"你这边还有什么问题-1\"><strong>你这边还有什么问题？</strong></h4>\n\n<p>因为这个项目是和杭州阿里系的大佬们一起开发盒马鲜生这款产品，所以着重问了下开发产品情况和团队架构。</p>\n\n<h4 id=\"你现在的薪资和期望薪资\"><strong>你现在的薪资和期望薪资？</strong></h4>\n\n<p>照实际的说，大厂一般都会查银行流水。</p>\n\n<h3 id=\"二面-2\"><strong>二面</strong></h3>\n<p>整理中</p>\n\n<h2 id=\"杏仁医生\">杏仁医生</h2>\n\n<h3 id=\"一面-3\"><strong>一面</strong></h3>\n\n<h4 id=\"自我介绍-3\"><strong>自我介绍</strong></h4>\n\n<h4 id=\"mysql-常用存储引擎有哪些分别有什么特点和区别\"><strong>mysql 常用存储引擎有哪些？分别有什么特点和区别？</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/lvjianwei/p/9880993.html\">MySQL常用存储引擎</a></p>\n\n<h4 id=\"谈一谈mysql的四种事务隔离级别有哪些区别\"><strong>谈一谈MySQL的四种事务隔离级别，有哪些区别？</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/huanongying/p/7021555.html\">MySQL的四种事务隔离级别</a></p>\n\n<h4 id=\"说一下非公平锁平时用到的是非公平锁多一点还是公平锁多一点\"><strong>说一下非公平锁？平时用到的是非公平锁多一点还是公平锁多一点？</strong></h4>\n\n<p>非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p>\n\n<h4 id=\"谈一下volatile关键字你是怎么理解的能否保证原子性比较synchronized关键字\"><strong>谈一下volatile关键字你是怎么理解的？能否保证原子性？（比较synchronized关键字）</strong></h4>\n\n<p>volatile关键字是线程同步的轻量级实现，所以volatile性能肯定比synchronized关键字要好。但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块。synchronized关键字在JavaSE1.6之后进行了优化，主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其它各种优化，执行效率有了显著提升，实际开发中使 用 synchronized 关键字的场景还是更多一些。</p>\n\n<p>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞。</p>\n\n<p>volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证。</p>\n\n<p>volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized关键字解决的是多个线程之间访问资源的同步性。</p>\n\n<h4 id=\"谈一下乐观锁和悲观锁\"><strong>谈一下乐观锁和悲观锁？</strong></h4>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/./essential-content-for-interview/面试必备之乐观锁与悲观锁\">面试必备之乐观锁与悲观锁</a></p>\n\n<p><a href=\"https://www.toutiao.com/a6674394835207586311/?timestamp=1559090888&amp;app=news_article&amp;group_id=6674394835207586311&amp;req_id=20190529084808010019054222417A028\">面试官：什么是乐观锁请举例 程序员：瑟瑟发抖 不懂啊</a></p>\n\n<h4 id=\"谈一下守护线程用到过哪种\"><strong>谈一下守护线程？用到过哪种？</strong></h4>\n\n<p><a href=\"https://segmentfault.com/a/1190000018964390\">java 多线程 守护线程</a></p>\n\n<h4 id=\"arraylist和linkedlist的区别\"><strong>ArrayList和LinkedList的区别？</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/huzi007/p/5550440.html\">Java中ArrayList和LinkedList区别</a></p>\n\n<h4 id=\"简单介绍下java中常见的引用类型\"><strong>简单介绍下java中常见的引用类型</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/chengbinbbs/article/details/78973453#%E4%B8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">java基本类型与引用类型</a></p>\n\n<h2 id=\"兴盛优先\">兴盛优先</h2>\n\n<p>说下面试前奏，我和这个公司互相鸽了一次，第一次我是因为那次在地铁里，信号不好怕影响面试效果，就提前说明了；结果第二次本来约的是晚上8：00，结果9：15分打电话过来面试，fuck，我还在洗衣服。面试官说只要20分钟，如果不方便可以下次约，好像这个面试官是已经下班了，在家里跟我打得电话，我觉得都不容易，还是同意面了。</p>\n\n<p>说来也奇怪，竟然没让我自我介绍，直接上来就跟我聊参与的开源项目 Dubbo,问我为这个项目贡献了哪一块？我轻描淡写的描述了主要负责 Dubbo的哪些生态，和如何管理控制版本的发布等等。因为我主要负责官网的迭代和维护，而Apache项目之间的沟通都是英文交流，老外喜欢用邮件列表的形式来讨论，不会像国内的开源项目，任务认领的方式是在社交软件上进行沟通，老外根本就不用。顺便问了下我英语怎么样？我讲完后，顺便介绍了下我自己。接下来正式进入面试环节。</p>\n\n<h3 id=\"一面-4\"><strong>一面</strong></h3>\n\n<h4 id=\"谈一谈-dubbo-序列化协议\"><strong>谈一谈 Dubbo 序列化协议</strong></h4>\n\n<p>Dubbo 支持 <a href=\"https://zhuanlan.zhihu.com/p/44787200\">Hessian</a>、<a href=\"https://www.zhihu.com/question/47794528/answer/672095170\">Java 二进制序列化</a>、json、SOAP 文本序列化多种序列化协议。但是 <strong>Hessian</strong> 是其默认的序列化协议。</p>\n\n<h4 id=\"谈一下-dubbo-的整体架构中的网络传输层transport\"><strong>谈一下 Dubbo 的整体架构中的网络传输层（Transport）？</strong></h4>\n\n<p>抽象 mina 和 netty 为统一接口，以 Message 为中心，扩展接口为Channel、Transporter、Client、Server和Codec</p>\n\n<p><a href=\"https://segmentfault.com/a/1190000018438985\">30 道 Dubbo 面试题及答案</a></p>\n\n<h4 id=\"说一下你最熟悉的项目中遇到的印象最深刻的问题是怎么解决的\"><strong>说一下你最熟悉的项目中，遇到的印象最深刻的问题？是怎么解决的？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29161098\">Springboot与shiro整合遇到的坑</a></p>\n\n<h4 id=\"说一下在hashmap中遇到的hash冲突是如何解决的\"><strong>说一下在HashMap中遇到的hash冲突是如何解决的？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/62854712\">HashMap？面试？我是谁？我在哪</a></p>\n\n<p>原理：HashMap基于哈希表实现的，通过put和get方法存储和获取对象。当调用put方法时，通过键对象的hashCode找到在数组中的位置来存储值对象。当获取对象时的时候，先通过键对象的hashCode找到数组中的位置，然后通过键对象的equals()方法找到正确的值对象。</p>\n\n<p>HashMap使用LinkedList来解决碰撞冲突，当两个对象的hashCode相等时它们在数组的位置相同就会发生碰撞冲突，这个时候对象将会存储在LinkedList的下一个节点中。获取对象的时候通过键对象的equals方法遍历LinkedList直到找到正确的值对象。</p>\n\n<h4 id=\"谈一下list接口有哪些特性\"><strong>谈一下List接口有哪些特性？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/34518772\">深入理解Java中的List、Set与Map集合</a></p>\n\n<h4 id=\"说一下arraylist和linkedlist区别\"><strong>说一下ArrayList和LinkedList区别？</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/huzi007/p/5550440.html\">Java中ArrayList和LinkedList区别</a></p>\n\n<h4 id=\"foreach循环里进行元素的removeadd操作这样合理吗为什么\"><strong>foreach循环里进行元素的remove/add操作，这样合理吗？为什么？</strong></h4>\n\n<p>不合理</p>\n\n<p><a href=\"https://juejin.im/entry/5c7c7cae518825620677eebb\">为什么阿里巴巴禁止在 foreach 循环里进行元素的 remove/add 操作</a></p>\n\n<h4 id=\"当有线程-t1t2-以及-t3如何实现-t1---t2---t3-的执行顺序以上问题请至少提供另外一种实现\"><strong>当有线程 T1、T2 以及 T3，如何实现 T1 -&gt; T2 -&gt; T3 的执行顺序？以上问题请至少提供另外一种实现？</strong></h4>\n\n<p>用 Thread 类的 join 方法。</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">threadJoinOneByOne</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t1\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t2\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"nl\">ThreadExecutionQuestion:</span><span class=\"o\">:</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"s\">\"t3\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// start() 仅是通知线程启动</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"c1\">// join() 控制线程必须执行完成</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">action</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"线程[%s] 正在执行...\\n\"</span><span class=\"o\">,</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>  <span class=\"c1\">// 2</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p><strong>CountDownLatch</strong>也可以实现；</p>\n\n<p><strong>调整优先级</strong>并不能保证优先级高的线程先执行。</p>\n\n<h4 id=\"好像还有一个问题是一个专有技术名词的解释我真的没听过\"><strong>好像还有一个问题？是一个专有技术名词的解释？我真的没听过……</strong></h4>\n\n<h2 id=\"御泥坊\">御泥坊</h2>\n\n<p>这个也是一个朋友内推，工资要砍半，细节我就不说了，直接上干货。</p>\n\n<h4 id=\"说一下你最熟悉的项目中遇到的印象最深刻的问题是怎么解决的-1\"><strong>说一下你最熟悉的项目中，遇到的印象最深刻的问题？是怎么解决的？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29161098\">Springboot与shiro整合遇到的坑</a></p>\n\n<h4 id=\"说一下tcpip-协议\"><strong>说一下TCP/IP 协议</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/roverliang/p/5176456.html\">HTTP协议—— 简单认识TCP/IP协议</a></p>\n\n<h4 id=\"如何让redis与mysql数据保持同步\"><strong>如何让Redis与Mysql数据保持同步？</strong></h4>\n\n<p><a href=\"https://www.zhihu.com/question/319817091/answer/653985863\">如何保持mysql和redis中数据的一致性？</a></p>\n\n<h4 id=\"如何查询hashmap里面的元素增删改查\"><strong>如何查询Hashmap里面的元素？(增删改查）</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/liupengpengg/p/6101091.html\">【面向对象版】HashMap（增删改查）</a></p>\n\n<h4 id=\"说一下hashmap-扩容机制第一次扩容到达的阈值是多少\"><strong>说一下Hashmap 扩容机制？第一次扩容到达的阈值是多少？</strong></h4>\n\n<p>JDK 1.7: <a href=\"https://www.cnblogs.com/yanzige/p/8392142.html\">深入理解HashMap的扩容机制</a></p>\n\n<p>JDK 1.8: <a href=\"https://blog.csdn.net/u010890358/article/details/80496144\">jdk1.8 HashMap工作原理和扩容机制(源码解析)</a></p>\n\n<p>默认大小为16，负载因子0.75，阈值12</p>\n\n<h2 id=\"拓维信息\">拓维信息</h2>\n<p>这个是Boss直聘找的，本来是另一个HR先跟我聊得，后面他出差了，来了个小姐姐找我。</p>\n\n<h3 id=\"一面-5\"><strong>一面</strong></h3>\n\n<h4 id=\"说一下spring-boot工作机制和spring-mvc对比优缺点\"><strong>说一下Spring boot(工作机制，和spring mvc对比优缺点)</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/58402413\">这10道springboot常见面试题你需要了解下</a></p>\n\n<h4 id=\"说一下spring-mvc框架\"><strong>说一下Spring MVC框架</strong></h4>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/./system-design/framework/spring/SpringMVC-Principle?id=%E5%85%88%E6%9D%A5%E7%9C%8B%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF-mvc-%E6%A8%A1%E5%BC%8F\">Spring MVC框架</a></p>\n\n<h4 id=\"工作中有没有遇到过mysql优化请谈一谈\"><strong>工作中有没有遇到过Mysql优化，请谈一谈</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/60249139\">巧用这19条MySQL优化，效率至少提高3倍</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/59818056\">最全 MySQL 优化方法，从此优化不再难</a></p>\n\n<h4 id=\"mysql一般什么情况查询容易出现索引失效怎么解决\"><strong>Mysql一般什么情况查询容易出现索引失效？怎么解决？</strong></h4>\n\n<p>关联查询</p>\n\n<p><a href=\"https://blog.csdn.net/student__software/article/details/82078786\">Mysql之索引失效</a></p>\n\n<p><a href=\"https://blog.csdn.net/zsx157326/article/details/79406491\">MySQL避免索引失效</a></p>\n\n<h4 id=\"说一下在工作项目中如何运用redis的\"><strong>说一下在工作项目中如何运用Redis的？</strong></h4>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/./database/Redis/Redis\">Redis</a></p>\n\n<h4 id=\"工作中使用java多态多吗请简单说一下\"><strong>工作中使用Java多态多吗？请简单说一下</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/50190390\">浅谈java多态</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29088148\">浅谈Java的多态</a></p>\n\n<h4 id=\"工作中用过哪些接口其中list有哪些类谈一下它们的区别\"><strong>工作中用过哪些接口？其中List有哪些类？谈一下它们的区别？</strong></h4>\n\n<p><a href=\"https://www.toutiao.com/a6694111343538078222/?timestamp=1559054464&amp;app=news_article&amp;group_id=6694111343538078222&amp;req_id=20190528224104010152032099253E81B\">工作3年出去面试Java，被鄙视spring的接口有哪些都不清楚</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/34518772\">深入理解Java中的List、Set与Map集合</a></p>\n\n<h4 id=\"有使用过spring-cloud吗有了解过微服务吗\"><strong>有使用过Spring Cloud吗？有了解过微服务吗？</strong></h4>\n\n<h4 id=\"对前端技术有了解吗\"><strong>对前端技术有了解吗？</strong></h4>\n\n<h4 id=\"你这边有什么问题\"><strong>你这边有什么问题？</strong></h4>\n\n<h2 id=\"陆金所\">陆金所</h2>\n\n<h3 id=\"一面-6\"><strong>一面</strong></h3>\n\n<h4 id=\"看我工作时间不长问我为什么频繁跳槽间接问离职原因-1\"><strong>看我工作时间不长，问我为什么频繁跳槽（间接问离职原因）</strong></h4>\n\n<h4 id=\"说一下java类加载机制\"><strong>说一下Java类加载机制？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/25228545\">Java类加载机制</a></p>\n\n<h4 id=\"说一下gc中-g1-g2-的算法\"><strong>说一下GC中 G1 G2 的算法</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/52841787\">G1 收集器原理理解与分析</a></p>\n\n<h4 id=\"为啥你们公司在使用mysql还要使用mongdb\"><strong>为啥你们公司在使用Mysql,还要使用MongDB?</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/52810103\">我为什么放弃MySQL？选择了MongoDB</a></p>\n\n<h4 id=\"说一下-b树-的理解\"><strong>说一下 B+树 的理解？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/27700617\">平衡二叉树、B树、B+树、B*树 理解其中一种你就都明白了</a></p>\n\n<h4 id=\"你对索引有了解吗说一下a-abb-abab这个题说实话没听清面试官的意思应该是问的是否会造成索引失效\"><strong>你对索引有了解吗？说一下A =’a’,B=’b’, AB=’ab’?</strong>(这个题说实话没听清面试官的意思，应该是问的是否会造成索引失效)。</h4>\n\n<h2 id=\"蜜獾信息\">蜜獾信息</h2>\n\n<h3 id=\"一面-7\"><strong>一面</strong></h3>\n\n<h4 id=\"说一下最近做过的项目\"><strong>说一下最近做过的项目</strong></h4>\n\n<h4 id=\"你使用过哪些jdk版本\"><strong>你使用过哪些JDK版本？</strong></h4>\n\n<h4 id=\"用过哪些集合包\"><strong>用过哪些集合包？</strong></h4>\n\n<p>ArrayList、LinkedList、Vector、Stack、HashSet、TreeSet、HashMap、TreeMap</p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/34518772\">深入理解Java中的List、Set与Map集合</a></p>\n\n<h4 id=\"说一下arraylistlinkedlisthashmap-底层数据结构\"><strong>说一下ArrayList、LinkedList、HashMap 底层数据结构</strong></h4>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/./java/collection/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98?id=arraylist-%E4%B8%8E-linkedlist-%E5%8C%BA%E5%88%AB\">Arraylist 与 LinkedList 区别?</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/45967570\">一篇文章搞定ArrayList和LinkedList所有面试问题</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/28501879\">HashMap底层实现原理（上）</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/28587782\">HashMap底层实现原理（下）</a></p>\n\n<h4 id=\"arraylist-是有序还是无序\"><strong>Arraylist 是有序还是无序？</strong></h4>\n<p>有序</p>\n\n<h4 id=\"有哪些方式可以实现多线程\"><strong>有哪些方式可以实现多线程？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/47401636\">Java多线程实现的四种方式</a></p>\n\n<h4 id=\"用过哪些并发包我反问面试官是不是juc为何他说不是\"><strong>用过哪些并发包（我反问面试官是不是JUC，为何他说不是？）</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/43618142\">java并发包、线程池、锁</a></p>\n\n<h4 id=\"说一下sleep--和-wait-的区别\"><strong>说一下sleep( ) 和 wait( )的区别？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/45666264\">sleep( ) 和 wait( ) 的这 5 个区别，你知道几个？</a></p>\n\n<h4 id=\"开发过程中遇到过哪些异常exception-与-error的区别说一下error层次结构\"><strong>开发过程中遇到过哪些异常？Exception 与 error的区别？说一下error层次结构？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/37072375\">Java异常处理</a></p>\n\n<h4 id=\"用过哪些数据库说一下mysql-四种事务隔离级别哪种级别最高为什么\"><strong>用过哪些数据库？说一下Mysql 四种事务隔离级别？哪种级别最高？为什么？</strong></h4>\n\n<p><a href=\"https://www.jianshu.com/p/75187e19faf2\">真正理解Mysql的四种事务隔离级别</a></p>\n\n<h4 id=\"用过索引吧在使用索引需要注意什么如何避免索引失效\"><strong>用过索引吧？在使用索引需要注意什么？（如何避免索引失效？）</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/27835355\">如何理解并正确使用MySql索引</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/40820574\">Mysql索引简明教程</a></p>\n\n<p><a href=\"https://blog.csdn.net/student__software/article/details/82078786\">Mysql之索引失效</a></p>\n\n<p><a href=\"https://blog.csdn.net/zsx157326/article/details/79406491\">MySQL避免索引失效</a></p>\n\n<h4 id=\"说一下spring-mvc框架-1\"><strong>说一下Spring MVC框架</strong></h4>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/./system-design/framework/spring/SpringMVC-Principle?id=%E5%85%88%E6%9D%A5%E7%9C%8B%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF-mvc-%E6%A8%A1%E5%BC%8F\">Spring MVC框架</a></p>\n\n<h4 id=\"http-和-https-的区别\"><strong>http 和 https 的区别？</strong></h4>\n\n<p><code class=\"highlighter-rouge\">http</code>就是我们说的超文本传输协议，这个协议它是用一种明文的方式发送我们的内容，没有任何的加密。比如说我们访问一个网站，我们可能需要在这个网站输入密码，登录账号之类的操作，那我们的账号和密码就会发送到网站的服务器上面。但要是有人在中途截取了我们的信息，那我们的一些比较重要的信息可能就暴露了，所以为了解决<code class=\"highlighter-rouge\">http</code>在传输过程中不加密的问题，之后就增加了一个SSL协议，这个协议简单说就是一个提供数据安全和完整性的协议，也就是负责网络连接的加密。</p>\n\n<p>比如我们访问一个<code class=\"highlighter-rouge\">https</code>的网站，那我们的电脑就会先和服务器建立一个安全的连接通道，然后服务器会先发送一份网站的证书信息到我们电脑，就相当于是告诉我们电脑，你访问的服务器没有问题。确认了信息之后，我们服务器就会生成一个加锁的箱子，但是这把锁有两把不一样的钥匙，一把是给我们电脑的，另一把是服务器自己的。然后服务器就会把没有上锁的箱子和钥匙发给我们电脑，我们把信息放在箱子里面之后，用钥匙锁上，然后发给服务器，服务器再用自己的钥匙打开箱子，来保证信息的安全。在这个过程中，即使箱子被别人拦截了，因为没有服务器的钥匙，以目前的技术来讲，还是很难打开箱子的。所以现在的一些大的网站，尤其是购物网站、或者是需要我们登录的网站，基本上都是<code class=\"highlighter-rouge\">https</code>的。</p>\n\n<p><a href=\"https://www.zhihu.com/question/19577317/answer/103499193\">http 和 https 有何区别？如何灵活使用？</a></p>\n\n<h4 id=\"一般数据都是以什么形式传给前端\"><strong>一般数据都是以什么形式传给前端？</strong></h4>\n<p>json格式</p>\n\n<p><a href=\"https://blog.csdn.net/henouren/article/details/78282406\">前后端数据交互之前端传值到后台</a></p>\n\n<h4 id=\"你这边还有什么问题-2\"><strong>你这边还有什么问题？</strong></h4>\n\n<h2 id=\"丰巢科技\">丰巢科技</h2>\n\n<h4 id=\"自我介绍-4\"><strong>自我介绍</strong></h4>\n<p>看到我说的和简历上的没差别，就没让我继续说了</p>\n\n<h4 id=\"你平时是怎么学习技术的\"><strong>你平时是怎么学习技术的？</strong></h4>\n\n<h4 id=\"有中间件开发经验吗\"><strong>有中间件开发经验吗？</strong></h4>\n\n<h4 id=\"如何搭建nacosdubbo平台\"><strong>如何搭建nacos/dubbo平台？</strong></h4>\n\n<h4 id=\"说一下spring-mvc框架-2\"><strong>说一下Spring MVC框架</strong></h4>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/./system-design/framework/spring/SpringMVC-Principle?id=%E5%85%88%E6%9D%A5%E7%9C%8B%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF-mvc-%E6%A8%A1%E5%BC%8F\">Spring MVC框架</a></p>\n\n<h4 id=\"mybatis是如何将sql执行结果封装为目标对象并返回的都有哪些映射形式\"><strong>Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</strong></h4>\n\n<p>第一种是使用<resultMap>标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用sql列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是name，小写，但是列名不区分大小写，Mybatis会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NaMe，Mybatis一样可以正常工作。\n有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</resultMap></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/61432692\">十道常见的mybatis面试题</a></p>\n\n<h4 id=\"谈一谈公平锁和非公平锁\"><strong>谈一谈公平锁和非公平锁？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/54551800\">最全Java锁详解：独享锁/共享锁+公平锁/非公平锁+乐观锁/悲观锁</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/34510121\">两程序员玩“锁”，一人抢救无效身亡</a></p>\n\n<h4 id=\"简单聊下线程池\"><strong>简单聊下线程池？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/36475103\">线程池你真不来了解一下吗？</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/62132884\">当面试官问线程池时，你应该知道些什么？</a></p>\n\n<h4 id=\"简单说一下java内存模型jmm\"><strong>简单说一下Java内存模型（JMM)</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29881777\">Java内存模型（JMM）总结</a></p>\n\n<h4 id=\"工作中有没有mysql优化的经验请谈一谈\"><strong>工作中有没有Mysql优化的经验，请谈一谈</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/60249139\">巧用这19条MySQL优化，效率至少提高3倍</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/59818056\">最全 MySQL 优化方法，从此优化不再难</a></p>\n\n<h4 id=\"谈一下索引数据结构\"><strong>谈一下索引数据结构</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/47046781\">数据库索引数据结构总结</a></p>\n\n<h4 id=\"简述-btree\"><strong>简述 B+Tree</strong></h4>\n\n<p><a href=\"https://yq.aliyun.com/articles/38345\">二叉树学习笔记之B树、B+树、B*树</a></p>\n\n<h4 id=\"谈一谈单链表和双链表的区别\"><strong>谈一谈单链表和双链表的区别？</strong></h4>\n\n<p><strong>单链表</strong>：单链表只有一个指向下一节点的指针，也就是只能next。</p>\n\n<p><strong>双链表</strong>：双链表除了有一个指向下一节点的指针外，还有一个指向前一结点的指针，可以通过prev快速找到前一结点。一般我们都构造双向循环链表。</p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/52878334\">数据结构与算法-链表(上)</a></p>\n\n<h4 id=\"谈谈-synchronized-和-reentrantlock-的区别\"><strong>谈谈 synchronized 和 ReentrantLock 的区别</strong></h4>\n\n<ul>\n  <li>两者都是可重入锁</li>\n  <li>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</li>\n  <li>ReentrantLock 比 synchronized 增加了一些高级功能</li>\n</ul>\n\n<p>相比synchronized，ReentrantLock增加了一些高级功能。主要来说主要有三点：①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）</p>\n<ul>\n  <li>两者的性能已经相差无几</li>\n</ul>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/./essential-content-for-interview/PreparingForInterview/美团面试常见问题总结?id=_3-谈谈-synchronized-和-reentrantlock-的区别\">谈谈 synchronized 和 ReentrantLock 的区别</a></p>\n\n<h2 id=\"思爱普\">思爱普</h2>\n\n<h3 id=\"一面-8\"><strong>一面</strong></h3>\n\n<h4 id=\"string-和-stringbuilder-有何异同\"><strong>String 和 StringBuilder 有何异同？</strong></h4>\n\n<p><a href=\"http://blog.chinaunix.net/uid-20767210-id-1849811.html\">JAVA中String与StringBuffer，StringBuilder的区别</a></p>\n\n<h4 id=\"开发完后一般用什么测试工具测试还是有人测试\"><strong>开发完后一般用什么测试工具测试？还是有人测试？</strong></h4>\n<p><a href=\"https://zhuanlan.zhihu.com/p/33710816\">说说Java单元测试</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/43154938\">JAVA 程序员需要用到 10 个测试框架和库</a></p>\n\n<h4 id=\"比较-checked-exception-与-unchecked-exception\"><strong>比较 checked exception 与 unchecked exception</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/kingzone_2008/article/details/8535287\">Java异常：选择Checked Exception还是Unchecked Exception?</a></p>\n\n<h4 id=\"classnotfoundexception-和-noclassdeffounderr区别\"><strong>ClassNotFoundException 和 NoClassDefFoundErr区别？</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/duke2016/p/9153241.html\">ClassNotFoundException和NoClassDefFoundError的区别</a></p>\n\n<h4 id=\"谈一下-threadlocal-和-threadlocalmap\"><strong>谈一下 Threadlocal 和 ThreadLocalMap</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/34494674\">深度揭秘ThreadLocal</a></p>\n\n<p><a href=\"https://www.jianshu.com/p/98b68c97df9b\">ThreadLocal-面试必问深度解析</a></p>\n\n<h4 id=\"说一下-mysql-中的-join\"><strong>说一下 Mysql 中的 JOIN</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29234064\">图解 SQL 里的各种 JOIN</a></p>\n\n<h4 id=\"说一下-mysql-中的事物隔离级别\"><strong>说一下 Mysql 中的事物隔离级别</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/huanongying/p/7021555.html\">MySQL的四种事务隔离级别</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/59061106\">互联网项目中mysql应该选什么事务隔离级别</a></p>\n\n<h4 id=\"mongdb-中有哪些事物隔离级别\"><strong>MongDB 中有哪些事物隔离级别？</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/popvip44/article/details/71487425\">MongoDB是如何实现事务的ACID？</a></p>\n\n<h4 id=\"如何保持-mysql-和-redis中数据的一致性\"><strong>如何保持 Mysql 和 redis中数据的一致性？</strong></h4>\n\n<p><a href=\"https://www.zhihu.com/question/319817091/answer/653985863\">如何保持mysql和redis中数据的一致性？</a></p>\n\n<h4 id=\"说一下-redis-运用场景\"><strong>说一下 redis 运用场景</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29665317\">Redis常见的应用场景解析</a></p>\n\n<h4 id=\"mysql-有哪些优化方式\"><strong>Mysql 有哪些优化方式？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/60249139\">巧用这19条MySQL优化，效率至少提高3倍</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/59818056\">最全 MySQL 优化方法，从此优化不再难</a></p>\n\n<h4 id=\"mysql中除了主键约束primary-key还有哪些约束\"><strong>Mysql中除了主键约束（primary key），还有哪些约束？</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/w_linux/article/details/79655073\">MySQL——约束(constraint)详解</a></p>\n\n<h4 id=\"请用英文介绍温尔宝贝项目\"><strong>请用英文介绍“温尔宝贝”项目？</strong></h4>\n\n<p><strong>wener baby app</strong></p>\n\n<p>The project is for continuous monitoring of user’s body temperature, real-time temperature, prompt the user and through the cyclical temperature data analysis of the user’s health.Using Springboot + mybatis architecture, mybatis - plus to simplify the development of the dao layer, and extract the universal service;Swagger document automatically generated interface, convenient interface test;Gradle management jar package, solve the jars conflict;Use redis for middle pressure to reduce database cache.</p>\n\n<p><strong>wener baby pad</strong></p>\n\n<p>The project on the basis of previous app, joint development with offline clinics and hospitals, and VIP card binding through mobile phones, on the pad for continuous monitoring of the user’s temperature display.Springboot + mongo framework, using the swagger automatically generated interface documents, convenient interface test;Taiwan before and after data interaction using the vue to simplify the dom manipulation;Neginx reverse proxy server, the data flow, split into multiple servers to improve the whole performance of the server system.</p>\n\n<h4 id=\"在win系统中如何运行sh文件\"><strong>在Win系统中如何运行.sh文件？</strong></h4>\n\n<p><a href=\"http://blog.sina.com.cn/s/blog_64ac3a9a0102xrr6.html\">win10下安装bash+运行.sh文件</a></p>\n\n<h2 id=\"房多多\">房多多</h2>\n\n<h4 id=\"自我介绍-5\"><strong>自我介绍</strong></h4>\n\n<h4 id=\"说一下项目中登录模块业务\"><strong>说一下项目中登录模块业务</strong></h4>\n\n<p>在登录模块中，主要负责注册、登录功能。在注册模块中，我们使用hibernate-validator依赖完成后台POJO的校验，可以防止用户跳过前端的js校验。在登录模块中，通过Controller，Service和Dao三层架构查询用户在数据库中是否存在信息，如果存在，则通过当前时间戳及用户id生成一个token，将token存入的redis中，然后把toekn存入到cookie中，发送给前端。</p>\n\n<h4 id=\"在多节点登录的前提下如何防止同一账号同时在多个不同设备登录\"><strong>在多节点登录的前提下，如何防止同一账号，同时在多个不同设备登录</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/qq_17505335/article/details/70173261\">WEB系统防止同一账号，同时在多个不同设备登录</a></p>\n\n<h4 id=\"为什么要用redis存储token\"><strong>为什么要用redis存储token</strong></h4>\n\n<p>1、token具有时效性，redis处理有优势。</p>\n\n<p>2、在API领域，由于请求数比较多，redis也有优势。</p>\n\n<p>3、登录信息一般不需要长效储存，所以可以减少DB的压力，直接用redis。</p>\n\n<p>还有其他的看项目情形来定。</p>\n\n<h4 id=\"谈一下垃圾回收gc-算法\"><strong>谈一下垃圾回收（GC 算法）</strong></h4>\n\n<p><a href=\"https://www.jianshu.com/p/5261a62e4d29\">浅析JAVA的垃圾回收机制（GC）</a></p>\n\n<h4 id=\"说一下分布式锁\"><strong>说一下分布式锁</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/42056183\">分布式锁看这篇就够了</a></p>\n\n<h4 id=\"说一下分布式事物以及应用场景\"><strong>说一下分布式事物以及应用场景</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/25933039\">分布式事务？No, 最终一致性</a></p>\n\n<h4 id=\"工作中有用到过幂等吗简单说一下\"><strong>工作中有用到过幂等吗？简单说一下</strong></h4>\n\n<p><a href=\"https://www.zhihu.com/question/27744795/answer/51790688\">分布式高并发系统如何保证对外接口的幂等性？</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/30493445\">什么是分布式系统中的幂等性</a></p>\n\n<h4 id=\"你这边还有什么问题-3\"><strong>你这边还有什么问题？</strong></h4>\n\n<h2 id=\"戴尔易安信\">戴尔易安信</h2>\n\n<h4 id=\"解释下-final-关键字\"><strong>解释下 final 关键字</strong></h4>\n\n<p><a href=\"https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/Basis/final、static、this、super.md#final-关键字\">final,static,this,super 关键字总结</a></p>\n\n<h4 id=\"volatile-和-synchronized-的区别\"><strong>Volatile 和 Synchronized 的区别？</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/suifeng3051/article/details/52611233\">volatile和synchronized的区别</a></p>\n\n<h4 id=\"如何设计-restful-api说一下幂等性http常用方法接触过哪些分别是干什么的\"><strong>如何设计 RESTful API？说一下幂等性？HTTP常用方法接触过哪些？分别是干什么的？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/25647039\">RESTful API最佳实践</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/24592119\">如何更好的设计RESTful API</a></p>\n\n<h4 id=\"说一下用过哪些排序算法\"><strong>说一下用过哪些排序算法？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/34421623\">九种排序算法的可视化及比较</a></p>\n\n<h4 id=\"mysql事务的基本要素acid一致性的业务场景数据库中如何做到一致性事务隔离级别用例子说明不可重复读read-committed\"><strong>Mysql事务的基本要素(ACID)?一致性的业务场景？数据库中如何做到一致性？事务隔离级别？用例子说明不可重复读（read-committed）</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/huanongying/p/7021555.html\">MySQL的四种事务隔离级别</a></p>\n\n<h4 id=\"进程和线程的区别\"><strong>进程和线程的区别？</strong></h4>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/java/Java基础知识?id=_29-简述线程、程序、进程的基本概念%E3%80%82以及他们之间关系是什么\">简述线程、程序、进程的基本概念。以及他们之间关系是什么？</a></p>\n\n<p><a href=\"https://snailclimb.top/JavaGuide/#/java/Multithread/JavaConcurrencyBasicsCommonInterviewQuestionsSummary?id=_21-图解进程和线程的关系\">图解进程和线程的关</a></p>\n\n<h4 id=\"接触过哪些数据库索引数据结构什么是-btree\"><strong>接触过哪些数据库索引数据结构？什么是 B+Tree？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/47046781\">数据库索引数据结构总结</a></p>\n\n<h4 id=\"简单说一下数据库中的索引\"><strong>简单说一下数据库中的索引？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/66553466\">通俗易懂 索引、单列索引、复合索引、主键、唯一索引、聚簇索引、非聚簇索引、唯一聚簇索引 的区别与联系</a></p>\n\n<h4 id=\"说一下你工作中遇到哪些内存泄露\"><strong>说一下你工作中遇到哪些内存泄露</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/69151763\">面试题：什么是内存泄漏？内存溢出？</a></p>\n\n<h4 id=\"谈一下垃圾回收机制gc垃圾回收是回收的什么\"><strong>谈一下垃圾回收机制（GC）？垃圾回收是回收的什么？</strong></h4>\n<p>垃圾回收(Garbage Collection)是Java虚拟机(JVM)垃圾回收器提供的一种用于在空闲时间不定时回收无任何对象引用的对象占据的内存空间的一种机制。</p>\n\n<p>注意：垃圾回收回收的是无任何引用的对象占据的内存空间而不是对象本身。换言之，垃圾回收只会负责释放那些对象占有的内存。对象是个抽象的词，包括引用和其占据的内存空间。当对象没有任何引用时其占据的内存空间随即被收回备用，此时对象也就被销毁。但不能说是回收对象，可以理解为一种文字游戏。</p>\n\n<p><a href=\"https://www.jianshu.com/p/5261a62e4d29\">浅析JAVA的垃圾回收机制</a></p>\n\n<h4 id=\"如何实现多线程中的同步\"><strong>如何实现多线程中的同步？</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/QQQQQQ654/article/details/70144050\">java中实现线程同步的7种方法</a></p>\n\n<h4 id=\"说一下线程同步中的读写锁\"><strong>说一下线程同步中的读写锁？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/60775568\">Java 种15种锁的介绍：公平锁，可重入锁，独享锁，互斥锁，乐观锁，分段锁，自旋锁等</a></p>\n\n<p><a href=\"https://www.jianshu.com/p/ab836f5e501e\">java中的读写锁</a></p>\n\n<h4 id=\"用英语介绍你最熟悉的项目\"><strong>用英语介绍你最熟悉的项目？</strong></h4>\n\n<p><strong>wener baby (pad)</strong></p>\n\n<p>The project on the basis of previous app, joint development with offline clinics and hospitals, and VIP card binding through mobile phones, on the pad for continuous monitoring of the user’s temperature display.Springboot + mongo framework, using the swagger document automatically generated interface, convenient interface test;Taiwan before and after data interaction using the vue to simplify the dom manipulation;Neginx reverse proxy server, the data flow split into multiple server implementation, improve the performance of the entire server system.</p>\n\n<h4 id=\"你这边还有什么问题-4\"><strong>你这边还有什么问题？</strong></h4>\n\n<h2 id=\"亚马逊\">亚马逊</h2>\n\n<h3 id=\"简历筛选测试\"><strong>简历筛选测试</strong></h3>\n\n<h4 id=\"test3-\"><strong>Test3 :</strong></h4>\n\n<p>Note: if you cannot finish the test, you may still get the chance to next step of the hiring process if some shinning points were identified from your work: if you finish the work, you may still fail because your outcome did not meet the hiring bar.\nBackground: we want to build a solution to hire the right people quickly. The development work of this solution is part of the solution. As a candidate, please contribute your idea and finish the assignment.\nCommon requirements:</p>\n<ol>\n  <li>Use Java as the main development language unless there is a solid reason for other choice.</li>\n  <li>Provide test evidence (like the snapshot of the output of your solution) to easy the reviewer.</li>\n  <li>The UT coverage must &gt; 80% if not 100%.</li>\n  <li>Please try to leverage the existing functionality of this project although it’s always fine to refactor them.</li>\n</ol>\n\n<p>Test Description: for any key words, please get the 1st non-AD search result from baidu.com.</p>\n\n<p>Definition of done:</p>\n\n<ol>\n  <li>\n    <p>Define a mechanism for the user to provide the key words.</p>\n  </li>\n  <li>\n    <p>The result will be shown on a web page (you may define the URL) of this project.</p>\n  </li>\n</ol>\n\n<hr />\n\n<p>为了考核众多面试者的技术能力，请review一下该面试者的code：<a href=\"[https://github.com/yingjil/JPHire/pull/6/commits/7b12ee650a15375a0b444f4374d0923e398bd02f\">https://github.com/yingjil/JPHire/pull/6/commits/7b12ee650a15375a0b444f4374d0923e398bd02f</a> 。他的任务是在<code class=\"highlighter-rouge\">Test3</code>中描述的。对你的要求是用最高标准找到代码缺陷并提出修改意见。如果接受任务，请告知估计完成时间。</p>\n\n<p><strong>备注：</strong> 这个练习只是简历预审核的一步。完成任务不代表肯定能获得面试机会（HR依然可能拒绝简历）。拒绝参加本任务也不会留下任何不良记录。</p>\n\n<hr />\n\n<h4 id=\"个人理解\"><strong>个人理解</strong></h4>\n\n<h4 id=\"一任务需求实现角度\"><strong>一、任务需求实现角度</strong></h4>\n\n<p>1、需要定义一种提供用户输入搜索关键字的机制。我的理解是应该有一个简单的web页面，提供一个输入框，一个搜索按钮。而代码里这部分是缺失的。</p>\n\n<p>2、搜索的结果需要展示在web页面中。这个也没看到对应的页面代码。</p>\n\n<p>3、单元测试覆盖率要达到80%以上代码里测试用例过于简单，覆盖率远远低于80%。</p>\n\n<h4 id=\"二代码实现角度\"><strong>二、代码实现角度</strong></h4>\n\n<p>1、baidu.com 网站的页面元素规则是可变的，建议“第一个非广告搜索结果”的匹配规则设计成可配置，而不是写死在代码里。</p>\n\n<p>2、<code class=\"highlighter-rouge\">WebPageUtil</code>类的职责建议设计成通用工具类，而不是耦合具体业务代码。</p>\n\n<p>3、考虑到扩展性，<code class=\"highlighter-rouge\">KeyWordSearchService</code>应设计成接口，以支持不同搜索网站的各自实现。</p>\n\n<h2 id=\"有赞\">有赞</h2>\n\n<h4 id=\"hashmap-与-hashtable源码\"><strong>hashmap 与 hashtable源码</strong></h4>\n\n<h4 id=\"hashmap-在-jdk-17-和-jdk-18-中的区别\"><strong>hashmap 在 jdk 1.7 和 jdk 1.8 中的区别</strong></h4>\n\n<h4 id=\"线程池线程参数的含义\"><strong>线程池，线程参数的含义</strong></h4>\n\n<h4 id=\"生产设置线程数的依据是什么\"><strong>生产设置线程数的依据是什么？</strong></h4>\n\n<h4 id=\"javaiowriter-有什么方法\"><strong>java.io.writer 有什么方法</strong></h4>\n\n<h4 id=\"hashcode-equals-重写一个会有什么情况\"><strong>hashcode equals 重写一个会有什么情况</strong></h4>\n\n<h4 id=\"sleep-加锁会释放吗\"><strong>sleep 加锁会释放吗？</strong></h4>\n\n<h4 id=\"缓存击穿雪崩\"><strong>缓存击穿，雪崩</strong></h4>\n\n<p>1.缓存过期导致的击穿，如果只是单条，对系统没有影响；如果同时一大批过期，效果就相当于雪崩，压力都到了数据库，扛不住。解决办法：使得各个数据的过期时间尽量均匀，比如可以加随机数。使得数据库压力均匀。</p>\n\n<p>2.缓存没命中导致的穿透，同样的问题。这个就需要尽量以缓存为准，即要么通过先返回空，再异步加载数据，要么就是用一个去重机制(bitmap 效果明显比 boomfilter 好)。还有一个方法就是，如果数据库里没有，也放一个key:null到缓存，加过期时间。</p>\n\n<p>3.雪崩主要是靠高可用处理，分片、多实例、持久化，不要被清空了，宕机或重启，预热可以比较平稳，比如逐步加载数据。</p>\n\n<h4 id=\"如何保证幂等性一般在什么环节处理\"><strong>如何保证幂等性，一般在什么环节处理？</strong></h4>\n\n<h4 id=\"说说你了解的分布式\"><strong>说说你了解的分布式</strong></h4>\n\n<h2 id=\"爱立信\">爱立信</h2>\n\n<h4 id=\"英语自我介绍\"><strong>英语自我介绍</strong></h4>\n\n<p>hello, everone! my name is Jiele Cao, 25 years old, from hunan, graduated from hunan university of technology, electronic information engineering in Shanghai has been working for three years after graduation, respectively in two Internet biological medical company involved in the backend development of four projects.First company Shanghai with biological technology co., LTD., work for more than a year, is mainly responsible for the company’s internal document management systems and WeChat public projects; wener recently, the Shanghai information technology co., LTD. Participated in two projects of a project which is Internet medical clinics online platform, the company is a company to do temperature detection, in the early stage of the project (wener baby), on the basis of the development on special pad, with modular service operations in the form of the project mainly includes frontend and backend, such as user, login, search module.</p>\n\n<h4 id=\"说一下-jdk-18-有哪些新特性\"><strong>说一下 jdk 1.8 有哪些新特性？</strong></h4>\n\n<p><a href=\"https://www.zhihu.com/question/60786248/answer/180169329\">jdk8, jdk8u, jdk9, jdk10的侧重和区别是什么？</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/29589033\">JDK 9新特性汇总</a></p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/62601317\">JDK1.8新特性（持续更新）</a></p>\n\n<h4 id=\"线程安全用过哪些线程安全的类\"><strong>线程安全？用过哪些线程安全的类？</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/mexican_ok/article/details/12859351\">Java集合中那些类是线程安全的</a></p>\n\n<h4 id=\"线程池threadpoolexecutor-类用过哪些方法\"><strong>线程池？<code class=\"highlighter-rouge\">ThreadPoolExecutor</code> 类用过哪些方法？</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/qq_25806863/article/details/71126867\">Java多线程-线程池ThreadPoolExecutor构造方法和规则</a></p>\n\n<h4 id=\"用过哪些jvm诊断工具\"><strong>用过哪些JVM诊断工具？</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/supera_li/article/details/45315241\">【总结】性能调优：JVM内存诊断工具</a></p>\n\n<p><a href=\"https://www.jianshu.com/p/c4966f7e8f36\">JVM监控及诊断工具</a></p>\n\n<h4 id=\"遇到内存溢出怎么解决\"><strong>遇到内存溢出怎么解决？</strong></h4>\n\n<p>OutOfMemoryError，当JVM因为没有足够的内存来为对象分配空间，并且垃圾回收器也已经没有空间可回收时，就会抛出这个error（注：非exception，因为这个问题已经严重到不足以被应用处理）。</p>\n\n<p>因为OutOfMemoryError是可以catch的。catch之后吞掉的话程序还能试着继续运行。例如说以前见过的一个案例是：一个Java服务器端应用，有段代码没写对导致有一个线程在疯狂创建大数组对象——直到OOM。这个线程注册的uncaught exception handler捕获到了这个异常，记录了日志，然后就把这个异常吞掉了。这样还能继续正常跑下去是因为：只是一个创建很大的数组对象的请求失败了而已，而出错的那个方法由于异常处理已经被退出了，程序的其它部分并没有受影响。</p>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/63752449\">JVM 发生 OOM 的 8 种原因、及解决办法</a></p>\n\n<h4 id=\"jvm内存结构\"><strong>JVM内存结构</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/ityouknow/p/5610232.html\">JVM内存结构</a></p>\n\n<h4 id=\"用过哪些liunx系统的命令如何用命令查找带有java内容的文件\"><strong>用过哪些liunx系统的命令？如何用命令查找带有Java内容的文件？</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/fnlingnzb-learner/p/5831284.html\">Linux常用命令大全</a></p>\n\n<p><a href=\"https://blog.csdn.net/milo_csdn/article/details/86306527\">Windows CMD中查找文件和文件内容</a></p>\n\n<p><code class=\"highlighter-rouge\">grep -r \"{关键字}\"  {路径}</code></p>\n\n<p>eg: <code class=\"highlighter-rouge\">grep -r \"test\"  /data/reports</code></p>\n\n<h4 id=\"linux中如何用命令查看java进程\"><strong>linux中如何用命令查看java进程？</strong></h4>\n\n<p><code class=\"highlighter-rouge\">ps -ef|grep java</code></p>\n\n<h4 id=\"用过oracle吗mysql-如何调优mysql-如何避免索引失效\"><strong>用过Oracle吗？MySQL 如何调优？MySQL 如何避免索引失效？</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/claireyuancy/p/7258314.html\">MySQL 性能调优的10个方法</a></p>\n\n<p><a href=\"https://www.jianshu.com/p/d5b2f645d657\">索引优化：索引失效（应避免）</a></p>\n\n<h2 id=\"步步高\">步步高</h2>\n\n<h3 id=\"一面-9\"><strong>一面</strong></h3>\n\n<h4 id=\"自我介绍-6\"><strong>自我介绍</strong></h4>\n\n<h4 id=\"温尔宝贝-pad这个项目承担什么样的角色\"><strong>温尔宝贝 pad这个项目承担什么样的角色？</strong></h4>\n\n<h4 id=\"mysql-组合索引\"><strong>MySQL 组合索引</strong></h4>\n\n<p><a href=\"https://www.zhihu.com/question/40736083/answer/88191544\">mysql 什么时候用单列索引？什么使用用联合索引？</a></p>\n\n<h4 id=\"mysql-和-mongodb-的区别\"><strong>MySQL 和 MongoDB 的区别？</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/caihuafeng/p/5494336.html\">MySQL与MongoDB的区别</a></p>\n\n<h4 id=\"mysql-如何避免索引失效\"><strong>MySQL 如何避免索引失效？</strong></h4>\n\n<p><a href=\"https://www.jianshu.com/p/d5b2f645d657\">索引优化：索引失效（应避免）</a></p>\n\n<h4 id=\"假如线上项目出现问题如何解决\"><strong>假如线上项目出现问题，如何解决？</strong></h4>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/34107876\">如何应对线上故障</a></p>\n\n<h4 id=\"用过哪些liunx系统的命令查看日志命令\"><strong>用过哪些liunx系统的命令？查看日志命令？</strong></h4>\n\n<p><a href=\"http://man.linuxde.net\">Linux 命令大全</a></p>\n\n<p><a href=\"https://www.cnblogs.com/kbkiss/p/7567725.html\">Linux查看日志常用命令</a></p>\n\n<h4 id=\"遇到异常怎么处理\"><strong>遇到异常怎么处理？</strong></h4>\n\n<p><a href=\"https://cloud.tencent.com/developer/article/1132994\">Java异常处理</a></p>\n\n<h4 id=\"object类及其常用方法\"><strong>Object类及其常用方法</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/wxywxy/p/6740277.html\">Object类及其常用方法简介</a></p>\n\n<p><a href=\"https://blog.csdn.net/guo0820/article/details/51030380\">java Object类及其常用方法</a></p>\n\n<h4 id=\"stringstringbuffer与stringbuilder的区别\"><strong>String、StringBuffer与StringBuilder的区别</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/rmn190/article/details/1492013\">String,StringBuffer与StringBuilder的区别??</a></p>\n\n<h4 id=\"equals和的区别\"><strong>“equals”和”==”的区别</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/Eason-S/p/5524837.html\">equals和==的区别小结</a></p>\n\n<h4 id=\"arraylist和linkedlist的区别-1\"><strong>ArrayList和LinkedList的区别?</strong></h4>\n\n<p><strong>LinkedList</strong>实现了List接口，允许null元素。此外LinkedList提供额外的get，remove，insert方法在LinkedList的首部或尾部。这些操作使LinkedList可被用作堆栈（stack），队列（queue）或双向队列（deque）。</p>\n\n<p>注意<strong>LinkedList</strong>没有同步方法。如果多个线程同时访问一个List，则必须自己实现访问同步。一种解决方法是在创建List时构造一个同步的List：</p>\n\n<p><code class=\"highlighter-rouge\">List list = Collections.synchronizedList(new LinkedList(…));</code></p>\n\n<p>特点：寻址困难，插入和删除容易。</p>\n\n<p><strong>ArrayList</strong>实现了可变大小的数组。它允许所有元素，包括null。ArrayList没有同步。</p>\n\n<p>size，isEmpty，get，set方法运行时间为常数。但是add方法开销为分摊的常数，添加n个元素需要O(n)的时间。其他的方法运行时间为线性。</p>\n\n<p>每个<strong>ArrayList</strong>实例都有一个容量（Capacity），即用于存储元素的数组的大小。这个容量可随着不断添加新元素而自动增加，但是增长算法并没有定义。当需要插入大量元素时，在插入前可以调用ensureCapacity方法来增加ArrayList的容量以提高插入效率。</p>\n\n<p>和LinkedList一样，<strong>ArrayList</strong>也是非同步的（unsynchronized）。</p>\n\n<p>特点是：寻址容易，插入和删除困难；</p>\n\n<h4 id=\"string-str--new-stringabc-创建了几个对象\"><strong>String str = new String(“abc”); 创建了几个对象</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/limingchuan123456789/article/details/14150327\">面试题之String str = new String(“abc”); 创建了几个对象</a></p>\n\n<h4 id=\"hashmap和hashtable的区别\"><strong>HashMap和Hashtable的区别</strong></h4>\n\n<p><strong>Hashtable</strong>继承Map接口，实现一个key-value映射的哈希表。任何非空（non-null）的对象都可作为key或者value。添加数据使用put(key,value)，取出数据使用get(key)，这两个基本操作的时间开销为常数。</p>\n\n<p><strong>Hashtable</strong> 通过initial capacity和load factor两个参数调整性能。通常缺省的load factor 0.75较好地实现了时间和空间的均衡。增大load factor可以节省空间但相应的查找时间将增大，这会影响像get和put这样的操作。</p>\n\n<p>作为key的对象将通过计算其散列函数来确定与之对应的value的位置，因此任何作为key的对象都必须实现hashCode和equals方法。</p>\n\n<p><strong>Hashtable</strong>是同步的。</p>\n\n<p><strong>HashMap</strong>和Hashtable类似，不同之处在于HashMap是非同步的，并且允许null，即null value和null key。其迭代子操作时间开销和HashMap 的容量成比例,因此，不要将HashMap的初始化容量设得过高，或者load factor过低。</p>\n\n<h4 id=\"有哪些方法创建线程\"><strong>有哪些方法创建线程？</strong></h4>\n\n<p>仅仅只有<strong>new thread</strong>这种方法创建线程</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ThreadCreationQuestion</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// main 线程 -&gt; 子线程</span>\n        <span class=\"nc\">Thread</span> <span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n        <span class=\"o\">},</span> <span class=\"s\">\"子线程-1\"</span><span class=\"o\">);</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n     * 不鼓励自定义（扩展） Thread\n     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">MyThread</span> <span class=\"kd\">extends</span> <span class=\"nc\">Thread</span> <span class=\"o\">{</span>\n\n        <span class=\"cm\">/**\n         * 多态的方式，覆盖父类实现\n         */</span>\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n            <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>与运行线程方法区分：\n<strong>java.lang.Runnable()</strong> 或 <strong>java.lang.Thread类</strong></p>\n\n<h4 id=\"线程池的优点如何创建一个线程池\"><strong>线程池的优点？如何创建一个线程池？</strong></h4>\n\n<p>1）避免线程的创建和销毁带来的性能开销。</p>\n\n<p>2）避免大量的线程间因互相抢占系统资源导致的阻塞现象。</p>\n\n<p>3｝能够对线程进行简单的管理并提供定时执行、间隔执行等功能。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nc\">ExecutorService</span> <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newCachedThreadPool</span><span class=\"o\">();</span> <span class=\"c1\">//可根据需要创建新线程的线程池</span>\n<span class=\"nc\">ExecutorService</span> <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newSingleThreadExecutor</span><span class=\"o\">();</span> <span class=\"c1\">//创建是一个单线程池</span>\n<span class=\"nc\">ExecutorService</span> <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newFixedThreadPool</span><span class=\"o\">();</span><span class=\"c1\">//创建固定大小的线程池</span>\n<span class=\"nc\">ExecutorService</span> <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"nc\">Executors</span><span class=\"o\">.</span><span class=\"na\">newScheduledThreadPool</span><span class=\"o\">();</span><span class=\"c1\">//创建一个大小无限的线程池</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><a href=\"https://www.jianshu.com/p/b8197dd2934c\">线程、多线程与线程池总结</a></p>\n\n<h4 id=\"sleep-和-wait-的区别\"><strong>sleep() 和 wait() 的区别</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/xyh269/article/details/52613507\">sleep() 和 wait() 的区别</a></p>\n\n<h4 id=\"springmvc-工作原理\"><strong>SpringMVC 工作原理</strong></h4>\n\n<p>客户端发送请求-&gt; 前端控制器 DispatcherServlet 接受客户端请求 -&gt; 找到处理器映射 HandlerMapping 解析请求对应的 Handler-&gt; HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑 -&gt; 处理器返回一个模型视图 ModelAndView -&gt; 视图解析器进行解析 -&gt; 返回一个视图对象-&gt;前端控制器 DispatcherServlet 渲染数据（Moder）-&gt;将得到视图对象返回给用户</p>\n\n<h4 id=\"spring-的理解\"><strong>Spring 的理解</strong></h4>\n\n<p><a href=\"https://www.zhihu.com/question/48427693?sort=created\">怎么回答面试官：你对Spring的理解？</a></p>\n\n<h4 id=\"分布式事务原理\"><strong>分布式事务原理</strong></h4>\n\n<p><a href=\"https://yq.aliyun.com/articles/608863\">分布式事务：分布式事务原理概述</a></p>\n\n<h4 id=\"如何设计接口如何考虑接口安全性\"><strong>如何设计接口？如何考虑接口安全性？</strong></h4>\n\n<p><a href=\"https://www.zhihu.com/question/31363461\">如何设计出一些优雅的API接口呢？</a></p>\n\n<p><a href=\"https://www.cnblogs.com/longshiyVip/p/5374523.html\">如何设计好的RESTful API之安全性</a></p>\n\n<h2 id=\"福米科技\">福米科技</h2>\n\n<p>虽然推迟了半个小时面试，但是这个面试官很耐心，等我答完后，把他的观点阐述，面试就应该这样，相互学习才是面试的最高境界。</p>\n\n<h4 id=\"自我介绍-7\"><strong>自我介绍</strong></h4>\n\n<h4 id=\"乐观锁和悲观锁\"><strong>乐观锁和悲观锁</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/qlqwjy/p/7798266.html\">乐观锁和悲观锁的区别</a></p>\n\n<h4 id=\"mysql出现索引失效情况\"><strong>mysql出现索引失效情况</strong></h4>\n\n<ul>\n  <li>\n    <p>如果条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)。要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引。</p>\n  </li>\n  <li>\n    <p>对于多列索引，不是使用的第一部分，则不会使用索引。</p>\n  </li>\n  <li>\n    <p>like 查询以 % 开头。</p>\n  </li>\n  <li>\n    <p>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来，否则不使用索引。</p>\n  </li>\n  <li>\n    <p>如果mysql估计使用全表扫描要比使用索引快，则不使用索引。</p>\n  </li>\n</ul>\n\n<h4 id=\"解释下字符串不加单引号是如何造成索引失效\"><strong>解释下“字符串不加单引号”是如何造成索引失效</strong></h4>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre>SELECT * from staffs where name='2000';\nSELECT * from staffs where name=2000;\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>这两条语句都会查询出正确结果，但第二条没有用到索引。因为mysql会在底层对其进行隐式的类型转换。</p>\n\n<h4 id=\"查询一张表中是否有重复数据场景一张表中有-id-和-name-两个字段查询出-name-重复的所有数据\"><strong>查询一张表中是否有重复数据？场景：一张表中有 id 和 name 两个字段，查询出 name 重复的所有数据</strong></h4>\n\n<p><a href=\"https://www.cnblogs.com/wangfuyou/p/6058169.html\">sql 查出一张表中重复的所有记录数据</a></p>\n\n<h4 id=\"多线程\"><strong>多线程</strong></h4>\n\n<p><a href=\"https://www.jianshu.com/p/b8197dd2934c\">线程、多线程与线程池总结</a></p>\n\n<h4 id=\"如何创建的一个线程池非调用接口\"><strong>如何创建的一个线程池？（非调用接口）</strong></h4>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"nf\">ThreadPoolExecutor</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">corePoolSize</span><span class=\"o\">,</span>\n                          <span class=\"kt\">int</span> <span class=\"n\">maximumPoolSize</span><span class=\"o\">,</span>\n                          <span class=\"kt\">long</span> <span class=\"n\">keepAliveTime</span><span class=\"o\">,</span>\n                          <span class=\"nc\">TimeUnit</span> <span class=\"n\">unit</span><span class=\"o\">,</span>\n                          <span class=\"nc\">BlockingQueue</span><span class=\"o\">&lt;</span><span class=\"nc\">Runnable</span><span class=\"o\">&gt;</span> <span class=\"n\">workQueue</span><span class=\"o\">,</span>\n                          <span class=\"nc\">ThreadFactory</span> <span class=\"n\">threadFactory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">corePoolSize</span><span class=\"o\">,</span> <span class=\"n\">maximumPoolSize</span><span class=\"o\">,</span> <span class=\"n\">keepAliveTime</span><span class=\"o\">,</span> <span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">workQueue</span><span class=\"o\">,</span> \n        <span class=\"n\">threadFactory</span><span class=\"o\">,</span> <span class=\"n\">defaultHandler</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>1）corePoolSize：线程池的核心线程数，一般情况下不管有没有任务都会一直在线程池中一直存活，只有在 ThreadPoolExecutor 中的方法 allowCoreThreadTimeOut(boolean value) 设置为 true 时，闲置的核心线程会存在超时机制，如果在指定时间没有新任务来时，核心线程也会被终止，而这个时间间隔由第3个属性 keepAliveTime 指定。</p>\n\n<p>2）maximumPoolSize：线程池所能容纳的最大线程数，当活动的线程数达到这个值后，后续的新任务将会被阻塞。</p>\n\n<p>3）keepAliveTime：控制线程闲置时的超时时长，超过则终止该线程。一般情况下用于非核心线程，只有在 ThreadPoolExecutor 中的方法 allowCoreThreadTimeOut(boolean value) 设置为 true时，也作用于核心线程。</p>\n\n<p>4）unit：用于指定 keepAliveTime 参数的时间单位，TimeUnit 是个 enum 枚举类型，常用的有：TimeUnit.HOURS(小时)、TimeUnit.MINUTES(分钟)、TimeUnit.SECONDS(秒) 和 TimeUnit.MILLISECONDS(毫秒)等。</p>\n\n<p>5）workQueue：线程池的任务队列，通过线程池的 execute(Runnable command) 方法会将任务 Runnable 存储在队列中。</p>\n\n<p>6）threadFactory：线程工厂，它是一个接口，用来为线程池创建新线程的。</p>\n\n<h4 id=\"多线程阻塞\"><strong>多线程阻塞？</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/haozhugogo/article/details/55050681\">JAVA多线程阻塞</a></p>\n\n<h4 id=\"集群分布式事务原理\"><strong>集群分布式事务原理</strong></h4>\n\n<p><a href=\"https://yq.aliyun.com/articles/608863\">分布式事务：分布式事务原理概述</a></p>\n\n<h4 id=\"并发控制锁策略什么情况下失效--为什么要使用分布式锁\"><strong>并发控制锁策略什么情况下失效 / 为什么要使用分布式锁?</strong></h4>\n\n<p>为了保证一个方法或属性在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用并发处理相关的功能进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的应用并不能提供分布式锁的能力。为了解决这个问题就需要一种跨机器的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p>\n\n<h4 id=\"实现分布式锁的方式\"><strong>实现分布式锁的方式</strong></h4>\n\n<p><a href=\"https://blog.csdn.net/wuzhiwei549/article/details/80692278\">三种实现分布式锁的方式</a></p>\n\n<h4 id=\"volatile\"><strong>volatile</strong></h4>\n\n<p>volatile关键字是线程同步的轻量级实现，所以volatile性能肯定比synchronized关键字要好。但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块。synchronized关键字在JavaSE1.6之后进行了优化，主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其它各种优化，执行效率有了显著提升，实际开发中使 用 synchronized 关键字的场景还是更多一些。</p>\n\n<p>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞。</p>\n\n<p>volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证。</p>\n\n<p>volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。</p>\n\n<p><a href=\"https://blog.csdn.net/suifeng3051/article/details/52611233\">volatile和synchronized的区别</a></p>\n",
      "desc"     : "  本文来自于我的慕课网手记：Java大厂面试（吐血超详细总结），转载请保留链接 ;)这是我今年从四月份开始，主要的大厂面试经历，有些企业面试的还没来得及整理，还有些没有带答案就发出来了，不管怎样，请各位先思考如果是你怎么回答面试官？这篇文章会持续更新，请各位持续关注，希望对你有所帮助！面试清单  平安产险  飞猪  上汽大通  浩鲸科技  杏仁医生  兴盛优先  御泥坊  拓维信息  陆金..."
} ,
  
  
  
    {
      "title"    : "非常实用的 Java 8 代码片段",
      "title-lower"    : "非常实用的 java 8 代码片段",
      "sub-titile" : "Java 8带来了很多的新特性，比如编译器、类库、开发工具和JVM。",
      "sub-titile-lower" : "java 8带来了很多的新特性，比如编译器、类库、开发工具和jvm。",
      "categories" : "",
      "tags"     : "Java, 代码片段",
      "url"      : "/zcblog/2019/03/31/java8/",
      "date"     : "2019-03-31 00:00:00 +0800",
      "content": "<h2 id=\"目录\">目录</h2>\n\n<h3 id=\"array-数组相关\">Array (数组相关)</h3>\n\n<ul>\n  <li><a href=\"#chunk\"><code class=\"highlighter-rouge\">chunk</code></a></li>\n  <li><a href=\"#countoccurrences\"><code class=\"highlighter-rouge\">countOccurrences</code></a></li>\n  <li><a href=\"#deepflatten\"><code class=\"highlighter-rouge\">deepFlatten</code></a></li>\n  <li><a href=\"#difference\"><code class=\"highlighter-rouge\">difference</code></a></li>\n  <li><a href=\"#differencewith\"><code class=\"highlighter-rouge\">differenceWith</code></a></li>\n  <li><a href=\"#distinctvaluesofarray\"><code class=\"highlighter-rouge\">distinctValuesOfArray</code></a></li>\n  <li><a href=\"#dropelements\"><code class=\"highlighter-rouge\">dropElements</code></a></li>\n  <li><a href=\"#dropright\"><code class=\"highlighter-rouge\">dropRight</code></a></li>\n  <li><a href=\"#everynth\"><code class=\"highlighter-rouge\">everyNth</code></a></li>\n  <li><a href=\"#filternonunique\"><code class=\"highlighter-rouge\">filterNonUnique</code></a></li>\n  <li><a href=\"#flatten\"><code class=\"highlighter-rouge\">flatten</code></a></li>\n  <li><a href=\"#flattendepth\"><code class=\"highlighter-rouge\">flattenDepth</code></a></li>\n  <li><a href=\"#groupby\"><code class=\"highlighter-rouge\">groupBy</code></a></li>\n  <li><a href=\"#initial\"><code class=\"highlighter-rouge\">initial</code></a></li>\n  <li><a href=\"#initializearraywithrange\"><code class=\"highlighter-rouge\">initializeArrayWithRange</code></a></li>\n  <li><a href=\"#initializearraywithvalues\"><code class=\"highlighter-rouge\">initializeArrayWithValues</code></a></li>\n  <li><a href=\"#intersection\"><code class=\"highlighter-rouge\">intersection</code></a></li>\n  <li><a href=\"#issorted\"><code class=\"highlighter-rouge\">isSorted</code></a></li>\n  <li><a href=\"#join\"><code class=\"highlighter-rouge\">join</code></a></li>\n  <li><a href=\"#nthelement\"><code class=\"highlighter-rouge\">nthElement</code></a></li>\n  <li><a href=\"#pick\"><code class=\"highlighter-rouge\">pick</code></a></li>\n  <li><a href=\"#reducedfilter\"><code class=\"highlighter-rouge\">reducedFilter</code></a></li>\n  <li><a href=\"#sample\"><code class=\"highlighter-rouge\">sample</code></a></li>\n  <li><a href=\"#samplesize\"><code class=\"highlighter-rouge\">sampleSize</code></a></li>\n  <li><a href=\"#shuffle\"><code class=\"highlighter-rouge\">shuffle</code></a></li>\n  <li><a href=\"#similarity\"><code class=\"highlighter-rouge\">similarity</code></a></li>\n  <li><a href=\"#sortedindex\"><code class=\"highlighter-rouge\">sortedIndex</code></a></li>\n  <li><a href=\"#symmetricdifference\"><code class=\"highlighter-rouge\">symmetricDifference</code></a></li>\n  <li><a href=\"#tail\"><code class=\"highlighter-rouge\">tail</code></a></li>\n  <li><a href=\"#take\"><code class=\"highlighter-rouge\">take</code></a></li>\n  <li><a href=\"#takeright\"><code class=\"highlighter-rouge\">takeRight</code></a></li>\n  <li><a href=\"#union\"><code class=\"highlighter-rouge\">union</code></a></li>\n  <li><a href=\"#without\"><code class=\"highlighter-rouge\">without</code></a></li>\n  <li><a href=\"#zip\"><code class=\"highlighter-rouge\">zip</code></a></li>\n  <li><a href=\"#zipobject\"><code class=\"highlighter-rouge\">zipObject</code></a></li>\n</ul>\n\n<h3 id=\"math-数学相关\">Math (数学相关)</h3>\n\n<ul>\n  <li><a href=\"#average\"><code class=\"highlighter-rouge\">average</code></a></li>\n  <li><a href=\"#gcd\"><code class=\"highlighter-rouge\">gcd</code></a></li>\n  <li><a href=\"#lcm\"><code class=\"highlighter-rouge\">lcm</code></a></li>\n  <li><a href=\"#findnextpositivepoweroftwo\"><code class=\"highlighter-rouge\">findNextPositivePowerOfTwo</code></a></li>\n  <li><a href=\"#iseven\"><code class=\"highlighter-rouge\">isEven</code></a></li>\n  <li><a href=\"#ispoweroftwo\"><code class=\"highlighter-rouge\">isPowerOfTwo</code></a></li>\n  <li><a href=\"#generaterandomint\"><code class=\"highlighter-rouge\">generateRandomInt</code></a></li>\n</ul>\n\n<h3 id=\"string-字符串相关\">String (字符串相关)</h3>\n\n<ul>\n  <li><a href=\"#anagrams\"><code class=\"highlighter-rouge\">anagrams</code></a></li>\n  <li><a href=\"#bytesize\"><code class=\"highlighter-rouge\">byteSize</code></a></li>\n  <li><a href=\"#capitalize\"><code class=\"highlighter-rouge\">capitalize</code></a></li>\n  <li><a href=\"#capitalizeeveryword\"><code class=\"highlighter-rouge\">capitalizeEveryWord</code></a></li>\n  <li><a href=\"#countvowels\"><code class=\"highlighter-rouge\">countVowels</code></a></li>\n  <li><a href=\"#escaperegexp\"><code class=\"highlighter-rouge\">escapeRegExp</code></a></li>\n  <li><a href=\"#fromcamelcase\"><code class=\"highlighter-rouge\">fromCamelCase</code></a></li>\n  <li><a href=\"#isabsoluteurl\"><code class=\"highlighter-rouge\">isAbsoluteURL</code></a></li>\n  <li><a href=\"#islowercase\"><code class=\"highlighter-rouge\">isLowerCase</code></a></li>\n  <li><a href=\"#isuppercase\"><code class=\"highlighter-rouge\">isUpperCase</code></a></li>\n  <li><a href=\"#ispalindrome\"><code class=\"highlighter-rouge\">isPalindrome</code></a></li>\n  <li><a href=\"#isnumeric\"><code class=\"highlighter-rouge\">isNumeric</code></a></li>\n  <li><a href=\"#mask\"><code class=\"highlighter-rouge\">mask</code></a></li>\n  <li><a href=\"#reversestring\"><code class=\"highlighter-rouge\">reverseString</code></a></li>\n  <li><a href=\"#sortcharactersinstring\"><code class=\"highlighter-rouge\">sortCharactersInString</code></a></li>\n  <li><a href=\"#splitlines\"><code class=\"highlighter-rouge\">splitLines</code></a></li>\n  <li><a href=\"#tocamelcase\"><code class=\"highlighter-rouge\">toCamelCase</code></a></li>\n  <li><a href=\"#tokebabcase\"><code class=\"highlighter-rouge\">toKebabCase</code></a></li>\n  <li><a href=\"#match\"><code class=\"highlighter-rouge\">match</code></a></li>\n  <li><a href=\"#tosnakecase\"><code class=\"highlighter-rouge\">toSnakeCase</code></a></li>\n  <li><a href=\"#truncatestring\"><code class=\"highlighter-rouge\">truncateString</code></a></li>\n  <li><a href=\"#words\"><code class=\"highlighter-rouge\">words</code></a></li>\n  <li><a href=\"#stringtointegers\"><code class=\"highlighter-rouge\">stringToIntegers</code></a></li>\n</ul>\n\n<h3 id=\"io-io流相关\">IO (IO流相关)</h3>\n\n<ul>\n  <li><a href=\"#convertinputstreamtostring\"><code class=\"highlighter-rouge\">convertInputStreamToString</code></a></li>\n  <li><a href=\"#readfileasstring\"><code class=\"highlighter-rouge\">readFileAsString</code></a></li>\n  <li><a href=\"#getcurrentworkingdirectorypath\"><code class=\"highlighter-rouge\">getCurrentWorkingDirectoryPath</code></a></li>\n  <li><a href=\"#tmpdirname\"><code class=\"highlighter-rouge\">tmpDirName</code></a></li>\n</ul>\n\n<h3 id=\"exception-异常相关\">Exception (异常相关)</h3>\n\n<ul>\n  <li><a href=\"#stacktraceasstring\"><code class=\"highlighter-rouge\">stackTraceAsString</code></a></li>\n</ul>\n\n<h3 id=\"system-系统相关\">System (系统相关)</h3>\n\n<ul>\n  <li><a href=\"#osname\"><code class=\"highlighter-rouge\">osName</code></a></li>\n  <li><a href=\"#isdebuggerenabled\"><code class=\"highlighter-rouge\">isDebuggerEnabled</code></a></li>\n</ul>\n\n<h3 id=\"class-类相关\">Class (类相关)</h3>\n\n<ul>\n  <li><a href=\"#getallinterfaces\"><code class=\"highlighter-rouge\">getAllInterfaces</code></a></li>\n  <li><a href=\"#isinnerclass\"><code class=\"highlighter-rouge\">IsInnerClass</code></a></li>\n</ul>\n\n<h3 id=\"enum-枚举相关\">Enum (枚举相关)</h3>\n\n<ul>\n  <li><a href=\"#getenummap\"><code class=\"highlighter-rouge\">getEnumMap</code></a></li>\n</ul>\n\n<h2 id=\"array\">Array</h2>\n\n<h3 id=\"chunk\">chunk</h3>\n\n<p>将数组分割成特定大小的小数组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"nf\">chunk</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">numbers</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">iterate</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">size</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">limit</span><span class=\"o\">((</span><span class=\"kt\">long</span><span class=\"o\">)</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">ceil</span><span class=\"o\">((</span><span class=\"kt\">double</span><span class=\"o\">)</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"n\">size</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">mapToObj</span><span class=\"o\">(</span><span class=\"n\">cur</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOfRange</span><span class=\"o\">(</span><span class=\"n\">numbers</span><span class=\"o\">,</span> <span class=\"n\">cur</span><span class=\"o\">,</span> <span class=\"n\">cur</span> <span class=\"o\">+</span> <span class=\"n\">size</span> <span class=\"o\">&gt;</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">?</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">:</span> <span class=\"n\">cur</span> <span class=\"o\">+</span> <span class=\"n\">size</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]::</span><span class=\"k\">new</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"concat\">concat</h3>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">concat</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">second</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"na\">concat</span><span class=\"o\">(</span>\n            <span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">),</span>\n            <span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">second</span><span class=\"o\">)</span>\n    <span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[])</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOf</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Object</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">()));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"countoccurrences\">countOccurrences</h3>\n\n<p>计算数组中某个值出现的次数。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream().filter().count()</code> 计算等于指定值的值的总数。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">long</span> <span class=\"nf\">countOccurrences</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">numbers</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">numbers</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">number</span> <span class=\"o\">-&gt;</span> <span class=\"n\">number</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">count</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"deepflatten\">deepFlatten</h3>\n\n<p>数组扁平化。</p>\n\n<p>使用递归实现，<code class=\"highlighter-rouge\">Arrays.stream().flatMapToInt()</code></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">deepFlatten</span><span class=\"o\">(</span><span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">flatMapToInt</span><span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"k\">instanceof</span> <span class=\"nc\">Object</span><span class=\"o\">[])</span> <span class=\"o\">{</span>\n                    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">deepFlatten</span><span class=\"o\">((</span><span class=\"nc\">Object</span><span class=\"o\">[])</span> <span class=\"n\">o</span><span class=\"o\">));</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">((</span><span class=\"nc\">Integer</span><span class=\"o\">)</span> <span class=\"n\">o</span><span class=\"o\">);</span>\n            <span class=\"o\">}).</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"difference\">difference</h3>\n\n<p>返回两个数组之间的差异。</p>\n\n<p>从 b 中创建一个集合，然后在 a 上使用 <code class=\"highlighter-rouge\">Arrays.stream().filter()</code> 只保留 b 中不包含的值。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">difference</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">second</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">second</span><span class=\"o\">).</span><span class=\"na\">boxed</span><span class=\"o\">().</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toSet</span><span class=\"o\">());</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"o\">!</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"differencewith\">differenceWith</h3>\n\n<p>从比较器函数不返回true的数组中筛选出所有值。</p>\n\n<p>int的比较器是使用IntbinaryPerator函数来实现的。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream().filter()</code> 和 <code class=\"highlighter-rouge\">Arrays.stream().noneMatch()</code> 查找相应的值。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">differenceWith</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">second</span><span class=\"o\">,</span> <span class=\"nc\">IntBinaryOperator</span> <span class=\"n\">comparator</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">second</span><span class=\"o\">)</span>\n                            <span class=\"o\">.</span><span class=\"na\">noneMatch</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">-&gt;</span> <span class=\"n\">comparator</span><span class=\"o\">.</span><span class=\"na\">applyAsInt</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"distinctvaluesofarray\">distinctValuesOfArray</h3>\n\n<p>返回数组的所有不同值。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream().distinct()</code> 去除所有重复的值。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">distinctValuesOfArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">).</span><span class=\"na\">distinct</span><span class=\"o\">().</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"dropelements\">dropElements</h3>\n\n<p>移除数组中的元素，直到传递的函数返回true为止。返回数组中的其余元素。</p>\n\n<p>使用数组循环遍历数组，将数组的第一个元素删除，直到函数返回的值为真为止。返回其余的元素。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">dropElements</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"nc\">IntPredicate</span> <span class=\"n\">condition</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">condition</span><span class=\"o\">.</span><span class=\"na\">test</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n        <span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOfRange</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">elements</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"dropright\">dropRight</h3>\n\n<p>返回一个新数组，从右边移除n个元素。</p>\n\n<p>检查n是否短于给定的数组，并使用 <code class=\"highlighter-rouge\">Array.copyOfRange()</code> 以便对其进行相应的切片或返回一个空数组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">dropRight</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IllegalArgumentException</span><span class=\"o\">(</span><span class=\"s\">\"n is less than 0\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span>\n            <span class=\"o\">?</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOfRange</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n            <span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"everynth\">everyNth</h3>\n\n<p>返回数组中的每个第n个元素。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">IntStream.range().filter()</code> 创建一个新数组，该数组包含给定数组的每个第n个元素。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">everyNth</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">nth</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n     <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span>\n             <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">nth</span> <span class=\"o\">==</span> <span class=\"n\">nth</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n             <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">elements</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n             <span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"indexof\">indexOf</h3>\n\n<p>查找数组中元素的索引，在不存在元素的情况下返回-1。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">IntStream.range().filter()</code> 查找数组中元素的索引。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">indexOf</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">el</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">-&gt;</span> <span class=\"n\">elements</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">el</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">findFirst</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">orElse</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"lastindexof\">lastIndexOf</h3>\n\n<p>查找数组中元素的最后索引，在不存在元素的情况下返回-1。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">IntStream.iterate().limit().filter()</code> 查找数组中元素的索引。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">lastIndexOf</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">el</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">iterate</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">limit</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">-&gt;</span> <span class=\"n\">elements</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">el</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">findFirst</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">orElse</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"filternonunique\">filterNonUnique</h3>\n\n<p>筛选出数组中的非唯一值。</p>\n\n<p>对只包含唯一值的数组使用 <code class=\"highlighter-rouge\">Arrays.stream().filter()</code>。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">filterNonUnique</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"o\">-&gt;</span> <span class=\"n\">indexOf</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"n\">el</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">lastIndexOf</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"n\">el</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"flatten\">flatten</h3>\n\n<p>使数组扁平。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream().flatMapToInt().toArray()</code> 创建一个新数组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">flatten</span><span class=\"o\">(</span><span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">flatMapToInt</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"o\">-&gt;</span> <span class=\"n\">el</span> <span class=\"k\">instanceof</span> <span class=\"kt\">int</span><span class=\"o\">[]</span>\n                    <span class=\"o\">?</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">((</span><span class=\"kt\">int</span><span class=\"o\">[])</span> <span class=\"n\">el</span><span class=\"o\">)</span>\n                    <span class=\"o\">:</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">((</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">el</span><span class=\"o\">)</span>\n            <span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"flattendepth\">flattenDepth</h3>\n\n<p>将数组压平到指定的深度。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"nf\">flattenDepth</span><span class=\"o\">(</span><span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">depth</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">elements</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">flatMap</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"o\">-&gt;</span> <span class=\"n\">el</span> <span class=\"k\">instanceof</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span>\n                    <span class=\"o\">?</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">flattenDepth</span><span class=\"o\">((</span><span class=\"nc\">Object</span><span class=\"o\">[])</span> <span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">depth</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                    <span class=\"o\">:</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Object</span><span class=\"o\">[]{</span><span class=\"n\">el</span><span class=\"o\">})</span>\n            <span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"groupby\">groupBy</h3>\n\n<p>根据给定函数对数组元素进行分组。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream().collect(Collectors.groupingBy())</code> 分组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"no\">R</span><span class=\"o\">,</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;&gt;</span> <span class=\"nf\">groupBy</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"nc\">Function</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">func</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">).</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">groupingBy</span><span class=\"o\">(</span><span class=\"n\">func</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"initial\">initial</h3>\n\n<p>返回数组中除去最后一个的所有元素。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.copyOfRange()</code> 返回除最后一个之外的所有元素。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">initial</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOfRange</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"initializearraywithrange\">initializeArrayWithRange</h3>\n\n<p>初始化一个数组，该数组包含在指定范围内的数字，传入 <code class=\"highlighter-rouge\">start</code> 和 <code class=\"highlighter-rouge\">end</code>。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">initializeArrayWithRange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">rangeClosed</span><span class=\"o\">(</span><span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"initializearraywithvalues\">initializeArrayWithValues</h3>\n\n<p>使用指定的值初始化并填充数组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">initializeArrayWithValues</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">generate</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">value</span><span class=\"o\">).</span><span class=\"na\">limit</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"intersection\">intersection</h3>\n\n<p>返回两个数组中存在的元素列表。</p>\n\n<p>从第二步创建一个集合，然后在 a 上使用 <code class=\"highlighter-rouge\">Arrays.stream().filter()</code> 来保存包含在 b 中的值。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">intersection</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">second</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">second</span><span class=\"o\">).</span><span class=\"na\">boxed</span><span class=\"o\">().</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toSet</span><span class=\"o\">());</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"nl\">set:</span><span class=\"o\">:</span><span class=\"n\">contains</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"issorted\">isSorted</h3>\n\n<p>如果数组按升序排序，则返回 <code class=\"highlighter-rouge\">1</code>，如果数组按降序排序，返回 <code class=\"highlighter-rouge\">-1</code>，如果没有排序，则返回 <code class=\"highlighter-rouge\">0</code>。</p>\n\n<p>计算前两个元素的排序 <code class=\"highlighter-rouge\">direction</code>。使用for循环对数组进行迭代，并对它们进行成对比较。如果 <code class=\"highlighter-rouge\">direction</code> 发生变化，则返回 <code class=\"highlighter-rouge\">0</code>，\n如果到达最后一个元素，则返回 <code class=\"highlighter-rouge\">direction</code>。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span> <span class=\"kd\">extends</span> <span class=\"nc\">Comparable</span><span class=\"o\">&lt;?</span> <span class=\"kd\">super</span> <span class=\"no\">T</span><span class=\"o\">&gt;&gt;</span> <span class=\"kt\">int</span> <span class=\"nf\">isSorted</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">direction</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"no\">T</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">direction</span><span class=\"o\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">((</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"n\">direction</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">direction</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"join\">join</h3>\n\n<p>将数组的所有元素连接到字符串中，并返回此字符串。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">IntStream.range</code> 创建一个指定索引的数组。然后，使用 <code class=\"highlighter-rouge\">Stream.reduce</code> 将元素组合成字符串。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nc\">String</span> <span class=\"nf\">join</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">separator</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">mapToObj</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">SimpleEntry</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))</span>\n            <span class=\"o\">.</span><span class=\"na\">reduce</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span>\n                    <span class=\"o\">?</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">end</span>\n                    <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">separator</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">fst</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"nthelement\">nthElement</h3>\n\n<p>返回数组的第n个元素。</p>\n\n<p>Use <code class=\"highlighter-rouge\">Arrays.copyOfRange()</code> 优先得到包含第n个元素的数组。</p>\n\n<pre><code class=\"language-Java\">public static &lt;T&gt; T nthElement(T[] arr, int n) {\n    if (n &gt; 0) {\n        return Arrays.copyOfRange(arr, n, arr.length)[0];\n    }\n    return Arrays.copyOfRange(arr, arr.length + n, arr.length)[0];\n}\n</code></pre>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"pick\">pick</h3>\n\n<p>从对象中选择与给定键对应的键值对。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream</code> 过滤 <code class=\"highlighter-rouge\">arr</code> 中存在的所有键。然后，使用 <code class=\"highlighter-rouge\">Collectors.toMap</code> 将所有的key转换为Map。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nf\">pick</span><span class=\"o\">(</span><span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">obj</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"nl\">obj:</span><span class=\"o\">:</span><span class=\"n\">containsKey</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toMap</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">-&gt;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"nl\">obj:</span><span class=\"o\">:</span><span class=\"n\">get</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"reducedfilter\">reducedFilter</h3>\n\n<p>根据条件筛选对象数组，同时筛选出未指定的键。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream().filter()</code> 根据谓词 <code class=\"highlighter-rouge\">fn</code> 过滤数组，以便返回条件为真的对象。\n对于每个过滤的Map对象，创建一个新的Map，其中包含 <code class=\"highlighter-rouge\">keys</code> 中的键。最后，将Map对象收集到一个数组中。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">&gt;[]</span> <span class=\"nf\">reducedFilter</span><span class=\"o\">(</span><span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">&gt;[]</span> <span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">keys</span><span class=\"o\">,</span> <span class=\"nc\">Predicate</span><span class=\"o\">&lt;</span><span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">fn</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">keys</span><span class=\"o\">).</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"nl\">el:</span><span class=\"o\">:</span><span class=\"n\">containsKey</span><span class=\"o\">)</span>\n                    <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toMap</span><span class=\"o\">(</span><span class=\"nc\">Function</span><span class=\"o\">.</span><span class=\"na\">identity</span><span class=\"o\">(),</span> <span class=\"nl\">el:</span><span class=\"o\">:</span><span class=\"n\">get</span><span class=\"o\">)))</span>\n            <span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">((</span><span class=\"nc\">IntFunction</span><span class=\"o\">&lt;</span><span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">&gt;[]&gt;)</span> <span class=\"nc\">Map</span><span class=\"o\">[]::</span><span class=\"k\">new</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"sample\">sample</h3>\n\n<p>从数组中返回一个随机元素。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Math.Randoman()</code> 生成一个随机数，然后将它乘以数组的 <code class=\"highlighter-rouge\">length</code>，然后使用 <code class=\"highlighter-rouge\">Math.floor()</code> 获得一个最近的整数，该方法也适用于字符串。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span> <span class=\"nf\">sample</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"o\">[(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">floor</span><span class=\"o\">(</span><span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">random</span><span class=\"o\">()</span> <span class=\"o\">*</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)];</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"samplesize\">sampleSize</h3>\n\n<p>从 <code class=\"highlighter-rouge\">array</code> 到 <code class=\"highlighter-rouge\">array</code> 大小的唯一键获取 <code class=\"highlighter-rouge\">n</code> 个随机元素。</p>\n\n<p>根据<a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\">Fisher-Yates算法</a>，使用 <code class=\"highlighter-rouge\">Array.copyOfRange()</code> 获得优先的 <code class=\"highlighter-rouge\">n</code> 个元素。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">sampleSize</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOf</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">floor</span><span class=\"o\">(</span><span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">random</span><span class=\"o\">()</span> <span class=\"o\">*</span> <span class=\"n\">m</span><span class=\"o\">--);</span>\n        <span class=\"no\">T</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">];</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOfRange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"n\">length</span> <span class=\"o\">?</span> <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"shuffle\">shuffle</h3>\n\n<p>将数组值的顺序随机化，返回一个新数组。</p>\n\n<p>根据 <a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\">Fisher-Yates 算法</a> 重新排序数组的元素。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">shuffle</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOf</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">floor</span><span class=\"o\">(</span><span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">random</span><span class=\"o\">()</span> <span class=\"o\">*</span> <span class=\"n\">m</span><span class=\"o\">--);</span>\n        <span class=\"no\">T</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">];</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"similarity\">similarity</h3>\n\n<p>返回出现在两个数组中的元素数组。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream().filter()</code> 移除，然后使用 <code class=\"highlighter-rouge\">Arrays.stream().anyMatch()</code> 匹配 <code class=\"highlighter-rouge\">second</code> 部分的值。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">similarity</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">second</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">second</span><span class=\"o\">).</span><span class=\"na\">anyMatch</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Objects</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n            <span class=\"c1\">// Make a new array of first's runtime type, but empty content:</span>\n            <span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[])</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOf</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Object</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">()));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"sortedindex\">sortedIndex</h3>\n\n<p>返回值应该插入到数组中的最低索引，以保持其排序顺序。</p>\n\n<p>检查数组是否按降序（松散地）排序。 使用 <code class=\"highlighter-rouge\">IntStream.range().filter()</code> 来找到元素应该被插入的合适的索引。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span> <span class=\"kd\">extends</span> <span class=\"nc\">Comparable</span><span class=\"o\">&lt;?</span> <span class=\"kd\">super</span> <span class=\"no\">T</span><span class=\"o\">&gt;&gt;</span> <span class=\"kt\">int</span> <span class=\"nf\">sortedIndex</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"no\">T</span> <span class=\"n\">el</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">boolean</span> <span class=\"n\">isDescending</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">isDescending</span> <span class=\"o\">?</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">findFirst</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">orElse</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"symmetricdifference\">symmetricDifference</h3>\n\n<p>返回两个数组之间的对称差异。</p>\n\n<p>从每个数组中创建一个 <code class=\"highlighter-rouge\">Set</code>，然后使用 <code class=\"highlighter-rouge\">Arrays.stream().filter()</code> 来保持其他值不包含的值。最后，连接两个数组并创建一个新数组并返回。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">symmetricDifference</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">second</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">sA</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&gt;(</span><span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">));</span>\n    <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">sB</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&gt;(</span><span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">second</span><span class=\"o\">));</span>\n\n    <span class=\"k\">return</span> <span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"na\">concat</span><span class=\"o\">(</span>\n            <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">).</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"o\">!</span><span class=\"n\">sB</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)),</span>\n            <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">second</span><span class=\"o\">).</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">-&gt;</span> <span class=\"o\">!</span><span class=\"n\">sA</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[])</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOf</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Object</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">()));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"tail\">tail</h3>\n\n<p>返回数组中除第一个元素外的所有元素。</p>\n\n<p>如果数组的长度大于1，则返回 <code class=\"highlighter-rouge\">Arrays.copyOfRange(1)</code>，否则返回整个数组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">tail</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n            <span class=\"o\">?</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOfRange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"take\">take</h3>\n\n<p>返回一个从开头删除n个元素的数组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">take</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOfRange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"takeright\">takeRight</h3>\n\n<p>返回从末尾移除n个元素的数组。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.copyOfRange()</code> 用从末尾取来的 <code class=\"highlighter-rouge\">N</code> 个元素来创建一个数组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">takeRight</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOfRange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"union\">union</h3>\n\n<p>返回两个数组中任何一个中存在的每个元素一次。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">a</code> 和 <code class=\"highlighter-rouge\">b</code> 的所有值创建一个 <code class=\"highlighter-rouge\">Set</code>，并将其转换为数组。</p>\n\n<pre><code class=\"language-Java\">public static &lt;T&gt; T[] union(T[] first, T[] second) {\n    Set&lt;T&gt; set = new HashSet&lt;&gt;(Arrays.asList(first));\n    set.addAll(Arrays.asList(second));\n    return set.toArray((T[]) Arrays.copyOf(new Object[0], 0, first.getClass()));\n}\n</code></pre>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"without\">without</h3>\n\n<p>筛选出具有指定值之一的数组的元素。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.strean().filter()</code> 创建一个数组，排除(使用 <code class=\"highlighter-rouge\">!Arrays.asList(elements).contains()</code>)所有命中的值。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"nf\">without</span><span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">...</span> <span class=\"n\">elements</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">excludeElements</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">);</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"o\">-&gt;</span> <span class=\"o\">!</span><span class=\"n\">excludeElements</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">[])</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOf</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Object</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">()));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"zip\">zip</h3>\n\n<p>根据原始数组中的位置创建元素数组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Object</span><span class=\"o\">[]&gt;</span> <span class=\"nf\">zip</span><span class=\"o\">(</span><span class=\"nc\">Object</span><span class=\"o\">[]...</span> <span class=\"n\">arrays</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">OptionalInt</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">arrays</span><span class=\"o\">).</span><span class=\"na\">mapToInt</span><span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">-&gt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">).</span><span class=\"na\">max</span><span class=\"o\">();</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">max</span><span class=\"o\">.</span><span class=\"na\">getAsInt</span><span class=\"o\">())</span>\n            <span class=\"o\">.</span><span class=\"na\">mapToObj</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">arrays</span><span class=\"o\">)</span>\n                    <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">?</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                    <span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">())</span>\n            <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toList</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"zipobject\">zipObject</h3>\n\n<p>给定有效的属性标识符数组和值数组，返回将属性与值关联的对象。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">&gt;</span> <span class=\"nf\">zipObject</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">props</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">values</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">mapToObj</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">SimpleEntry</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">props</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">?</span> <span class=\"n\">values</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span>\n                    <span class=\"nl\">HashMap:</span><span class=\"o\">:</span><span class=\"k\">new</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">(),</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()),</span> <span class=\"nl\">HashMap:</span><span class=\"o\">:</span><span class=\"n\">putAll</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h2 id=\"maths\">Maths</h2>\n\n<h3 id=\"average\">average</h3>\n\n<p>返回两个或两个以上数字的平均值。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">double</span> <span class=\"nf\">average</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">average</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">orElseThrow</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">IllegalArgumentException</span><span class=\"o\">(</span><span class=\"s\">\"Array is empty\"</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"gcd\">gcd</h3>\n\n<p>计算一系列数字的最大公约数(gcd)。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream().reduce()</code> 和 GCD（使用递归公式）计算一组数字的最大公约数。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">OptionalInt</span> <span class=\"nf\">gcd</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">numbers</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">numbers</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">reduce</span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">gcd</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"nf\">gcd</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"lcm\">lcm</h3>\n\n<p>计算数字数组的最低公共倍数(LCM)。</p>\n\n<p>使用 <code class=\"highlighter-rouge\">Arrays.stream().reduce()</code> 和 LCM公式(使用递归)来计算数字数组的最低公共倍数。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">OptionalInt</span> <span class=\"nf\">lcm</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">numbers</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">IntBinaryOperator</span> <span class=\"n\">lcm</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">);</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">numbers</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">reduce</span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">lcm</span><span class=\"o\">.</span><span class=\"na\">applyAsInt</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">gcd</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"nf\">gcd</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"findnextpositivepoweroftwo\">findNextPositivePowerOfTwo</h3>\n\n<p>查找大于或等于该值的下一个幂。</p>\n\n<p>该方法使用左移运算符将1与右侧的值位移。右侧使用 <code class=\"highlighter-rouge\">Integer.numberOfLeadingZeros</code>方法。\n<code class=\"highlighter-rouge\">001 &lt;&lt; 2</code> would be <code class=\"highlighter-rouge\">100</code>. <code class=\"highlighter-rouge\">100</code> in decimal is equal to <code class=\"highlighter-rouge\">4</code>.</p>\n\n<p><code class=\"highlighter-rouge\">Integer.numberOfLeadingZeros</code> 给出了数值前导零的数目。例如，调用 <code class=\"highlighter-rouge\">Integer.numberOfLeadingZeros(3)</code> 将赋值为30。\n这是因为3在二进制中表示为 <code class=\"highlighter-rouge\">11</code>。由于整数有32位，所以有30位有0位。左移运算符的右边变为 <code class=\"highlighter-rouge\">32-30 = 2</code>。\n左移1，即 <code class=\"highlighter-rouge\">001 &lt;&lt; 2</code> 将是 <code class=\"highlighter-rouge\">100</code>，十进制中的 <code class=\"highlighter-rouge\">100</code> 等于 <code class=\"highlighter-rouge\">4</code>。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">findNextPositivePowerOfTwo</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">(</span><span class=\"mi\">32</span> <span class=\"o\">-</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">numberOfLeadingZeros</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"iseven\">isEven</h3>\n\n<p>检查数字是否是偶数。</p>\n\n<p>这个方法使用按位运算符，<code class=\"highlighter-rouge\">0b1</code> 是1的二进制表示。\n因为Java 7可以通过用 <code class=\"highlighter-rouge\">0b</code> 或 <code class=\"highlighter-rouge\">0B</code> 作为前缀来编写二进制文字。\n数字为偶数时，<code class=\"highlighter-rouge\">＆</code> 运算符将返回0。 例如，<code class=\"highlighter-rouge\">IsEven(4)</code> 会导致 <code class=\"highlighter-rouge\">100</code> <code class=\"highlighter-rouge\">&amp;</code> <code class=\"highlighter-rouge\">001</code>，<code class=\"highlighter-rouge\">＆</code> 的结果将是 <code class=\"highlighter-rouge\">000</code>。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isEven</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">&amp;</span> <span class=\"mb\">0b1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"ispoweroftwo\">isPowerOfTwo</h3>\n\n<p>检查一个值是2的正幂。</p>\n\n<p>为了理解它是如何工作的，让我们假设我们调用了 <code class=\"highlighter-rouge\">IsPowerOfTwo(4)</code>。</p>\n\n<p>当值大于0时，将评估 <code class=\"highlighter-rouge\">&amp;&amp;</code> 运算符的右侧。</p>\n\n<p><code class=\"highlighter-rouge\">(~value + 1)</code> 的结果等于值本身，<code class=\"highlighter-rouge\">~100 + 001</code> =&gt; <code class=\"highlighter-rouge\">011 + 001</code> =&gt; <code class=\"highlighter-rouge\">100</code>。</p>\n\n<p><code class=\"highlighter-rouge\">(value &amp; value)</code> 的结果是value，<code class=\"highlighter-rouge\">100</code> &amp; <code class=\"highlighter-rouge\">100</code> =&gt; <code class=\"highlighter-rouge\">100</code>.。</p>\n\n<p>当值等于值时，这将把值表达为真值。</p>\n\n<pre><code class=\"language-Java\">public static boolean isPowerOfTwo(final int value) {\n    return value &gt; 0 &amp;&amp; ((value &amp; (~value + 1)) == value);\n}\n</code></pre>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"generaterandomint\">generateRandomInt</h3>\n\n<p>生成一个介于 <code class=\"highlighter-rouge\">Integer.MIN_VALUE</code> 和 <code class=\"highlighter-rouge\">Integer.MAX_VALUE</code> 之间的随机数。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">generateRandomInt</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">ThreadLocalRandom</span><span class=\"o\">.</span><span class=\"na\">current</span><span class=\"o\">().</span><span class=\"na\">nextInt</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h2 id=\"string\">String</h2>\n\n<h3 id=\"anagrams\">anagrams</h3>\n\n<p>生成一个字符串的所有字符（包含重复）。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">anagrams</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n                <span class=\"o\">?</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                <span class=\"o\">:</span> <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">singletonList</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"o\">.</span><span class=\"na\">mapToObj</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">SimpleEntry</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n            <span class=\"o\">.</span><span class=\"na\">flatMap</span><span class=\"o\">(</span><span class=\"n\">entry</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"n\">anagrams</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">())</span> <span class=\"o\">+</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                            <span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n                            <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">-&gt;</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toList</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"bytesize\">byteSize</h3>\n\n<p>以字节为单位返回字符串的长度。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">byteSize</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">().</span><span class=\"na\">length</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"capitalize\">capitalize</h3>\n\n<p>将字符串首字母大写。</p>\n\n<pre><code class=\"language-Java\">public static String capitalize(String input, boolean lowerRest) {\n    return input.substring(0, 1).toUpperCase() +\n            (lowerRest\n                    ? input.substring(1, input.length()).toLowerCase()\n                    : input.substring(1, input.length()));\n}\n</code></pre>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"capitalizeeveryword\">capitalizeEveryWord</h3>\n\n<p>将字符串中每个单词的首字母大写。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">capitalizeEveryWord</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Pattern</span><span class=\"o\">.</span><span class=\"na\">compile</span><span class=\"o\">(</span><span class=\"s\">\"\\\\b(?=\\\\w)\"</span><span class=\"o\">).</span><span class=\"na\">splitAsStream</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">-&gt;</span> <span class=\"n\">capitalize</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">joining</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"countvowels\">countVowels</h3>\n\n<p>在提供的字符串中返回元音的个数。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">countVowels</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">replaceAll</span><span class=\"o\">(</span><span class=\"s\">\"[^aeiouAEIOU]\"</span><span class=\"o\">,</span> <span class=\"s\">\"\"</span><span class=\"o\">).</span><span class=\"na\">length</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"escaperegexp\">escapeRegExp</h3>\n\n<p>转义要在正则表达式中使用的字符串。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">escapeRegExp</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Pattern</span><span class=\"o\">.</span><span class=\"na\">quote</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"fromcamelcase\">fromCamelCase</h3>\n\n<p>从驼峰式转换字符串。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">fromCamelCase</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">separator</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">input</span>\n            <span class=\"o\">.</span><span class=\"na\">replaceAll</span><span class=\"o\">(</span><span class=\"s\">\"([a-z\\\\d])([A-Z])\"</span><span class=\"o\">,</span> <span class=\"s\">\"$1\"</span> <span class=\"o\">+</span> <span class=\"n\">separator</span> <span class=\"o\">+</span> <span class=\"s\">\"$2\"</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">toLowerCase</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"isabsoluteurl\">isAbsoluteUrl</h3>\n\n<p>如果给定的字符串是绝对URL，则返回 <code class=\"highlighter-rouge\">true</code>，否则返回 <code class=\"highlighter-rouge\">false</code>。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isAbsoluteUrl</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">url</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Pattern</span><span class=\"o\">.</span><span class=\"na\">compile</span><span class=\"o\">(</span><span class=\"s\">\"^[a-z][a-z0-9+.-]*:\"</span><span class=\"o\">).</span><span class=\"na\">matcher</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">).</span><span class=\"na\">find</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"islowercase\">isLowerCase</h3>\n\n<p>检查字符串是否为小写。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isLowerCase</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Objects</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">toLowerCase</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"isuppercase\">isUpperCase</h3>\n\n<p>检查字符串是否为大写。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isUpperCase</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Objects</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">toUpperCase</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"ispalindrome\">isPalindrome</h3>\n\n<p>判断一个字符串是否回文。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPalindrome</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">String</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">toLowerCase</span><span class=\"o\">().</span><span class=\"na\">replaceAll</span><span class=\"o\">(</span><span class=\"s\">\"[\\\\W_]\"</span><span class=\"o\">,</span> <span class=\"s\">\"\"</span><span class=\"o\">);</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Objects</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span>\n            <span class=\"n\">s</span><span class=\"o\">,</span>\n            <span class=\"k\">new</span> <span class=\"nf\">StringBuilder</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">).</span><span class=\"na\">reverse</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">()</span>\n    <span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"isnumeric\">isNumeric</h3>\n\n<p>检查字符串是否为数字。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isNumeric</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"o\">.</span><span class=\"na\">allMatch</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Character</span><span class=\"o\">.</span><span class=\"na\">isDigit</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"mask\">mask</h3>\n\n<p>用指定的掩码字符替换除最后 <code class=\"highlighter-rouge\">num</code> 个字符以外的所有字符。</p>\n\n<pre><code class=\"language-Java\">public static String mask(String input, int num, String mask) {\n    int length = input.length();\n    return num &gt; 0\n            ?\n            input.substring(0, length - num).replaceAll(\".\", mask)\n                    + input.substring(length - num)\n            :\n            input.substring(0, Math.negateExact(num))\n                    + input.substring(Math.negateExact(num), length).replaceAll(\".\", mask);\n}\n</code></pre>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"reversestring\">reverseString</h3>\n\n<p>反转字符串。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">reverseString</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">StringBuilder</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">).</span><span class=\"na\">reverse</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"sortcharactersinstring\">sortCharactersInString</h3>\n\n<p>按字母顺序排列字符串中的字符。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">sortCharactersInString</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">)).</span><span class=\"na\">sorted</span><span class=\"o\">().</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">joining</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"splitlines\">splitLines</h3>\n\n<p>将多行字符串拆分为行数组。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"nf\">splitLines</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\\\\r?\\\\n\"</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"tocamelcase\">toCamelCase</h3>\n\n<p>转换一个字符串为驼峰式。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">toCamelCase</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Matcher</span> <span class=\"n\">matcher</span> <span class=\"o\">=</span> <span class=\"nc\">Pattern</span><span class=\"o\">.</span><span class=\"na\">compile</span><span class=\"o\">(</span><span class=\"s\">\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\"</span><span class=\"o\">).</span><span class=\"na\">matcher</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">);</span>\n    <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">matchedParts</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">matcher</span><span class=\"o\">.</span><span class=\"na\">find</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">matchedParts</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matcher</span><span class=\"o\">.</span><span class=\"na\">group</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n    <span class=\"nc\">String</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">matchedParts</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">).</span><span class=\"na\">toUpperCase</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">).</span><span class=\"na\">toLowerCase</span><span class=\"o\">())</span>\n            <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">joining</span><span class=\"o\">());</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">).</span><span class=\"na\">toLowerCase</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"tokebabcase\">toKebabCase</h3>\n\n<p>将字符串转换为kebab大小写。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">toKebabCase</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Matcher</span> <span class=\"n\">matcher</span> <span class=\"o\">=</span> <span class=\"nc\">Pattern</span><span class=\"o\">.</span><span class=\"na\">compile</span><span class=\"o\">(</span><span class=\"s\">\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\"</span><span class=\"o\">).</span><span class=\"na\">matcher</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">);</span>\n    <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">matchedParts</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">matcher</span><span class=\"o\">.</span><span class=\"na\">find</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">matchedParts</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matcher</span><span class=\"o\">.</span><span class=\"na\">group</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">matchedParts</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"nl\">String:</span><span class=\"o\">:</span><span class=\"n\">toLowerCase</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">joining</span><span class=\"o\">(</span><span class=\"s\">\"-\"</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"match\">match</h3>\n\n<p>正则匹配。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">match</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">regex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Matcher</span> <span class=\"n\">matcher</span> <span class=\"o\">=</span> <span class=\"nc\">Pattern</span><span class=\"o\">.</span><span class=\"na\">compile</span><span class=\"o\">(</span><span class=\"n\">regex</span><span class=\"o\">).</span><span class=\"na\">matcher</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">);</span>\n    <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">matchedParts</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">matcher</span><span class=\"o\">.</span><span class=\"na\">find</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">matchedParts</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matcher</span><span class=\"o\">.</span><span class=\"na\">group</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">matchedParts</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"tosnakecase\">toSnakeCase</h3>\n\n<p>将字符串转换为蛇形小写，如 <code class=\"highlighter-rouge\">Im_Biezhi</code>。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">toSnakeCase</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Matcher</span> <span class=\"n\">matcher</span> <span class=\"o\">=</span> <span class=\"nc\">Pattern</span><span class=\"o\">.</span><span class=\"na\">compile</span><span class=\"o\">(</span><span class=\"s\">\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\"</span><span class=\"o\">).</span><span class=\"na\">matcher</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">);</span>\n    <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">matchedParts</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">matcher</span><span class=\"o\">.</span><span class=\"na\">find</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">matchedParts</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matcher</span><span class=\"o\">.</span><span class=\"na\">group</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">matchedParts</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"nl\">String:</span><span class=\"o\">:</span><span class=\"n\">toLowerCase</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">joining</span><span class=\"o\">(</span><span class=\"s\">\"_\"</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"truncatestring\">truncateString</h3>\n\n<p>将字符串截断到指定的长度。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">truncateString</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span>\n            <span class=\"o\">?</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span> <span class=\"o\">?</span> <span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">\"...\"</span>\n            <span class=\"o\">:</span> <span class=\"n\">input</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"words\">words</h3>\n\n<p>将给定的字符串转换为单词数组。</p>\n\n<pre><code class=\"language-Java\">public static String[] words(String input) {\n    return Arrays.stream(input.split(\"[^a-zA-Z-]+\"))\n            .filter(s -&gt; !s.isEmpty())\n            .toArray(String[]::new);\n}\n</code></pre>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"stringtointegers\">stringToIntegers</h3>\n\n<p>将由空格分隔的数字字符串转换为 int 数组。</p>\n\n<pre><code class=\"language-Java\">public static int[] stringToIntegers(String numbers) {\n        return Arrays.stream(numbers.split(\" \")).mapToInt(Integer::parseInt).toArray();\n}\n</code></pre>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h2 id=\"io\">IO</h2>\n\n<h3 id=\"convertinputstreamtostring\">convertInputStreamToString</h3>\n\n<p>将InputStream转换为字符串。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">convertInputStreamToString</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">InputStream</span> <span class=\"n\">in</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n    <span class=\"nc\">ByteArrayOutputStream</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ByteArrayOutputStream</span><span class=\"o\">();</span>\n    <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">1024</span><span class=\"o\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">length</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">((</span><span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">))</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"nc\">StandardCharsets</span><span class=\"o\">.</span><span class=\"na\">UTF_8</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"readfileasstring\">readFileAsString</h3>\n\n<p>将文件内容读入字符串。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">readFileAsString</span><span class=\"o\">(</span><span class=\"nc\">Path</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">String</span><span class=\"o\">(</span><span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">readAllBytes</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"getcurrentworkingdirectorypath\">getCurrentWorkingDirectoryPath</h3>\n\n<p>获取当前工作目录。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">getCurrentWorkingDirectoryPath</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">FileSystems</span><span class=\"o\">.</span><span class=\"na\">getDefault</span><span class=\"o\">().</span><span class=\"na\">getPath</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">).</span><span class=\"na\">toAbsolutePath</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"tmpdirname\">tmpDirName</h3>\n\n<p>返回 <code class=\"highlighter-rouge\">java.io.tmpdir</code> 系统属性的值。如果末尾没有分隔符，则追加分隔符。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">tmpDirName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nc\">String</span> <span class=\"n\">tmpDirName</span> <span class=\"o\">=</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">getProperty</span><span class=\"o\">(</span><span class=\"s\">\"java.io.tmpdir\"</span><span class=\"o\">);</span>\n    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">tmpDirName</span><span class=\"o\">.</span><span class=\"na\">endsWith</span><span class=\"o\">(</span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"na\">separator</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">tmpDirName</span> <span class=\"o\">+=</span> <span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"na\">separator</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">tmpDirName</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h2 id=\"exception\">Exception</h2>\n\n<h3 id=\"stacktraceasstring\">stackTraceAsString</h3>\n\n<p>将异常堆栈跟踪转换为字符串。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">stackTraceAsString</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">Throwable</span> <span class=\"n\">throwable</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"nc\">StringWriter</span> <span class=\"n\">sw</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringWriter</span><span class=\"o\">();</span>\n    <span class=\"n\">throwable</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">PrintWriter</span><span class=\"o\">(</span><span class=\"n\">sw</span><span class=\"o\">));</span>\n    <span class=\"k\">return</span> <span class=\"n\">sw</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h2 id=\"system\">System</h2>\n\n<h3 id=\"osname\">osName</h3>\n\n<p>以小写字符串的形式获取操作系统的名称。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">osName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">getProperty</span><span class=\"o\">(</span><span class=\"s\">\"os.name\"</span><span class=\"o\">).</span><span class=\"na\">toLowerCase</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"isdebuggerenabled\">isDebuggerEnabled</h3>\n\n<p>检查JVM是否为debug模式。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isDebuggerAttached</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"nc\">RuntimeMXBean</span> <span class=\"n\">runtimeMXBean</span> <span class=\"o\">=</span> <span class=\"nc\">ManagementFactory</span><span class=\"o\">.</span><span class=\"na\">getRuntimeMXBean</span><span class=\"o\">();</span>\n    <span class=\"k\">return</span> <span class=\"n\">runtimeMXBean</span><span class=\"o\">.</span><span class=\"na\">getInputArguments</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">anyMatch</span><span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">-&gt;</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"s\">\"-agentlib:jdwp\"</span><span class=\"o\">));</span>\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h2 id=\"class\">Class</h2>\n\n<h3 id=\"getallinterfaces\">getAllInterfaces</h3>\n\n<p>此方法返回由给定类及其超类实现的所有接口。</p>\n\n<p>该方法通过连接两个Stream来工作。第一个Stream是通过创建带有接口的流和接口实现的所有接口来递归构建的。\n第二个Stream对超类也是如此。其结果是删除重复项后将两个Stream连接起来。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Class</span><span class=\"o\">&lt;?&gt;&gt;</span> <span class=\"n\">getAllInterfaces</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">cls</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"na\">concat</span><span class=\"o\">(</span>\n            <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">cls</span><span class=\"o\">.</span><span class=\"na\">getInterfaces</span><span class=\"o\">()).</span><span class=\"na\">flatMap</span><span class=\"o\">(</span><span class=\"n\">intf</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"na\">concat</span><span class=\"o\">(</span><span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">intf</span><span class=\"o\">),</span> <span class=\"n\">getAllInterfaces</span><span class=\"o\">(</span><span class=\"n\">intf</span><span class=\"o\">).</span><span class=\"na\">stream</span><span class=\"o\">())),</span>\n            <span class=\"n\">cls</span><span class=\"o\">.</span><span class=\"na\">getSuperclass</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"na\">empty</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">getAllInterfaces</span><span class=\"o\">(</span><span class=\"n\">cls</span><span class=\"o\">.</span><span class=\"na\">getSuperclass</span><span class=\"o\">()).</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n    <span class=\"o\">).</span><span class=\"na\">distinct</span><span class=\"o\">().</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toList</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h3 id=\"isinnerclass\">isInnerClass</h3>\n\n<p>此方法检查指定的类是内部类还是静态嵌套类。</p>\n\n<pre><code class=\"language-Java\">public static boolean isInnerClass(final Class&lt;?&gt; cls) {\n    return cls != null &amp;&amp; cls.getEnclosingClass() != null;\n}\n</code></pre>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n\n<h2 id=\"enum\">Enum</h2>\n\n<h3 id=\"getenummap\">getEnumMap</h3>\n\n<p>将枚举转换为 Map，其中 key 是枚举名，value 是枚举本身。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">E</span> <span class=\"kd\">extends</span> <span class=\"nc\">Enum</span><span class=\"o\">&lt;</span><span class=\"no\">E</span><span class=\"o\">&gt;&gt;</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"no\">E</span><span class=\"o\">&gt;</span> <span class=\"nf\">getEnumMap</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">E</span><span class=\"o\">&gt;</span> <span class=\"n\">enumClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">enumClass</span><span class=\"o\">.</span><span class=\"na\">getEnumConstants</span><span class=\"o\">())</span>\n            <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toMap</span><span class=\"o\">(</span><span class=\"nl\">Enum:</span><span class=\"o\">:</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"nc\">Function</span><span class=\"o\">.</span><span class=\"na\">identity</span><span class=\"o\">()));</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><br /><a href=\"#目录\"> 回到顶部</a></p>\n",
      "desc"     : "目录Array (数组相关)  chunk  countOccurrences  deepFlatten  difference  differenceWith  distinctValuesOfArray  dropElements  dropRight  everyNth  filterNonUnique  flatten  flattenDepth  groupBy  initial ..."
} ,
  
  
  
    {
      "title"    : "Apache Dubbo",
      "title-lower"    : "apache dubbo",
      "sub-titile" : "Apache Dubbo™ (incubating)是一款高性能Java RPC框架。",
      "sub-titile-lower" : "apache dubbo™ (incubating)是一款高性能java rpc框架。",
      "categories" : "",
      "tags"     : "Apache, Dubbo, Java, RPC",
      "url"      : "/zcblog/2019/03/30/dubbo/",
      "date"     : "2019-03-30 00:00:00 +0800",
      "content": "<p>在2011年10月27日，阿里巴巴开源了自己的SOA服务化治理方案的核心框架Dubbo，服务治理和SOA的设计理念开始逐渐在国内软件行业中落地，并被广泛应用。</p>\n\n<p>Dubbo作为阿里巴巴内部的SOA服务化治理方案的核心框架，在2012年时已经每天为2000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。Dubbo自2011年开源后，已被许多非阿里系公司使用，其中既有当当网、网易考拉等互联网公司，也有中国人寿、青岛海尔等传统企业。本文是作者根据官方文档以及自己平时的使用情况，对 Dubbo 所做的一个总结。</p>\n\n<p>Dubbo 官网：<a href=\"https://dubbo.apache.org/zh-cn/index.html\">https://dubbo.apache.org/zh-cn/index.html</a></p>\n\n<!-- MarkdownTOC -->\n\n<ul>\n  <li><a href=\"#一-重要的概念\">一 重要的概念</a>\n    <ul>\n      <li><a href=\"#11-什么是-dubbo\">1.1 什么是 Dubbo?</a></li>\n      <li><a href=\"#12-什么是-rpcrpc原理是什么\">1.2 什么是 RPC?RPC原理是什么?</a></li>\n      <li><a href=\"#13-为什么要用-dubbo\">1.3 为什么要用 Dubbo?</a></li>\n      <li><a href=\"#14-什么是分布式\">1.4 什么是分布式?</a></li>\n      <li><a href=\"#15-为什么要分布式\">1.5 为什么要分布式?</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#二-dubbo-的架构\">二 Dubbo 的架构</a>\n    <ul>\n      <li><a href=\"#21-dubbo-的架构图解\">2.1 Dubbo 的架构图解</a></li>\n      <li><a href=\"#22-dubbo-工作原理\">2.2 Dubbo 工作原理</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#三-dubbo-的负载均衡策略\">三 Dubbo 的负载均衡策略</a>\n    <ul>\n      <li><a href=\"#31-先来解释一下什么是负载均衡\">3.1 先来解释一下什么是负载均衡</a></li>\n      <li><a href=\"#32-再来看看-dubbo-提供的负载均衡策略\">3.2 再来看看 Dubbo 提供的负载均衡策略</a>\n        <ul>\n          <li><a href=\"#321-random-loadbalance默认基于权重的随机负载均衡机制\">3.2.1  Random LoadBalance(默认，基于权重的随机负载均衡机制)</a></li>\n          <li><a href=\"#322-roundrobin-loadbalance不推荐基于权重的轮询负载均衡机制\">3.2.2  RoundRobin LoadBalance(不推荐，基于权重的轮询负载均衡机制)</a></li>\n          <li><a href=\"#323-leastactive-loadbalance\">3.2.3 LeastActive LoadBalance</a></li>\n          <li><a href=\"#324-consistenthash-loadbalance\">3.2.4  ConsistentHash LoadBalance</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#33-配置方式\">3.3 配置方式</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#四-zookeeper宕机与dubbo直连的情况\">四 zookeeper宕机与dubbo直连的情况</a></li>\n</ul>\n\n<!-- /MarkdownTOC -->\n\n<h2 id=\"一-重要的概念\">一 重要的概念</h2>\n\n<h3 id=\"11-什么是-dubbo\">1.1 什么是 Dubbo?</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td>Apache Dubbo (incubating)</td>\n      <td>ˈdʌbəʊ</td>\n      <td>是一款高性能、轻量级的开源Java RPC 框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。简单来说 Dubbo 是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Dubbo 目前已经有接近 25k 的 Star ，Dubbo的Github 地址：<a href=\"https://github.com/apache/incubator-dubbo\">https://github.com/apache/incubator-dubbo</a> 。 另外，在开源中国举行的2018年度最受欢迎中国开源软件这个活动的评选中，Dubbo 更是凭借其超高人气仅次于 vue.js 和 ECharts 获得第三名的好成绩。</p>\n\n<p>Dubbo 是由阿里开源，后来加入了 Apache 。正式由于 Dubbo 的出现，才使得越来越多的公司开始使用以及接受分布式架构。</p>\n\n<p><strong>我们上面说了  Dubbo 实际上是 RPC 框架，那么什么是 RPC呢？</strong></p>\n\n<h3 id=\"12-什么是-rpcrpc原理是什么\">1.2 什么是 RPC?RPC原理是什么?</h3>\n\n<p><strong>什么是 RPC？</strong></p>\n\n<p>RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。比如两个不同的服务A,B部署在两台不同的机器上，那么服务 A 如果想要调用服务 B 中的某个方法该怎么办呢？使用 HTTP请求 当然可以，但是可能会比较慢而且一些优化做的并不好。 RPC 的出现就是为了解决这个问题。</p>\n\n<p><strong>RPC原理是什么？</strong></p>\n\n<p>我这里这是简单的提一下。详细内容可以查看下面这篇文章：</p>\n\n<p><a href=\"http://www.importnew.com/22003.html\">http://www.importnew.com/22003.html</a></p>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-6/37345851.jpg\" alt=\"RPC原理图\" /></p>\n\n<ol>\n  <li>服务消费方（client）调用以本地调用方式调用服务；</li>\n  <li>client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；</li>\n  <li>client stub找到服务地址，并将消息发送到服务端；</li>\n  <li>server stub收到消息后进行解码；</li>\n  <li>server stub根据解码结果调用本地的服务；</li>\n  <li>本地服务执行并将结果返回给server stub；</li>\n  <li>server stub将返回结果打包成消息并发送至消费方；</li>\n  <li>client stub接收到消息，并进行解码；</li>\n  <li>服务消费方得到最终结果。</li>\n</ol>\n\n<p>下面再贴一个网上的时序图：</p>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-6/32527396.jpg\" alt=\"RPC原理时序图\" /></p>\n\n<p><strong>说了这么多，我们为什么要用 Dubbo 呢？</strong></p>\n\n<h3 id=\"13-为什么要用-dubbo\">1.3 为什么要用 Dubbo?</h3>\n\n<p>Dubbo 的诞生和 SOA 分布式架构的流行有着莫大的关系。SOA 面向服务的架构（Service Oriented Architecture），也就是把工程按照业务逻辑拆分成服务层、表现层两个工程。服务层中包含业务逻辑，只需要对外提供服务即可。表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现。SOA架构中有两个主要角色：服务提供者（Provider）和服务使用者（Consumer）。</p>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-26/43050183.jpg\" alt=\"为什么要用 Dubbo\" /></p>\n\n<p><strong>如果你要开发分布式程序，你也可以直接基于 HTTP 接口进行通信，但是为什么要用 Dubbo呢？</strong></p>\n\n<p>我觉得主要可以从 Dubbo 提供的下面四点特性来说为什么要用 Dubbo：</p>\n\n<ol>\n  <li><strong>负载均衡</strong>——同一个服务部署在不同的机器时该调用那一台机器上的服务</li>\n  <li><strong>服务调用链路生成</strong>——随着系统的发展，服务越来越多，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。Dubbo 可以为我们解决服务之间互相是如何调用的。</li>\n  <li><strong>服务访问压力以及时长统计、资源调度和治理</strong>——基于访问压力实时管理集群容量，提高集群利用率。</li>\n  <li><strong>服务降级</strong>——某个服务挂掉之后调用备用服务</li>\n</ol>\n\n<p>另外，Dubbo 除了能够应用在分布式系统中，也可以应用在现在比较火的微服务系统中。不过，由于 Spring Cloud 在微服务中应用更加广泛，所以，我觉得一般我们提 Dubbo 的话，大部分是分布式系统的情况。</p>\n\n<p><strong>我们刚刚提到了分布式这个概念，下面再给大家介绍一下什么是分布式？为什么要分布式？</strong></p>\n\n<h3 id=\"14-什么是分布式\">1.4 什么是分布式?</h3>\n\n<p>分布式或者说 SOA 分布式重要的就是面向服务，说简单的分布式就是我们把整个系统拆分成不同的服务然后将这些服务放在不同的服务器上减轻单体服务的压力提高并发量和性能。比如电商系统可以简单地拆分成订单系统、商品系统、登录系统等等，拆分之后的每个服务可以部署在不同的机器上，如果某一个服务的访问量比较大的话也可以将这个服务同时部署在多台机器上。</p>\n\n<h3 id=\"15-为什么要分布式\">1.5 为什么要分布式?</h3>\n\n<p>从开发角度来讲单体应用的代码都集中在一起，而分布式系统的代码根据业务被拆分。所以，每个团队可以负责一个服务的开发，这样提升了开发效率。另外，代码根据业务拆分之后更加便于维护和扩展。</p>\n\n<p>另外，我觉得将系统拆分成分布式之后不光便于系统扩展和维护，更能提高整个系统的性能。你想一想嘛?把整个系统拆分成不同的服务/系统，然后每个服务/系统 单独部署在一台服务器上，是不是很大程度上提高了系统性能呢？</p>\n\n<h2 id=\"二-dubbo-的架构\">二 Dubbo 的架构</h2>\n\n<h3 id=\"21-dubbo-的架构图解\">2.1 Dubbo 的架构图解</h3>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-26/46816446.jpg\" alt=\"Dubbo 架构\" /></p>\n\n<p><strong>上述节点简单说明：</strong></p>\n\n<ul>\n  <li><strong>Provider：</strong>   暴露服务的服务提供方</li>\n  <li><strong>Consumer：</strong>  调用远程服务的服务消费方</li>\n  <li><strong>Registry：</strong>  服务注册与发现的注册中心</li>\n  <li><strong>Monitor：</strong>   统计服务的调用次数和调用时间的监控中心</li>\n  <li><strong>Container：</strong>   服务运行容器</li>\n</ul>\n\n<p><strong>调用关系说明：</strong></p>\n\n<ol>\n  <li>服务容器负责启动，加载，运行服务提供者。</li>\n  <li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>\n  <li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>\n  <li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>\n  <li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>\n  <li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li>\n</ol>\n\n<p><strong>重要知识点总结：</strong></p>\n\n<ul>\n  <li><strong>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小</strong></li>\n  <li><strong>监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示</strong></li>\n  <li><strong>注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外</strong></li>\n  <li><strong>注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者</strong></li>\n  <li><strong>注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表</strong></li>\n  <li><strong>注册中心和监控中心都是可选的，服务消费者可以直连服务提供者</strong></li>\n  <li><strong>服务提供者无状态，任意一台宕掉后，不影响使用</strong></li>\n  <li><strong>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</strong></li>\n</ul>\n\n<h3 id=\"22-dubbo-工作原理\">2.2 Dubbo 工作原理</h3>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-26/64702923.jpg\" alt=\"Dubbo 工作原理\" /></p>\n\n<p>图中从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表层之间的依赖关系，每一层都可以剥离上层被复用，其中，Service 和 Config 层为 API，其它各层均为 SPI。</p>\n\n<p><strong>各层说明</strong>：</p>\n\n<ul>\n  <li>第一层：<strong>service层</strong>，接口层，给服务提供者和消费者来实现的</li>\n  <li>第二层：<strong>config层</strong>，配置层，主要是对dubbo进行各种配置的</li>\n  <li>第三层：<strong>proxy层</strong>，服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton</li>\n  <li>第四层：<strong>registry层</strong>，服务注册层，负责服务的注册与发现</li>\n  <li>第五层：<strong>cluster层</strong>，集群层，封装多个服务提供者的路由以及负载均衡，将多个实例组合成一个服务</li>\n  <li>第六层：<strong>monitor层</strong>，监控层，对rpc接口的调用次数和调用时间进行监控</li>\n  <li>第七层：<strong>protocol层</strong>，远程调用层，封装rpc调用</li>\n  <li>第八层：<strong>exchange层</strong>，信息交换层，封装请求响应模式，同步转异步</li>\n  <li>第九层：<strong>transport层</strong>，网络传输层，抽象mina和netty为统一接口</li>\n  <li>第十层：<strong>serialize层</strong>，数据序列化层。网络传输需要。</li>\n</ul>\n\n<h2 id=\"三-dubbo-的负载均衡策略\">三 Dubbo 的负载均衡策略</h2>\n\n<h3 id=\"31-先来解释一下什么是负载均衡\">3.1 先来解释一下什么是负载均衡</h3>\n\n<p><strong>先来个官方的解释。</strong></p>\n\n<blockquote>\n  <p>维基百科对负载均衡的定义：负载均衡改善了跨多个计算资源（例如计算机，计算机集群，网络链接，中央处理单元或磁盘驱动的的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间，并避免任何单个资源的过载。使用具有负载平衡而不是单个组件的多个组件可以通过冗余提高可靠性和可用性。负载平衡通常涉及专用软件或硬件</p>\n</blockquote>\n\n<p><strong>上面讲的大家可能不太好理解，再用通俗的话给大家说一下。</strong></p>\n\n<p>比如我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。</p>\n\n<h3 id=\"32-再来看看-dubbo-提供的负载均衡策略\">3.2 再来看看 Dubbo 提供的负载均衡策略</h3>\n\n<p>在集群负载均衡时，Dubbo 提供了多种均衡策略，默认为 <code class=\"highlighter-rouge\">random</code> 随机调用。可以自行扩展负载均衡策略，参见：<a href=\"https://dubbo.gitbooks.io/dubbo-dev-book/content/impls/load-balance.html\">负载均衡扩展</a>。</p>\n\n<p>备注:下面的图片来自于：尚硅谷2018Dubbo 视频。</p>\n\n<h4 id=\"321--random-loadbalance默认基于权重的随机负载均衡机制\">3.2.1  Random LoadBalance(默认，基于权重的随机负载均衡机制)</h4>\n\n<ul>\n  <li><strong>随机，按权重设置随机概率。</strong></li>\n  <li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</li>\n</ul>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-7/77722327.jpg\" alt=\"基于权重的随机负载均衡机制\" /></p>\n\n<h4 id=\"322--roundrobin-loadbalance不推荐基于权重的轮询负载均衡机制\">3.2.2  RoundRobin LoadBalance(不推荐，基于权重的轮询负载均衡机制)</h4>\n\n<ul>\n  <li>轮循，按公约后的权重设置轮循比率。</li>\n  <li>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li>\n</ul>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-7/97933247.jpg\" alt=\"基于权重的轮询负载均衡机制\" /></p>\n\n<h4 id=\"323-leastactive-loadbalance\">3.2.3 LeastActive LoadBalance</h4>\n\n<ul>\n  <li>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</li>\n  <li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li>\n</ul>\n\n<h4 id=\"324--consistenthash-loadbalance\">3.2.4  ConsistentHash LoadBalance</h4>\n\n<ul>\n  <li><strong>一致性 Hash，相同参数的请求总是发到同一提供者。(如果你需要的不是随机负载均衡，是要一类请求都到一个节点，那就走这个一致性hash策略。)</strong></li>\n  <li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</li>\n  <li>算法参见：http://en.wikipedia.org/wiki/Consistent_hashing</li>\n  <li>缺省只对第一个参数 Hash，如果要修改，请配置 <code class=\"highlighter-rouge\">&lt;dubbo:parameter key=\"hash.arguments\" value=\"0,1\" /&gt;</code></li>\n  <li>缺省用 160 份虚拟节点，如果要修改，请配置 <code class=\"highlighter-rouge\">&lt;dubbo:parameter key=\"hash.nodes\" value=\"320\" /&gt;</code></li>\n</ul>\n\n<h3 id=\"33-配置方式\">3.3 配置方式</h3>\n\n<p><strong>xml 配置方式</strong></p>\n\n<p>服务端服务级别</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"o\">&lt;</span><span class=\"nl\">dubbo:</span><span class=\"n\">service</span> <span class=\"kd\">interface</span><span class=\"err\">=\"...\"</span> <span class=\"nc\">loadbalance</span><span class=\"o\">=</span><span class=\"s\">\"roundrobin\"</span> <span class=\"o\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>客户端服务级别</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"o\">&lt;</span><span class=\"nl\">dubbo:</span><span class=\"n\">reference</span> <span class=\"kd\">interface</span><span class=\"err\">=\"...\"</span> <span class=\"nc\">loadbalance</span><span class=\"o\">=</span><span class=\"s\">\"roundrobin\"</span> <span class=\"o\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>服务端方法级别</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"o\">&lt;</span><span class=\"nl\">dubbo:</span><span class=\"n\">service</span> <span class=\"kd\">interface</span><span class=\"err\">=\"...\"&gt;</span>\n    <span class=\"err\">&lt;</span><span class=\"nc\">dubbo</span><span class=\"o\">:</span><span class=\"n\">method</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">\"...\"</span> <span class=\"n\">loadbalance</span><span class=\"o\">=</span><span class=\"s\">\"roundrobin\"</span><span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"nl\">dubbo:</span><span class=\"n\">service</span><span class=\"o\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>客户端方法级别</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"o\">&lt;</span><span class=\"nl\">dubbo:</span><span class=\"n\">reference</span> <span class=\"kd\">interface</span><span class=\"err\">=\"...\"&gt;</span>\n    <span class=\"err\">&lt;</span><span class=\"nc\">dubbo</span><span class=\"o\">:</span><span class=\"n\">method</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">\"...\"</span> <span class=\"n\">loadbalance</span><span class=\"o\">=</span><span class=\"s\">\"roundrobin\"</span><span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"nl\">dubbo:</span><span class=\"n\">reference</span><span class=\"o\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>注解配置方式：</strong></p>\n\n<p>消费方基于基于注解的服务级别配置方式：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Reference</span><span class=\"o\">(</span><span class=\"n\">loadbalance</span> <span class=\"o\">=</span> <span class=\"s\">\"roundrobin\"</span><span class=\"o\">)</span>\n<span class=\"nc\">HelloService</span> <span class=\"n\">helloService</span><span class=\"o\">;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"四-zookeeper宕机与dubbo直连的情况\">四 zookeeper宕机与dubbo直连的情况</h2>\n\n<p>zookeeper宕机与dubbo直连的情况在面试中可能会被经常问到，所以要引起重视。</p>\n\n<p>在实际生产中，假如zookeeper注册中心宕掉，一段时间内服务消费方还是能够调用提供方的服务的，实际上它使用的本地缓存进行通讯，这只是dubbo健壮性的一种提现。</p>\n\n<p><strong>dubbo的健壮性表现：</strong></p>\n\n<ol>\n  <li>监控中心宕掉不影响使用，只是丢失部分采样数据</li>\n  <li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li>\n  <li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li>\n  <li>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</li>\n  <li>服务提供者无状态，任意一台宕掉后，不影响使用</li>\n  <li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li>\n</ol>\n\n<p>我们前面提到过：注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小。所以，我们可以完全可以绕过注册中心——采用 <strong>dubbo 直连</strong> ，即在服务消费方配置服务提供方的位置信息。</p>\n\n<p><strong>xml配置方式：</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;dubbo:reference</span> <span class=\"na\">id=</span><span class=\"s\">\"userService\"</span> <span class=\"na\">interface=</span><span class=\"s\">\"com.zang.gmall.service.UserService\"</span> <span class=\"na\">url=</span><span class=\"s\">\"dubbo://localhost:20880\"</span> <span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>注解方式：</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"nd\">@Reference</span><span class=\"o\">(</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">\"127.0.0.1:20880\"</span><span class=\"o\">)</span>   \n <span class=\"nc\">HelloService</span> <span class=\"n\">helloService</span><span class=\"o\">;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n",
      "desc"     : "在2011年10月27日，阿里巴巴开源了自己的SOA服务化治理方案的核心框架Dubbo，服务治理和SOA的设计理念开始逐渐在国内软件行业中落地，并被广泛应用。Dubbo作为阿里巴巴内部的SOA服务化治理方案的核心框架，在2012年时已经每天为2000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。Dubbo自2011年开源后，已被许多非阿里系公司..."
} ,
  
  
  
    {
      "title"    : "SpringMVC",
      "title-lower"    : "springmvc",
      "sub-titile" : "工作原理详解",
      "sub-titile-lower" : "工作原理详解",
      "categories" : "",
      "tags"     : "Spring, MVC, Java",
      "url"      : "/zcblog/2019/03/29/springmvc-work/",
      "date"     : "2019-03-29 00:00:00 +0800",
      "content": "<h3 id=\"先来看一下什么是-mvc-模式\">先来看一下什么是 MVC 模式</h3>\n\n<p>MVC 是一种设计模式。</p>\n\n<p><strong>MVC 的原理图如下：</strong></p>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/60679444.jpg\" alt=\"MVC的原理图\" /></p>\n\n<h3 id=\"springmvc-简单介绍\">SpringMVC 简单介绍</h3>\n\n<p>SpringMVC 框架是以请求为驱动，围绕 Servlet 设计，将请求发给控制器，然后通过模型对象，分派器来展示请求结果视图。其中核心类是 DispatcherServlet，它是一个 Servlet，顶层是实现的Servlet接口。</p>\n\n<h3 id=\"springmvc-使用\">SpringMVC 使用</h3>\n\n<p>需要在 web.xml 中配置 DispatcherServlet 。并且需要配置 Spring 监听器ContextLoaderListener</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td><td class=\"rouge-code\"><pre>\n<span class=\"nt\">&lt;listener&gt;</span>\n\t<span class=\"nt\">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener\n\t<span class=\"nt\">&lt;/listener-class&gt;</span>\n<span class=\"nt\">&lt;/listener&gt;</span>\n<span class=\"nt\">&lt;servlet&gt;</span>\n\t<span class=\"nt\">&lt;servlet-name&gt;</span>springmvc<span class=\"nt\">&lt;/servlet-name&gt;</span>\n\t<span class=\"nt\">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet\n\t<span class=\"nt\">&lt;/servlet-class&gt;</span>\n\t<span class=\"c\">&lt;!-- 如果不设置init-param标签，则必须在/WEB-INF/下创建xxx-servlet.xml文件，其中xxx是servlet-name中配置的名称。 --&gt;</span>\n\t<span class=\"nt\">&lt;init-param&gt;</span>\n\t\t<span class=\"nt\">&lt;param-name&gt;</span>contextConfigLocation<span class=\"nt\">&lt;/param-name&gt;</span>\n\t\t<span class=\"nt\">&lt;param-value&gt;</span>classpath:spring/springmvc-servlet.xml<span class=\"nt\">&lt;/param-value&gt;</span>\n\t<span class=\"nt\">&lt;/init-param&gt;</span>\n\t<span class=\"nt\">&lt;load-on-startup&gt;</span>1<span class=\"nt\">&lt;/load-on-startup&gt;</span>\n<span class=\"nt\">&lt;/servlet&gt;</span>\n<span class=\"nt\">&lt;servlet-mapping&gt;</span>\n\t<span class=\"nt\">&lt;servlet-name&gt;</span>springmvc<span class=\"nt\">&lt;/servlet-name&gt;</span>\n\t<span class=\"nt\">&lt;url-pattern&gt;</span>/<span class=\"nt\">&lt;/url-pattern&gt;</span>\n<span class=\"nt\">&lt;/servlet-mapping&gt;</span>\n\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"springmvc-工作原理重要\">SpringMVC 工作原理（重要）</h3>\n\n<p><strong>简单来说：</strong></p>\n\n<p>客户端发送请求-&gt; 前端控制器 DispatcherServlet 接受客户端请求 -&gt; 找到处理器映射 HandlerMapping 解析请求对应的 Handler-&gt; HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑 -&gt; 处理器返回一个模型视图 ModelAndView -&gt; 视图解析器进行解析 -&gt; 返回一个视图对象-&gt;前端控制器 DispatcherServlet 渲染数据（Moder）-&gt;将得到视图对象返回给用户</p>\n\n<p><strong>如下图所示：</strong>\n<img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/49790288.jpg\" alt=\"SpringMVC运行原理\" /></p>\n\n<p>上图的一个笔误的小问题：Spring MVC 的入口函数也就是前端控制器 DispatcherServlet 的作用是接收请求，响应结果。</p>\n\n<p><strong>流程说明（重要）：</strong></p>\n\n<p>（1）客户端（浏览器）发送请求，直接请求到 DispatcherServlet。</p>\n\n<p>（2）DispatcherServlet 根据请求信息调用 HandlerMapping，解析请求对应的 Handler。</p>\n\n<p>（3）解析到对应的 Handler（也就是我们平常说的 Controller 控制器）后，开始由 HandlerAdapter 适配器处理。</p>\n\n<p>（4）HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑。</p>\n\n<p>（5）处理器处理完业务后，会返回一个 ModelAndView 对象，Model 是返回的数据对象，View 是个逻辑上的 View。</p>\n\n<p>（6）ViewResolver 会根据逻辑 View 查找实际的 View。</p>\n\n<p>（7）DispaterServlet 把返回的 Model 传给 View（视图渲染）。</p>\n\n<p>（8）把 View 返回给请求者（浏览器）。</p>\n\n<h3 id=\"springmvc-重要组件说明\">SpringMVC 重要组件说明</h3>\n\n<p><strong>1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供（重要）</strong></p>\n\n<p>作用：<strong>Spring MVC 的入口函数。接收请求，响应结果，相当于转发器，中央处理器。有了 DispatcherServlet 减少了其它组件之间的耦合度。用户请求到达前端控制器，它就相当于mvc模式中的c，DispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet的存在降低了组件之间的耦合性。</strong></p>\n\n<p><strong>2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供</strong></p>\n\n<p>作用：根据请求的url查找Handler。HandlerMapping负责根据用户请求找到Handler即处理器（Controller），SpringMVC提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>\n\n<p><strong>3、处理器适配器HandlerAdapter</strong></p>\n\n<p>作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler\n通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>\n\n<p><strong>4、处理器Handler(需要工程师开发)</strong></p>\n\n<p>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler\nHandler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。\n由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p>\n\n<p><strong>5、视图解析器View resolver(不需要工程师开发),由框架提供</strong></p>\n\n<p>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）\nView Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。\n一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p>\n\n<p><strong>6、视图View(需要工程师开发)</strong></p>\n\n<p>View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）</p>\n\n<p><strong>注意：处理器Handler（也就是我们平常说的Controller控制器）以及视图层view都是需要我们自己手动开发的。其他的一些组件比如：前端控制器DispatcherServlet、处理器映射器HandlerMapping、处理器适配器HandlerAdapter等等都是框架提供给我们的，不需要自己手动开发。</strong></p>\n\n<h3 id=\"dispatcherservlet详细解析\">DispatcherServlet详细解析</h3>\n\n<p>首先看下源码：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kn\">package</span> <span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">springframework</span><span class=\"o\">.</span><span class=\"na\">web</span><span class=\"o\">.</span><span class=\"na\">servlet</span><span class=\"o\">;</span>\n \n<span class=\"nd\">@SuppressWarnings</span><span class=\"o\">(</span><span class=\"s\">\"serial\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">DispatcherServlet</span> <span class=\"kd\">extends</span> <span class=\"nc\">FrameworkServlet</span> <span class=\"o\">{</span>\n \n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">MULTIPART_RESOLVER_BEAN_NAME</span> <span class=\"o\">=</span> <span class=\"s\">\"multipartResolver\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">LOCALE_RESOLVER_BEAN_NAME</span> <span class=\"o\">=</span> <span class=\"s\">\"localeResolver\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">THEME_RESOLVER_BEAN_NAME</span> <span class=\"o\">=</span> <span class=\"s\">\"themeResolver\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">HANDLER_MAPPING_BEAN_NAME</span> <span class=\"o\">=</span> <span class=\"s\">\"handlerMapping\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">HANDLER_ADAPTER_BEAN_NAME</span> <span class=\"o\">=</span> <span class=\"s\">\"handlerAdapter\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">HANDLER_EXCEPTION_RESOLVER_BEAN_NAME</span> <span class=\"o\">=</span> <span class=\"s\">\"handlerExceptionResolver\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME</span> <span class=\"o\">=</span> <span class=\"s\">\"viewNameTranslator\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">VIEW_RESOLVER_BEAN_NAME</span> <span class=\"o\">=</span> <span class=\"s\">\"viewResolver\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">FLASH_MAP_MANAGER_BEAN_NAME</span> <span class=\"o\">=</span> <span class=\"s\">\"flashMapManager\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">WEB_APPLICATION_CONTEXT_ATTRIBUTE</span> <span class=\"o\">=</span> <span class=\"nc\">DispatcherServlet</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\".CONTEXT\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">LOCALE_RESOLVER_ATTRIBUTE</span> <span class=\"o\">=</span> <span class=\"nc\">DispatcherServlet</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\".LOCALE_RESOLVER\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">THEME_RESOLVER_ATTRIBUTE</span> <span class=\"o\">=</span> <span class=\"nc\">DispatcherServlet</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\".THEME_RESOLVER\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">THEME_SOURCE_ATTRIBUTE</span> <span class=\"o\">=</span> <span class=\"nc\">DispatcherServlet</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\".THEME_SOURCE\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">INPUT_FLASH_MAP_ATTRIBUTE</span> <span class=\"o\">=</span> <span class=\"nc\">DispatcherServlet</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\".INPUT_FLASH_MAP\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">OUTPUT_FLASH_MAP_ATTRIBUTE</span> <span class=\"o\">=</span> <span class=\"nc\">DispatcherServlet</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\".OUTPUT_FLASH_MAP\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">FLASH_MAP_MANAGER_ATTRIBUTE</span> <span class=\"o\">=</span> <span class=\"nc\">DispatcherServlet</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\".FLASH_MAP_MANAGER\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">EXCEPTION_ATTRIBUTE</span> <span class=\"o\">=</span> <span class=\"nc\">DispatcherServlet</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\".EXCEPTION\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">PAGE_NOT_FOUND_LOG_CATEGORY</span> <span class=\"o\">=</span> <span class=\"s\">\"org.springframework.web.servlet.PageNotFound\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">DEFAULT_STRATEGIES_PATH</span> <span class=\"o\">=</span> <span class=\"s\">\"DispatcherServlet.properties\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">protected</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">Log</span> <span class=\"n\">pageNotFoundLogger</span> <span class=\"o\">=</span> <span class=\"nc\">LogFactory</span><span class=\"o\">.</span><span class=\"na\">getLog</span><span class=\"o\">(</span><span class=\"no\">PAGE_NOT_FOUND_LOG_CATEGORY</span><span class=\"o\">);</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">Properties</span> <span class=\"n\">defaultStrategies</span><span class=\"o\">;</span>\n\t<span class=\"kd\">static</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"nc\">ClassPathResource</span> <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ClassPathResource</span><span class=\"o\">(</span><span class=\"no\">DEFAULT_STRATEGIES_PATH</span><span class=\"o\">,</span> <span class=\"nc\">DispatcherServlet</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">defaultStrategies</span> <span class=\"o\">=</span> <span class=\"nc\">PropertiesLoaderUtils</span><span class=\"o\">.</span><span class=\"na\">loadProperties</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IllegalStateException</span><span class=\"o\">(</span><span class=\"s\">\"Could not load 'DispatcherServlet.properties': \"</span> <span class=\"o\">+</span> <span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n \n\t<span class=\"cm\">/** Detect all HandlerMappings or just expect \"handlerMapping\" bean? */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">detectAllHandlerMappings</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** Detect all HandlerAdapters or just expect \"handlerAdapter\" bean? */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">detectAllHandlerAdapters</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** Detect all HandlerExceptionResolvers or just expect \"handlerExceptionResolver\" bean? */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">detectAllHandlerExceptionResolvers</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** Detect all ViewResolvers or just expect \"viewResolver\" bean? */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">detectAllViewResolvers</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** Throw a NoHandlerFoundException if no Handler was found to process this request? **/</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">throwExceptionIfNoHandlerFound</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** Perform cleanup of request attributes after include request? */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">cleanupAfterInclude</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** MultipartResolver used by this servlet */</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">MultipartResolver</span> <span class=\"n\">multipartResolver</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** LocaleResolver used by this servlet */</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">LocaleResolver</span> <span class=\"n\">localeResolver</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** ThemeResolver used by this servlet */</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">ThemeResolver</span> <span class=\"n\">themeResolver</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** List of HandlerMappings used by this servlet */</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">HandlerMapping</span><span class=\"o\">&gt;</span> <span class=\"n\">handlerMappings</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** List of HandlerAdapters used by this servlet */</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">HandlerAdapter</span><span class=\"o\">&gt;</span> <span class=\"n\">handlerAdapters</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** List of HandlerExceptionResolvers used by this servlet */</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">HandlerExceptionResolver</span><span class=\"o\">&gt;</span> <span class=\"n\">handlerExceptionResolvers</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** RequestToViewNameTranslator used by this servlet */</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">RequestToViewNameTranslator</span> <span class=\"n\">viewNameTranslator</span><span class=\"o\">;</span>\n \n\t<span class=\"kd\">private</span> <span class=\"nc\">FlashMapManager</span> <span class=\"n\">flashMapManager</span><span class=\"o\">;</span>\n \n\t<span class=\"cm\">/** List of ViewResolvers used by this servlet */</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">ViewResolver</span><span class=\"o\">&gt;</span> <span class=\"n\">viewResolvers</span><span class=\"o\">;</span>\n \n\t<span class=\"kd\">public</span> <span class=\"nf\">DispatcherServlet</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">super</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n \n\t<span class=\"kd\">public</span> <span class=\"nf\">DispatcherServlet</span><span class=\"o\">(</span><span class=\"nc\">WebApplicationContext</span> <span class=\"n\">webApplicationContext</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">webApplicationContext</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onRefresh</span><span class=\"o\">(</span><span class=\"nc\">ApplicationContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">initStrategies</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n \n\t<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">initStrategies</span><span class=\"o\">(</span><span class=\"nc\">ApplicationContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">initMultipartResolver</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initLocaleResolver</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initThemeResolver</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initHandlerMappings</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initHandlerAdapters</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initHandlerExceptionResolvers</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initRequestToViewNameTranslator</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initViewResolvers</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initFlashMapManager</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>DispatcherServlet类中的属性beans：</p>\n\n<ul>\n  <li>HandlerMapping：用于handlers映射请求和一系列的对于拦截器的前处理和后处理，大部分用@Controller注解。</li>\n  <li>HandlerAdapter：帮助DispatcherServlet处理映射请求处理程序的适配器，而不用考虑实际调用的是 哪个处理程序。- - -</li>\n  <li>ViewResolver：根据实际配置解析实际的View类型。</li>\n  <li>ThemeResolver：解决Web应用程序可以使用的主题，例如提供个性化布局。</li>\n  <li>MultipartResolver：解析多部分请求，以支持从HTML表单上传文件。-</li>\n  <li>FlashMapManager：存储并检索可用于将一个请求属性传递到另一个请求的input和output的FlashMap，通常用于重定向。</li>\n</ul>\n\n<p>在Web MVC框架中，每个DispatcherServlet都拥自己的WebApplicationContext，它继承了ApplicationContext。WebApplicationContext包含了其上下文和Servlet实例之间共享的所有的基础框架beans。</p>\n\n<p><strong>HandlerMapping</strong></p>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/96666164.jpg\" alt=\"HandlerMapping\" /></p>\n\n<p>HandlerMapping接口处理请求的映射HandlerMapping接口的实现类：</p>\n\n<ul>\n  <li>SimpleUrlHandlerMapping类通过配置文件把URL映射到Controller类。</li>\n  <li>DefaultAnnotationHandlerMapping类通过注解把URL映射到Controller类。</li>\n</ul>\n\n<p><strong>HandlerAdapter</strong></p>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/91433100.jpg\" alt=\"HandlerAdapter\" /></p>\n\n<p>HandlerAdapter接口-处理请求映射</p>\n\n<p>AnnotationMethodHandlerAdapter：通过注解，把请求URL映射到Controller类的方法上。</p>\n\n<p><strong>HandlerExceptionResolver</strong></p>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/50343885.jpg\" alt=\"HandlerExceptionResolver\" /></p>\n\n<p>HandlerExceptionResolver接口-异常处理接口</p>\n\n<ul>\n  <li>SimpleMappingExceptionResolver通过配置文件进行异常处理。</li>\n  <li>AnnotationMethodHandlerExceptionResolver：通过注解进行异常处理。</li>\n</ul>\n\n<p><strong>ViewResolver</strong></p>\n\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/49497279.jpg\" alt=\"ViewResolver\" /></p>\n\n<p>ViewResolver接口解析View视图。</p>\n\n<p>UrlBasedViewResolver类 通过配置文件，把一个视图名交给到一个View来处理。</p>\n",
      "desc"     : "先来看一下什么是 MVC 模式MVC 是一种设计模式。MVC 的原理图如下：SpringMVC 简单介绍SpringMVC 框架是以请求为驱动，围绕 Servlet 设计，将请求发给控制器，然后通过模型对象，分派器来展示请求结果视图。其中核心类是 DispatcherServlet，它是一个 Servlet，顶层是实现的Servlet接口。SpringMVC 使用需要在 web.xml 中配..."
} ,
  
  
  
    {
      "title"    : "Spring IOC",
      "title-lower"    : "spring ioc",
      "sub-titile" : "容器源码分析",
      "sub-titile-lower" : "容器源码分析",
      "categories" : "",
      "tags"     : "Spring, IOC, Java",
      "url"      : "/zcblog/2019/03/28/spring-ioc/",
      "date"     : "2019-03-28 00:00:00 +0800",
      "content": "<p>Spring 最重要的概念是 IOC 和 AOP，本篇文章其实就是要带领大家来分析下 Spring 的 IOC 容器。既然大家平时都要用到 Spring，怎么可以不好好了解 Spring 呢？阅读本文并不能让你成为 Spring 专家，不过一定有助于大家理解 Spring 的很多概念，帮助大家排查应用中和 Spring 相关的一些问题。</p>\n\n<p>本文采用的源码版本是 4.3.11.RELEASE，算是 5.0.x 前比较新的版本了。为了降低难度，本文所说的所有的内容都是基于 xml 的配置的方式，实际使用已经很少人这么做了，至少不是纯 xml 配置，不过从理解源码的角度来看用这种方式来说无疑是最合适的。</p>\n\n<p>阅读建议：读者至少需要知道怎么配置 Spring，了解 Spring 中的各种概念，少部分内容我还假设读者使用过 SpringMVC。本文要说的 IOC 总体来说有两处地方最重要，一个是创建 Bean 容器，一个是初始化 Bean，如果读者觉得一次性看完本文压力有点大，那么可以按这个思路分两次消化。读者不一定对 Spring 容器的源码感兴趣，也许附录部分介绍的知识对读者有些许作用。</p>\n\n<p>希望通过本文可以让读者不惧怕阅读 Spring 源码，也希望大家能反馈表述错误或不合理的地方。</p>\n\n<p><strong>目录</strong></p>\n\n<!-- toc -->\n\n<h2 id=\"引言\">引言</h2>\n\n<p>先看下最基本的启动 Spring 容器的例子：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">ApplicationContext</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ClassPathXmlApplicationContext</span><span class=\"o\">(</span><span class=\"s\">\"classpath:applicationfile.xml\"</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>以上代码就可以利用配置文件来启动一个 Spring 容器了，请使用 maven 的小伙伴直接在 dependencies 中加上以下依赖即可，个人比较反对那些不知道要添加什么依赖，然后把 Spring 的所有相关的东西都加进来的方式。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"o\">&lt;</span><span class=\"n\">dependency</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">groupId</span><span class=\"o\">&gt;</span><span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">springframework</span><span class=\"o\">&lt;/</span><span class=\"n\">groupId</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">artifactId</span><span class=\"o\">&gt;</span><span class=\"n\">spring</span><span class=\"o\">-</span><span class=\"n\">context</span><span class=\"o\">&lt;/</span><span class=\"n\">artifactId</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">version</span><span class=\"o\">&gt;</span><span class=\"mf\">4.3</span><span class=\"o\">.</span><span class=\"mi\">11</span><span class=\"o\">.</span><span class=\"na\">RELEASE</span><span class=\"o\">&lt;/</span><span class=\"n\">version</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">dependency</span><span class=\"o\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<blockquote>\n  <p>spring-context 会自动将 spring-core、spring-beans、spring-aop、spring-expression 这几个基础 jar 包带进来。</p>\n</blockquote>\n\n<p>多说一句，很多开发者入门就直接接触的 SpringMVC，对 Spring 其实不是很了解，Spring 是渐进式的工具，并不具有很强的侵入性，它的模块也划分得很合理，即使你的应用不是 web 应用，或者之前完全没有使用到 Spring，而你就想用 Spring 的依赖注入这个功能，其实完全是可以的，它的引入不会对其他的组件产生冲突。</p>\n\n<p>废话说完，我们继续。<code class=\"highlighter-rouge\">ApplicationContext context = new ClassPathXmlApplicationContext(...)</code> 其实很好理解，从名字上就可以猜出一二，就是在 ClassPath 中寻找 xml 配置文件，根据 xml 文件内容来构建 ApplicationContext。当然，除了 ClassPathXmlApplicationContext 以外，我们也还有其他构建 ApplicationContext 的方案可供选择，我们先来看看大体的继承结构是怎么样的：</p>\n\n<p><img src=\"https://www.javadoop.com/blogimages/spring-context/1.png\" alt=\"1\" /></p>\n\n<blockquote>\n  <p>读者可以大致看一下类名，源码分析的时候不至于找不着看哪个类，因为 Spring 为了适应各种使用场景，提供的各个接口都可能有很多的实现类。对于我们来说，就是揪着一个完整的分支看完。</p>\n\n  <p>当然，读本文的时候读者也不必太担心，每个代码块分析的时候，我都会告诉读者我们在说哪个类第几行。</p>\n</blockquote>\n\n<p>我们可以看到，ClassPathXmlApplicationContext 兜兜转转了好久才到 ApplicationContext 接口，同样的，我们也可以使用绿颜色的 <strong>FileSystemXmlApplicationContext</strong> 和 <strong>AnnotationConfigApplicationContext</strong> 这两个类。</p>\n\n<p><strong>FileSystemXmlApplicationContext</strong> 的构造函数需要一个 xml 配置文件在系统中的路径，其他和 ClassPathXmlApplicationContext 基本上一样。</p>\n\n<p><strong>AnnotationConfigApplicationContext</strong> 是基于注解来使用的，它不需要配置文件，采用 java 配置类和各种注解来配置，是比较简单的方式，也是大势所趋吧。</p>\n\n<p>不过本文旨在帮助大家理解整个构建流程，所以决定使用 ClassPathXmlApplicationContext 进行分析。</p>\n\n<p>我们先来一个简单的例子来看看怎么实例化 ApplicationContext。</p>\n\n<p>首先，定义一个接口：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">MessageService</span> <span class=\"o\">{</span>\n    <span class=\"nc\">String</span> <span class=\"nf\">getMessage</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>定义接口实现类：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MessageServiceImpl</span> <span class=\"kd\">implements</span> <span class=\"nc\">MessageService</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"hello world\"</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>接下来，我们在 <strong>resources</strong> 目录新建一个配置文件，文件名随意，通常叫 application.xml 或 application-xxx.xml 就可以了：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\n<span class=\"nt\">&lt;beans</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span> <span class=\"na\">default-autowire=</span><span class=\"s\">\"byName\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"messageService\"</span> <span class=\"na\">class=</span><span class=\"s\">\"com.javadoop.example.MessageServiceImpl\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/beans&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>这样，我们就可以跑起来了：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 用我们的配置文件来启动一个 ApplicationContext</span>\n        <span class=\"nc\">ApplicationContext</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ClassPathXmlApplicationContext</span><span class=\"o\">(</span><span class=\"s\">\"classpath:application.xml\"</span><span class=\"o\">);</span>\n      \n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"context 启动成功\"</span><span class=\"o\">);</span>\n      \n        <span class=\"c1\">// 从 context 中取出我们的 Bean，而不是用 new MessageServiceImpl() 这种方式</span>\n        <span class=\"nc\">MessageService</span> <span class=\"n\">messageService</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"nc\">MessageService</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 这句将输出: hello world</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">messageService</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>以上例子很简单，不过也够引出本文的主题了，就是怎么样通过配置文件来启动 Spring 的 ApplicationContext？也就是我们今天要分析的 IOC 的核心了。ApplicationContext 启动过程中，会负责创建实例 Bean，往各个 Bean 中注入依赖等。</p>\n\n<h2 id=\"beanfactory-简介\">BeanFactory 简介</h2>\n\n<p>BeanFactory，从名字上也很好理解，生产 bean 的工厂，它负责生产和管理各个 bean 实例。</p>\n\n<p>初学者可别以为我之前说那么多和 BeanFactory 无关，前面说的 ApplicationContext 其实就是一个 BeanFactory。我们来看下和 BeanFactory 接口相关的主要的继承结构：</p>\n\n<p><img src=\"https://www.javadoop.com/blogimages/spring-context/2.png\" alt=\"2\" /></p>\n\n<p>我想，大家看完这个图以后，可能就不是很开心了。ApplicationContext 往下的继承结构前面一张图说过了，这里就不重复了。这张图呢，背下来肯定是不需要的，有几个重点和大家说明下就好。</p>\n\n<ol>\n  <li>ApplicationContext 继承了 ListableBeanFactory，这个 Listable 的意思就是，通过这个接口，我们可以获取多个 Bean，大家看源码会发现，最顶层 BeanFactory 接口的方法都是获取单个 Bean 的。</li>\n  <li>ApplicationContext 继承了 HierarchicalBeanFactory，Hierarchical 单词本身已经能说明问题了，也就是说我们可以在应用中起多个 BeanFactory，然后可以将各个 BeanFactory 设置为父子关系。</li>\n  <li>AutowireCapableBeanFactory 这个名字中的 Autowire 大家都非常熟悉，它就是用来自动装配 Bean 用的，但是仔细看上图，ApplicationContext 并没有继承它，不过不用担心，不使用继承，不代表不可以使用组合，如果你看到 ApplicationContext 接口定义中的最后一个方法 getAutowireCapableBeanFactory() 就知道了。</li>\n  <li>ConfigurableListableBeanFactory 也是一个特殊的接口，看图，特殊之处在于它继承了第二层所有的三个接口，而 ApplicationContext 没有。这点之后会用到。</li>\n  <li>请先不用花时间在其他的接口和类上，先理解我说的这几点就可以了。</li>\n</ol>\n\n<p>然后，请读者打开编辑器，翻一下 BeanFactory、ListableBeanFactory、HierarchicalBeanFactory、AutowireCapableBeanFactory、ApplicationContext 这几个接口的代码，大概看一下各个接口中的方法，大家心里要有底，限于篇幅，我就不贴代码介绍了。</p>\n\n<h2 id=\"启动过程分析\">启动过程分析</h2>\n\n<p>下面将会是冗长的代码分析，记住，一定要自己打开源码来看，不然纯看是很累的。</p>\n\n<p>第一步，我们肯定要从 ClassPathXmlApplicationContext 的构造方法说起。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ClassPathXmlApplicationContext</span> <span class=\"kd\">extends</span> <span class=\"nc\">AbstractXmlApplicationContext</span> <span class=\"o\">{</span>\n  <span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">[]</span> <span class=\"n\">configResources</span><span class=\"o\">;</span>\n  \n  <span class=\"c1\">// 如果已经有 ApplicationContext 并需要配置成父子关系，那么调用这个构造方法</span>\n  <span class=\"kd\">public</span> <span class=\"nf\">ClassPathXmlApplicationContext</span><span class=\"o\">(</span><span class=\"nc\">ApplicationContext</span> <span class=\"n\">parent</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n  <span class=\"o\">...</span>\n  <span class=\"kd\">public</span> <span class=\"nf\">ClassPathXmlApplicationContext</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">configLocations</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">refresh</span><span class=\"o\">,</span> <span class=\"nc\">ApplicationContext</span> <span class=\"n\">parent</span><span class=\"o\">)</span>\n      <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n    <span class=\"c1\">// 根据提供的路径，处理成配置文件数组(以分号、逗号、空格、tab、换行符分割)</span>\n    <span class=\"n\">setConfigLocations</span><span class=\"o\">(</span><span class=\"n\">configLocations</span><span class=\"o\">);</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">refresh</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">refresh</span><span class=\"o\">();</span> <span class=\"c1\">// 核心方法</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n    <span class=\"o\">...</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>接下来，就是 refresh()，这里简单说下为什么是 refresh()，而不是 init() 这种名字的方法。因为 ApplicationContext 建立起来以后，其实我们是可以通过调用 refresh() 这个方法重建的，refresh() 会将原来的 ApplicationContext 销毁，然后再重新执行一次初始化操作。</p>\n\n<p>往下看，refresh() 方法里面调用了那么多方法，就知道肯定不简单了，请读者先看个大概，细节之后会详细说。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">refresh</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span><span class=\"o\">,</span> <span class=\"nc\">IllegalStateException</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span>\n   <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">startupShutdownMonitor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n      <span class=\"c1\">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span>\n      <span class=\"n\">prepareRefresh</span><span class=\"o\">();</span>\n     \n      <span class=\"c1\">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span>\n      <span class=\"c1\">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span>\n      <span class=\"c1\">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span>\n      <span class=\"nc\">ConfigurableListableBeanFactory</span> <span class=\"n\">beanFactory</span> <span class=\"o\">=</span> <span class=\"n\">obtainFreshBeanFactory</span><span class=\"o\">();</span>\n\n      <span class=\"c1\">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span>\n      <span class=\"c1\">// 这块待会会展开说</span>\n      <span class=\"n\">prepareBeanFactory</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span>\n         <span class=\"c1\">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span>\n        \n         <span class=\"c1\">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span>\n         <span class=\"c1\">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span>\n         <span class=\"n\">postProcessBeanFactory</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n         <span class=\"c1\">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span>\n         <span class=\"n\">invokeBeanFactoryPostProcessors</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n\n         <span class=\"c1\">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span>\n         <span class=\"c1\">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span>\n         <span class=\"c1\">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span>\n         <span class=\"n\">registerBeanPostProcessors</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n\n         <span class=\"c1\">// 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span>\n         <span class=\"n\">initMessageSource</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span>\n         <span class=\"n\">initApplicationEventMulticaster</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span>\n         <span class=\"c1\">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span>\n         <span class=\"n\">onRefresh</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span>\n         <span class=\"n\">registerListeners</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// 重点，重点，重点</span>\n         <span class=\"c1\">// 初始化所有的 singleton beans</span>\n         <span class=\"c1\">//（lazy-init 的除外）</span>\n         <span class=\"n\">finishBeanFactoryInitialization</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n\n         <span class=\"c1\">// 最后，广播事件，ApplicationContext 初始化完成</span>\n         <span class=\"n\">finishRefresh</span><span class=\"o\">();</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BeansException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isWarnEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">warn</span><span class=\"o\">(</span><span class=\"s\">\"Exception encountered during context initialization - \"</span> <span class=\"o\">+</span>\n                  <span class=\"s\">\"cancelling refresh attempt: \"</span> <span class=\"o\">+</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n\n         <span class=\"c1\">// Destroy already created singletons to avoid dangling resources.</span>\n         <span class=\"c1\">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span>\n         <span class=\"n\">destroyBeans</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// Reset 'active' flag.</span>\n         <span class=\"n\">cancelRefresh</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">);</span>\n\n         <span class=\"c1\">// 把异常往外抛</span>\n         <span class=\"k\">throw</span> <span class=\"n\">ex</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"k\">finally</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// Reset common introspection caches in Spring's core, since we</span>\n         <span class=\"c1\">// might not ever need metadata for singleton beans anymore...</span>\n         <span class=\"n\">resetCommonCaches</span><span class=\"o\">();</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>下面，我们开始一步步来肢解这个 refresh() 方法。</p>\n\n<h3 id=\"创建-bean-容器前的准备工作\">创建 Bean 容器前的准备工作</h3>\n\n<p>这个比较简单，直接看代码中的几个注释即可。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">prepareRefresh</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 记录启动时间，</span>\n   <span class=\"c1\">// 将 active 属性设置为 true，closed 属性设置为 false，它们都是 AtomicBoolean 类型</span>\n   <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">startupDate</span> <span class=\"o\">=</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">();</span>\n   <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">closed</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"kc\">false</span><span class=\"o\">);</span>\n   <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">active</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isInfoEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">\"Refreshing \"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// Initialize any placeholder property sources in the context environment</span>\n   <span class=\"n\">initPropertySources</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 校验 xml 配置文件</span>\n   <span class=\"n\">getEnvironment</span><span class=\"o\">().</span><span class=\"na\">validateRequiredProperties</span><span class=\"o\">();</span>\n\n   <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">earlyApplicationEvents</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LinkedHashSet</span><span class=\"o\">&lt;</span><span class=\"nc\">ApplicationEvent</span><span class=\"o\">&gt;();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"创建-bean-容器加载并注册-bean\">创建 Bean 容器，加载并注册 Bean</h3>\n\n<p>我们回到 refresh() 方法中的下一行 obtainFreshBeanFactory()。</p>\n\n<p>注意，这个方法是全文最重要的部分之一，这里将会初始化 BeanFactory、加载 Bean、注册 Bean 等等。</p>\n\n<p>当然，这步结束后，Bean 并没有完成初始化。这里指的是 Bean 实例并未在这一步生成。</p>\n\n<p>// AbstractApplicationContext.java</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"nc\">ConfigurableListableBeanFactory</span> <span class=\"nf\">obtainFreshBeanFactory</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 关闭旧的 BeanFactory (如果有)，创建新的 BeanFactory，加载 Bean 定义、注册 Bean 等等</span>\n   <span class=\"n\">refreshBeanFactory</span><span class=\"o\">();</span>\n  \n   <span class=\"c1\">// 返回刚刚创建的 BeanFactory</span>\n   <span class=\"nc\">ConfigurableListableBeanFactory</span> <span class=\"n\">beanFactory</span> <span class=\"o\">=</span> <span class=\"n\">getBeanFactory</span><span class=\"o\">();</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Bean factory for \"</span> <span class=\"o\">+</span> <span class=\"n\">getDisplayName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\": \"</span> <span class=\"o\">+</span> <span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">beanFactory</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>// AbstractRefreshableApplicationContext.java 120</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Override</span>\n<span class=\"kd\">protected</span> <span class=\"kd\">final</span> <span class=\"kt\">void</span> <span class=\"nf\">refreshBeanFactory</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 如果 ApplicationContext 中已经加载过 BeanFactory 了，销毁所有 Bean，关闭 BeanFactory</span>\n   <span class=\"c1\">// 注意，应用中 BeanFactory 本来就是可以多个的，这里可不是说应用全局是否有 BeanFactory，而是当前</span>\n   <span class=\"c1\">// ApplicationContext 是否有 BeanFactory</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasBeanFactory</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">destroyBeans</span><span class=\"o\">();</span>\n      <span class=\"n\">closeBeanFactory</span><span class=\"o\">();</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 初始化一个 DefaultListableBeanFactory，为什么用这个，我们马上说。</span>\n      <span class=\"nc\">DefaultListableBeanFactory</span> <span class=\"n\">beanFactory</span> <span class=\"o\">=</span> <span class=\"n\">createBeanFactory</span><span class=\"o\">();</span>\n      <span class=\"c1\">// 用于 BeanFactory 的序列化，我想不部分人应该都用不到</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">setSerializationId</span><span class=\"o\">(</span><span class=\"n\">getId</span><span class=\"o\">());</span>\n     \n      <span class=\"c1\">// 下面这两个方法很重要，别跟丢了，具体细节之后说</span>\n      <span class=\"c1\">// 设置 BeanFactory 的两个配置属性：是否允许 Bean 覆盖、是否允许循环引用</span>\n      <span class=\"n\">customizeBeanFactory</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n     \n      <span class=\"c1\">// 加载 Bean 到 BeanFactory 中</span>\n      <span class=\"n\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n      <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanFactoryMonitor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanFactory</span> <span class=\"o\">=</span> <span class=\"n\">beanFactory</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">ApplicationContextException</span><span class=\"o\">(</span><span class=\"s\">\"I/O error parsing bean definition source for \"</span> <span class=\"o\">+</span> <span class=\"n\">getDisplayName</span><span class=\"o\">(),</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<blockquote>\n  <p>看到这里的时候，我觉得读者就应该站在高处看 ApplicationContext 了，ApplicationContext 继承自 BeanFactory，但是它不应该被理解为 BeanFactory 的实现类，而是说其内部持有一个实例化的 BeanFactory（DefaultListableBeanFactory）。以后所有的 BeanFactory 相关的操作其实是委托给这个实例来处理的。</p>\n</blockquote>\n\n<p>我们说说为什么选择实例化 <strong>DefaultListableBeanFactory</strong> ？前面我们说了有个很重要的接口 ConfigurableListableBeanFactory，它实现了 BeanFactory 下面一层的所有三个接口，我把之前的继承图再拿过来大家再仔细看一下：</p>\n\n<p><img src=\"https://www.javadoop.com/blogimages/spring-context/3.png\" alt=\"3\" /></p>\n\n<p>我们可以看到 ConfigurableListableBeanFactory 只有一个实现类 DefaultListableBeanFactory，而且实现类 DefaultListableBeanFactory 还通过实现右边的 AbstractAutowireCapableBeanFactory 通吃了右路。所以结论就是，最底下这个家伙 DefaultListableBeanFactory 基本上是最牛的 BeanFactory 了，这也是为什么这边会使用这个类来实例化的原因。</p>\n\n<blockquote>\n  <p>如果你想要在程序运行的时候动态往 Spring IOC 容器注册新的 bean，就会使用到这个类。那我们怎么在运行时获得这个实例呢？</p>\n\n  <p>之前我们说过 ApplicationContext 接口能获取到 AutowireCapableBeanFactory，就是最右上角那个，然后它向下转型就能得到 DefaultListableBeanFactory 了。</p>\n</blockquote>\n\n<p>在继续往下之前，我们需要先了解 BeanDefinition。<strong>我们说 BeanFactory 是 Bean 容器，那么 Bean 又是什么呢？</strong></p>\n\n<p>这里的 BeanDefinition 就是我们所说的 Spring 的 Bean，我们自己定义的各个 Bean 其实会转换成一个个 BeanDefinition 存在于 Spring 的 BeanFactory 中。</p>\n\n<p>所以，如果有人问你 Bean 是什么的时候，你要知道 Bean 在代码层面上可以认为是 BeanDefinition 的实例。</p>\n\n<blockquote>\n  <p>BeanDefinition 中保存了我们的 Bean 信息，比如这个 Bean 指向的是哪个类、是否是单例的、是否懒加载、这个 Bean 依赖了哪些 Bean 等等。</p>\n</blockquote>\n\n<h4 id=\"beandefinition-接口定义\">BeanDefinition 接口定义</h4>\n\n<p>我们来看下 BeanDefinition 的接口定义：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">BeanDefinition</span> <span class=\"kd\">extends</span> <span class=\"nc\">AttributeAccessor</span><span class=\"o\">,</span> <span class=\"nc\">BeanMetadataElement</span> <span class=\"o\">{</span>\n\n   <span class=\"c1\">// 我们可以看到，默认只提供 sington 和 prototype 两种，</span>\n   <span class=\"c1\">// 很多读者可能知道还有 request, session, globalSession, application, websocket 这几种，</span>\n   <span class=\"c1\">// 不过，它们属于基于 web 的扩展。</span>\n   <span class=\"nc\">String</span> <span class=\"no\">SCOPE_SINGLETON</span> <span class=\"o\">=</span> <span class=\"nc\">ConfigurableBeanFactory</span><span class=\"o\">.</span><span class=\"na\">SCOPE_SINGLETON</span><span class=\"o\">;</span>\n   <span class=\"nc\">String</span> <span class=\"no\">SCOPE_PROTOTYPE</span> <span class=\"o\">=</span> <span class=\"nc\">ConfigurableBeanFactory</span><span class=\"o\">.</span><span class=\"na\">SCOPE_PROTOTYPE</span><span class=\"o\">;</span>\n\n   <span class=\"c1\">// 比较不重要，直接跳过吧</span>\n   <span class=\"kt\">int</span> <span class=\"no\">ROLE_APPLICATION</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n   <span class=\"kt\">int</span> <span class=\"no\">ROLE_SUPPORT</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n   <span class=\"kt\">int</span> <span class=\"no\">ROLE_INFRASTRUCTURE</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n\n   <span class=\"c1\">// 设置父 Bean，这里涉及到 bean 继承，不是 java 继承。请参见附录的详细介绍</span>\n   <span class=\"c1\">// 一句话就是：继承父 Bean 的配置信息而已</span>\n   <span class=\"kt\">void</span> <span class=\"nf\">setParentName</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">parentName</span><span class=\"o\">);</span>\n  \n   <span class=\"c1\">// 获取父 Bean</span>\n   <span class=\"nc\">String</span> <span class=\"nf\">getParentName</span><span class=\"o\">();</span>\n  \n   <span class=\"c1\">// 设置 Bean 的类名称，将来是要通过反射来生成实例的</span>\n   <span class=\"kt\">void</span> <span class=\"nf\">setBeanClassName</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">beanClassName</span><span class=\"o\">);</span>\n   \n   <span class=\"c1\">// 获取 Bean 的类名称</span>\n   <span class=\"nc\">String</span> <span class=\"nf\">getBeanClassName</span><span class=\"o\">();</span>\n\n \n   <span class=\"c1\">// 设置 bean 的 scope</span>\n   <span class=\"kt\">void</span> <span class=\"nf\">setScope</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">scope</span><span class=\"o\">);</span>\n\n   <span class=\"nc\">String</span> <span class=\"nf\">getScope</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 设置是否懒加载</span>\n   <span class=\"kt\">void</span> <span class=\"nf\">setLazyInit</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">lazyInit</span><span class=\"o\">);</span>\n   \n   <span class=\"kt\">boolean</span> <span class=\"nf\">isLazyInit</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 设置该 Bean 依赖的所有的 Bean，注意，这里的依赖不是指属性依赖(如 @Autowire 标记的)，</span>\n   <span class=\"c1\">// 是 depends-on=\"\" 属性设置的值。</span>\n   <span class=\"kt\">void</span> <span class=\"nf\">setDependsOn</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">...</span> <span class=\"n\">dependsOn</span><span class=\"o\">);</span>\n\n   <span class=\"c1\">// 返回该 Bean 的所有依赖</span>\n   <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"nf\">getDependsOn</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 设置该 Bean 是否可以注入到其他 Bean 中，只对根据类型注入有效，</span>\n   <span class=\"c1\">// 如果根据名称注入，即使这边设置了 false，也是可以的</span>\n   <span class=\"kt\">void</span> <span class=\"nf\">setAutowireCandidate</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">autowireCandidate</span><span class=\"o\">);</span>\n\n   <span class=\"c1\">// 该 Bean 是否可以注入到其他 Bean 中</span>\n   <span class=\"kt\">boolean</span> <span class=\"nf\">isAutowireCandidate</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 主要的。同一接口的多个实现，如果不指定名字的话，Spring 会优先选择设置 primary 为 true 的 bean</span>\n   <span class=\"kt\">void</span> <span class=\"nf\">setPrimary</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">primary</span><span class=\"o\">);</span>\n\n   <span class=\"c1\">// 是否是 primary 的</span>\n   <span class=\"kt\">boolean</span> <span class=\"nf\">isPrimary</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 如果该 Bean 采用工厂方法生成，指定工厂名称。对工厂不熟悉的读者，请参加附录</span>\n   <span class=\"c1\">// 一句话就是：有些实例不是用反射生成的，而是用工厂模式生成的</span>\n   <span class=\"kt\">void</span> <span class=\"nf\">setFactoryBeanName</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">factoryBeanName</span><span class=\"o\">);</span>\n   <span class=\"c1\">// 获取工厂名称</span>\n   <span class=\"nc\">String</span> <span class=\"nf\">getFactoryBeanName</span><span class=\"o\">();</span>\n   <span class=\"c1\">// 指定工厂类中的 工厂方法名称</span>\n   <span class=\"kt\">void</span> <span class=\"nf\">setFactoryMethodName</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">factoryMethodName</span><span class=\"o\">);</span>\n   <span class=\"c1\">// 获取工厂类中的 工厂方法名称</span>\n   <span class=\"nc\">String</span> <span class=\"nf\">getFactoryMethodName</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 构造器参数</span>\n   <span class=\"nc\">ConstructorArgumentValues</span> <span class=\"nf\">getConstructorArgumentValues</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// Bean 中的属性值，后面给 bean 注入属性值的时候会说到</span>\n   <span class=\"nc\">MutablePropertyValues</span> <span class=\"nf\">getPropertyValues</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 是否 singleton</span>\n   <span class=\"kt\">boolean</span> <span class=\"nf\">isSingleton</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 是否 prototype</span>\n   <span class=\"kt\">boolean</span> <span class=\"nf\">isPrototype</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 如果这个 Bean 是被设置为 abstract，那么不能实例化，</span>\n   <span class=\"c1\">// 常用于作为 父bean 用于继承，其实也很少用......</span>\n   <span class=\"kt\">boolean</span> <span class=\"nf\">isAbstract</span><span class=\"o\">();</span>\n\n   <span class=\"kt\">int</span> <span class=\"nf\">getRole</span><span class=\"o\">();</span>\n   <span class=\"nc\">String</span> <span class=\"nf\">getDescription</span><span class=\"o\">();</span>\n   <span class=\"nc\">String</span> <span class=\"nf\">getResourceDescription</span><span class=\"o\">();</span>\n   <span class=\"nc\">BeanDefinition</span> <span class=\"nf\">getOriginatingBeanDefinition</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<blockquote>\n  <p>这个 BeanDefinition 其实已经包含很多的信息了，暂时不清楚所有的方法对应什么东西没关系，希望看完本文后读者可以彻底搞清楚里面的所有东西。</p>\n\n  <p>这里接口虽然那么多，但是没有类似 getInstance() 这种方法来获取我们定义的类的实例，真正的我们定义的类生成的实例到哪里去了呢？别着急，这个要很后面才能讲到。</p>\n</blockquote>\n\n<p>有了 BeanDefinition 的概念以后，我们再往下看 refreshBeanFactory() 方法中的剩余部分：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">customizeBeanFactory</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n<span class=\"n\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>虽然只有两个方法，但路还很长啊。。。</p>\n\n<h4 id=\"customizebeanfactory\">customizeBeanFactory</h4>\n\n<p>customizeBeanFactory(beanFactory) 比较简单，就是配置是否允许 BeanDefinition 覆盖、是否允许循环引用。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">customizeBeanFactory</span><span class=\"o\">(</span><span class=\"nc\">DefaultListableBeanFactory</span> <span class=\"n\">beanFactory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">allowBeanDefinitionOverriding</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 是否允许 Bean 定义覆盖</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">setAllowBeanDefinitionOverriding</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">allowBeanDefinitionOverriding</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">allowCircularReferences</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 是否允许 Bean 间的循环依赖</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">setAllowCircularReferences</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">allowCircularReferences</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>BeanDefinition 的覆盖问题可能会有开发者碰到这个坑，就是在配置文件中定义 bean 时使用了相同的 id 或 name，默认情况下，allowBeanDefinitionOverriding 属性为 null，如果在同一配置文件中重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p>\n\n<p>循环引用也很好理解：A 依赖 B，而 B 依赖 A。或 A 依赖 B，B 依赖 C，而 C 依赖 A。</p>\n\n<p>默认情况下，Spring 允许循环依赖，当然如果你在 A 的构造方法中依赖 B，在 B 的构造方法中依赖 A 是不行的。</p>\n\n<p>至于这两个属性怎么配置？我在附录中进行了介绍，尤其对于覆盖问题，很多人都希望禁止出现 Bean 覆盖，可是 Spring 默认是不同文件的时候可以覆盖的。</p>\n\n<p>之后的源码中还会出现这两个属性，读者有个印象就可以了。</p>\n\n<h4 id=\"加载-bean-loadbeandefinitions\">加载 Bean: loadBeanDefinitions</h4>\n\n<p>接下来是最重要的 loadBeanDefinitions(beanFactory) 方法了，这个方法将根据配置，加载各个 Bean，然后放到 BeanFactory 中。</p>\n\n<p>读取配置的操作在 XmlBeanDefinitionReader 中，其负责加载配置、解析。</p>\n\n<p>// AbstractXmlApplicationContext.java 80</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cm\">/** 我们可以看到，此方法将通过一个 XmlBeanDefinitionReader 实例来加载各个 Bean。*/</span>\n<span class=\"nd\">@Override</span>\n<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">DefaultListableBeanFactory</span> <span class=\"n\">beanFactory</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span><span class=\"o\">,</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 给这个 BeanFactory 实例化一个 XmlBeanDefinitionReader</span>\n   <span class=\"nc\">XmlBeanDefinitionReader</span> <span class=\"n\">beanDefinitionReader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">XmlBeanDefinitionReader</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n\n   <span class=\"c1\">// Configure the bean definition reader with this context's</span>\n   <span class=\"c1\">// resource loading environment.</span>\n   <span class=\"n\">beanDefinitionReader</span><span class=\"o\">.</span><span class=\"na\">setEnvironment</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">getEnvironment</span><span class=\"o\">());</span>\n   <span class=\"n\">beanDefinitionReader</span><span class=\"o\">.</span><span class=\"na\">setResourceLoader</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n   <span class=\"n\">beanDefinitionReader</span><span class=\"o\">.</span><span class=\"na\">setEntityResolver</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ResourceEntityResolver</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">));</span>\n\n   <span class=\"c1\">// 初始化 BeanDefinitionReader，其实这个是提供给子类覆写的，</span>\n   <span class=\"c1\">// 我看了一下，没有类覆写这个方法，我们姑且当做不重要吧</span>\n   <span class=\"n\">initBeanDefinitionReader</span><span class=\"o\">(</span><span class=\"n\">beanDefinitionReader</span><span class=\"o\">);</span>\n   <span class=\"c1\">// 重点来了，继续往下</span>\n   <span class=\"n\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">beanDefinitionReader</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>现在还在这个类中，接下来用刚刚初始化的 Reader 开始来加载 xml 配置，这块代码读者可以选择性跳过，不是很重要。也就是说，下面这个代码块，读者可以很轻松地略过。</p>\n\n<p>// AbstractXmlApplicationContext.java 120</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">XmlBeanDefinitionReader</span> <span class=\"n\">reader</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span><span class=\"o\">,</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n   <span class=\"nc\">Resource</span><span class=\"o\">[]</span> <span class=\"n\">configResources</span> <span class=\"o\">=</span> <span class=\"n\">getConfigResources</span><span class=\"o\">();</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">configResources</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 往下看</span>\n      <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"na\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">configResources</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">configLocations</span> <span class=\"o\">=</span> <span class=\"n\">getConfigLocations</span><span class=\"o\">();</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">configLocations</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 2</span>\n      <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"na\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">configLocations</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 上面虽然有两个分支，不过第二个分支很快通过解析路径转换为 Resource 以后也会进到这里</span>\n<span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">Resource</span><span class=\"o\">...</span> <span class=\"n\">resources</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeanDefinitionStoreException</span> <span class=\"o\">{</span>\n   <span class=\"nc\">Assert</span><span class=\"o\">.</span><span class=\"na\">notNull</span><span class=\"o\">(</span><span class=\"n\">resources</span><span class=\"o\">,</span> <span class=\"s\">\"Resource array must not be null\"</span><span class=\"o\">);</span>\n   <span class=\"kt\">int</span> <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n   <span class=\"c1\">// 注意这里是个 for 循环，也就是每个文件是一个 resource</span>\n   <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Resource</span> <span class=\"n\">resource</span> <span class=\"o\">:</span> <span class=\"n\">resources</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 继续往下看</span>\n      <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"n\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">// 最后返回 counter，表示总共加载了多少的 BeanDefinition</span>\n   <span class=\"k\">return</span> <span class=\"n\">counter</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// XmlBeanDefinitionReader 303</span>\n<span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">Resource</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeanDefinitionStoreException</span> <span class=\"o\">{</span>\n   <span class=\"k\">return</span> <span class=\"nf\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">EncodedResource</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// XmlBeanDefinitionReader 314</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">loadBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">EncodedResource</span> <span class=\"n\">encodedResource</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeanDefinitionStoreException</span> <span class=\"o\">{</span>\n   <span class=\"nc\">Assert</span><span class=\"o\">.</span><span class=\"na\">notNull</span><span class=\"o\">(</span><span class=\"n\">encodedResource</span><span class=\"o\">,</span> <span class=\"s\">\"EncodedResource must not be null\"</span><span class=\"o\">);</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isInfoEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">\"Loading XML bean definitions from \"</span> <span class=\"o\">+</span> <span class=\"n\">encodedResource</span><span class=\"o\">.</span><span class=\"na\">getResource</span><span class=\"o\">());</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">// 用一个 ThreadLocal 来存放配置文件资源</span>\n   <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">EncodedResource</span><span class=\"o\">&gt;</span> <span class=\"n\">currentResources</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">resourcesCurrentlyBeingLoaded</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">currentResources</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">currentResources</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashSet</span><span class=\"o\">&lt;</span><span class=\"nc\">EncodedResource</span><span class=\"o\">&gt;(</span><span class=\"mi\">4</span><span class=\"o\">);</span>\n      <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">resourcesCurrentlyBeingLoaded</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"n\">currentResources</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">currentResources</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">encodedResource</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanDefinitionStoreException</span><span class=\"o\">(</span>\n            <span class=\"s\">\"Detected cyclic loading of \"</span> <span class=\"o\">+</span> <span class=\"n\">encodedResource</span> <span class=\"o\">+</span> <span class=\"s\">\" - check your import definitions!\"</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"nc\">InputStream</span> <span class=\"n\">inputStream</span> <span class=\"o\">=</span> <span class=\"n\">encodedResource</span><span class=\"o\">.</span><span class=\"na\">getResource</span><span class=\"o\">().</span><span class=\"na\">getInputStream</span><span class=\"o\">();</span>\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n         <span class=\"nc\">InputSource</span> <span class=\"n\">inputSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">InputSource</span><span class=\"o\">(</span><span class=\"n\">inputStream</span><span class=\"o\">);</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">encodedResource</span><span class=\"o\">.</span><span class=\"na\">getEncoding</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">inputSource</span><span class=\"o\">.</span><span class=\"na\">setEncoding</span><span class=\"o\">(</span><span class=\"n\">encodedResource</span><span class=\"o\">.</span><span class=\"na\">getEncoding</span><span class=\"o\">());</span>\n         <span class=\"o\">}</span>\n         <span class=\"c1\">// 核心部分是这里，往下面看</span>\n         <span class=\"k\">return</span> <span class=\"nf\">doLoadBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">inputSource</span><span class=\"o\">,</span> <span class=\"n\">encodedResource</span><span class=\"o\">.</span><span class=\"na\">getResource</span><span class=\"o\">());</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">finally</span> <span class=\"o\">{</span>\n         <span class=\"n\">inputStream</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanDefinitionStoreException</span><span class=\"o\">(</span>\n            <span class=\"s\">\"IOException parsing XML document from \"</span> <span class=\"o\">+</span> <span class=\"n\">encodedResource</span><span class=\"o\">.</span><span class=\"na\">getResource</span><span class=\"o\">(),</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">finally</span> <span class=\"o\">{</span>\n      <span class=\"n\">currentResources</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">encodedResource</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">currentResources</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">resourcesCurrentlyBeingLoaded</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 还在这个文件中，第 388 行</span>\n<span class=\"kd\">protected</span> <span class=\"kt\">int</span> <span class=\"nf\">doLoadBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">InputSource</span> <span class=\"n\">inputSource</span><span class=\"o\">,</span> <span class=\"nc\">Resource</span> <span class=\"n\">resource</span><span class=\"o\">)</span>\n      <span class=\"kd\">throws</span> <span class=\"nc\">BeanDefinitionStoreException</span> <span class=\"o\">{</span>\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 这里就不看了，将 xml 文件转换为 Document 对象</span>\n      <span class=\"nc\">Document</span> <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">doLoadDocument</span><span class=\"o\">(</span><span class=\"n\">inputSource</span><span class=\"o\">,</span> <span class=\"n\">resource</span><span class=\"o\">);</span>\n      <span class=\"c1\">// 继续</span>\n      <span class=\"k\">return</span> <span class=\"nf\">registerBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">doc</span><span class=\"o\">,</span> <span class=\"n\">resource</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(...</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// 还在这个文件中，第 505 行</span>\n<span class=\"c1\">// 返回值：返回从当前配置文件加载了多少数量的 Bean</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">registerBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">Document</span> <span class=\"n\">doc</span><span class=\"o\">,</span> <span class=\"nc\">Resource</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeanDefinitionStoreException</span> <span class=\"o\">{</span>\n   <span class=\"nc\">BeanDefinitionDocumentReader</span> <span class=\"n\">documentReader</span> <span class=\"o\">=</span> <span class=\"n\">createBeanDefinitionDocumentReader</span><span class=\"o\">();</span>\n   <span class=\"kt\">int</span> <span class=\"n\">countBefore</span> <span class=\"o\">=</span> <span class=\"n\">getRegistry</span><span class=\"o\">().</span><span class=\"na\">getBeanDefinitionCount</span><span class=\"o\">();</span>\n   <span class=\"c1\">// 这里</span>\n   <span class=\"n\">documentReader</span><span class=\"o\">.</span><span class=\"na\">registerBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">doc</span><span class=\"o\">,</span> <span class=\"n\">createReaderContext</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">));</span>\n   <span class=\"k\">return</span> <span class=\"nf\">getRegistry</span><span class=\"o\">().</span><span class=\"na\">getBeanDefinitionCount</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">countBefore</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// DefaultBeanDefinitionDocumentReader 90</span>\n<span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">registerBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">Document</span> <span class=\"n\">doc</span><span class=\"o\">,</span> <span class=\"nc\">XmlReaderContext</span> <span class=\"n\">readerContext</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">readerContext</span> <span class=\"o\">=</span> <span class=\"n\">readerContext</span><span class=\"o\">;</span>\n   <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Loading bean definitions\"</span><span class=\"o\">);</span>\n   <span class=\"nc\">Element</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"na\">getDocumentElement</span><span class=\"o\">();</span>\n   <span class=\"c1\">// 从 xml 根节点开始解析文件</span>\n   <span class=\"n\">doRegisterBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>         \n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>经过漫长的链路，一个配置文件终于转换为一颗 DOM 树了，注意，这里指的是其中一个配置文件，不是所有的，读者可以看到上面有个 for 循环的。下面开始从根节点开始解析：</p>\n\n<h5 id=\"doregisterbeandefinitions\">doRegisterBeanDefinitions：</h5>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DefaultBeanDefinitionDocumentReader 116</span>\n<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">doRegisterBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">Element</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 我们看名字就知道，BeanDefinitionParserDelegate 必定是一个重要的类，它负责解析 Bean 定义，</span>\n   <span class=\"c1\">// 这里为什么要定义一个 parent? 看到后面就知道了，是递归问题，</span>\n   <span class=\"c1\">// 因为 &lt;beans /&gt; 内部是可以定义 &lt;beans /&gt; 的，所以这个方法的 root 其实不一定就是 xml 的根节点，也可以是嵌套在里面的 &lt;beans /&gt; 节点，从源码分析的角度，我们当做根节点就好了</span>\n   <span class=\"nc\">BeanDefinitionParserDelegate</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">delegate</span><span class=\"o\">;</span>\n   <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">delegate</span> <span class=\"o\">=</span> <span class=\"n\">createDelegate</span><span class=\"o\">(</span><span class=\"n\">getReaderContext</span><span class=\"o\">(),</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"o\">);</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">delegate</span><span class=\"o\">.</span><span class=\"na\">isDefaultNamespace</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 这块说的是根节点 &lt;beans ... profile=\"dev\" /&gt; 中的 profile 是否是当前环境需要的，</span>\n      <span class=\"c1\">// 如果当前环境配置的 profile 不包含此 profile，那就直接 return 了，不对此 &lt;beans /&gt; 解析</span>\n      <span class=\"c1\">// 不熟悉 profile 为何物，不熟悉怎么配置 profile 读者的请移步附录区</span>\n      <span class=\"nc\">String</span> <span class=\"n\">profileSpec</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">getAttribute</span><span class=\"o\">(</span><span class=\"no\">PROFILE_ATTRIBUTE</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">hasText</span><span class=\"o\">(</span><span class=\"n\">profileSpec</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n         <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">specifiedProfiles</span> <span class=\"o\">=</span> <span class=\"nc\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">tokenizeToStringArray</span><span class=\"o\">(</span>\n               <span class=\"n\">profileSpec</span><span class=\"o\">,</span> <span class=\"nc\">BeanDefinitionParserDelegate</span><span class=\"o\">.</span><span class=\"na\">MULTI_VALUE_ATTRIBUTE_DELIMITERS</span><span class=\"o\">);</span>\n         <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">getReaderContext</span><span class=\"o\">().</span><span class=\"na\">getEnvironment</span><span class=\"o\">().</span><span class=\"na\">acceptsProfiles</span><span class=\"o\">(</span><span class=\"n\">specifiedProfiles</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isInfoEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n               <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">\"Skipped XML bean definition file due to specified profiles [\"</span> <span class=\"o\">+</span> <span class=\"n\">profileSpec</span> <span class=\"o\">+</span>\n                     <span class=\"s\">\"] not matching: \"</span> <span class=\"o\">+</span> <span class=\"n\">getReaderContext</span><span class=\"o\">().</span><span class=\"na\">getResource</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"n\">preProcessXml</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span> <span class=\"c1\">// 钩子</span>\n   <span class=\"c1\">// 往下看</span>\n   <span class=\"n\">parseBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">delegate</span><span class=\"o\">);</span>\n   <span class=\"n\">postProcessXml</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span> <span class=\"c1\">// 钩子</span>\n\n   <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">delegate</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>preProcessXml(root) 和 postProcessXml(root) 是给子类用的钩子方法，鉴于没有被使用到，也不是我们的重点，我们直接跳过。</p>\n\n<p>这里涉及到了 profile 的问题，对于不了解的读者，我在附录中对 profile 做了简单的解释，读者可以参考一下。</p>\n\n<p>接下来，看核心解析方法 parseBeanDefinitions(root, this.delegate) :</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// default namespace 涉及到的就四个标签 &lt;import /&gt;、&lt;alias /&gt;、&lt;bean /&gt; 和 &lt;beans /&gt;，</span>\n<span class=\"c1\">// 其他的属于 custom 的</span>\n<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">parseBeanDefinitions</span><span class=\"o\">(</span><span class=\"nc\">Element</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"nc\">BeanDefinitionParserDelegate</span> <span class=\"n\">delegate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">isDefaultNamespace</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"nc\">NodeList</span> <span class=\"n\">nl</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">getChildNodes</span><span class=\"o\">();</span>\n      <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nl</span><span class=\"o\">.</span><span class=\"na\">getLength</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n         <span class=\"nc\">Node</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">nl</span><span class=\"o\">.</span><span class=\"na\">item</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"k\">instanceof</span> <span class=\"nc\">Element</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Element</span> <span class=\"n\">ele</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">Element</span><span class=\"o\">)</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">isDefaultNamespace</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n               <span class=\"c1\">// 解析 default namespace 下面的几个元素</span>\n               <span class=\"n\">parseDefaultElement</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">delegate</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">else</span> <span class=\"o\">{</span>\n               <span class=\"c1\">// 解析其他 namespace 的元素</span>\n               <span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">parseCustomElement</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">parseCustomElement</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>从上面的代码，我们可以看到，对于每个配置来说，分别进入到 parseDefaultElement(ele, delegate); 和 delegate.parseCustomElement(ele); 这两个分支了。</p>\n\n<p>parseDefaultElement(ele, delegate) 代表解析的节点是 <code class=\"highlighter-rouge\">&lt;import /&gt;</code>、<code class=\"highlighter-rouge\">&lt;alias /&gt;</code>、<code class=\"highlighter-rouge\">&lt;bean /&gt;</code>、<code class=\"highlighter-rouge\">&lt;beans /&gt;</code> 这几个。</p>\n\n<blockquote>\n  <p>这里的四个标签之所以是 default 的，是因为它们是处于这个 namespace 下定义的：</p>\n\n  <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>http://www.springframework.org/schema/beans\n</pre></td></tr></tbody></table></code></pre></div>  </div>\n\n  <p>又到初学者科普时间，不熟悉 namespace 的读者请看下面贴出来的 xml，这里的第二行 <strong>xmlns</strong> 就是咯。</p>\n\n  <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;beans</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"\n            http://www.springframework.org/schema/beans\n          http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>\n       <span class=\"na\">default-autowire=</span><span class=\"s\">\"byName\"</span><span class=\"nt\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div>  </div>\n\n  <p>而对于其他的标签，将进入到 delegate.parseCustomElement(element) 这个分支。如我们经常会使用到的 <code class=\"highlighter-rouge\">&lt;mvc /&gt;</code>、<code class=\"highlighter-rouge\">&lt;task /&gt;</code>、<code class=\"highlighter-rouge\">&lt;context /&gt;</code>、<code class=\"highlighter-rouge\">&lt;aop /&gt;</code>等。</p>\n\n  <p>这些属于扩展，如果需要使用上面这些 ”非 default“ 标签，那么上面的 xml 头部的地方也要引入相应的 namespace 和 .xsd 文件的路径，如下所示。同时代码中需要提供相应的 parser 来解析，如 MvcNamespaceHandler、TaskNamespaceHandler、ContextNamespaceHandler、AopNamespaceHandler 等。</p>\n\n  <p>假如读者想分析 <code class=\"highlighter-rouge\">&lt;context:property-placeholder location=\"classpath:xx.properties\" /&gt;</code> 的实现原理，就应该到 ContextNamespaceHandler 中找答案。</p>\n\n  <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;beans</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n      <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.springframework.org/schema/beans\"</span>\n      <span class=\"na\">xmlns:context=</span><span class=\"s\">\"http://www.springframework.org/schema/context\"</span>\n      <span class=\"na\">xmlns:mvc=</span><span class=\"s\">\"http://www.springframework.org/schema/mvc\"</span>\n      <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"\n           http://www.springframework.org/schema/beans \n           http://www.springframework.org/schema/beans/spring-beans.xsd\n           http://www.springframework.org/schema/context\n           http://www.springframework.org/schema/context/spring-context.xsd\n           http://www.springframework.org/schema/mvc   \n           http://www.springframework.org/schema/mvc/spring-mvc.xsd  \n       \"</span>\n      <span class=\"na\">default-autowire=</span><span class=\"s\">\"byName\"</span><span class=\"nt\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div>  </div>\n</blockquote>\n\n<p>回过神来，看看处理 default 标签的方法：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">parseDefaultElement</span><span class=\"o\">(</span><span class=\"nc\">Element</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"nc\">BeanDefinitionParserDelegate</span> <span class=\"n\">delegate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">nodeNameEquals</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"no\">IMPORT_ELEMENT</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 处理 &lt;import /&gt; 标签</span>\n      <span class=\"n\">importBeanDefinitionResource</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">nodeNameEquals</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"no\">ALIAS_ELEMENT</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 处理 &lt;alias /&gt; 标签定义</span>\n      <span class=\"c1\">// &lt;alias name=\"fromName\" alias=\"toName\"/&gt;</span>\n      <span class=\"n\">processAliasRegistration</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">nodeNameEquals</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"no\">BEAN_ELEMENT</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 处理 &lt;bean /&gt; 标签定义，这也算是我们的重点吧</span>\n      <span class=\"n\">processBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">delegate</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">nodeNameEquals</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"no\">NESTED_BEANS_ELEMENT</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 如果碰到的是嵌套的 &lt;beans /&gt; 标签，需要递归</span>\n      <span class=\"n\">doRegisterBeanDefinitions</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>如果每个标签都说，那我不吐血，你们都要吐血了。我们挑我们的重点 <code class=\"highlighter-rouge\">&lt;bean /&gt;</code> 标签出来说。</p>\n\n<h5 id=\"processbeandefinition-解析-bean-标签\">processBeanDefinition 解析 bean 标签</h5>\n\n<p>下面是 processBeanDefinition 解析 <code class=\"highlighter-rouge\">&lt;bean /&gt;</code> 标签：</p>\n\n<p>// DefaultBeanDefinitionDocumentReader 298</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">processBeanDefinition</span><span class=\"o\">(</span><span class=\"nc\">Element</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"nc\">BeanDefinitionParserDelegate</span> <span class=\"n\">delegate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 将 &lt;bean /&gt; 节点中的信息提取出来，然后封装到一个 BeanDefinitionHolder 中，细节往下看</span>\n   <span class=\"nc\">BeanDefinitionHolder</span> <span class=\"n\">bdHolder</span> <span class=\"o\">=</span> <span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">parseBeanDefinitionElement</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">);</span>\n  \n   <span class=\"c1\">// 下面的几行先不要看，跳过先，跳过先，跳过先，后面会继续说的</span>\n  \n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bdHolder</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">bdHolder</span> <span class=\"o\">=</span> <span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">decorateBeanDefinitionIfRequired</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">bdHolder</span><span class=\"o\">);</span>\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// Register the final decorated instance.</span>\n         <span class=\"nc\">BeanDefinitionReaderUtils</span><span class=\"o\">.</span><span class=\"na\">registerBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">bdHolder</span><span class=\"o\">,</span> <span class=\"n\">getReaderContext</span><span class=\"o\">().</span><span class=\"na\">getRegistry</span><span class=\"o\">());</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BeanDefinitionStoreException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">getReaderContext</span><span class=\"o\">().</span><span class=\"na\">error</span><span class=\"o\">(</span><span class=\"s\">\"Failed to register bean definition with name '\"</span> <span class=\"o\">+</span>\n               <span class=\"n\">bdHolder</span><span class=\"o\">.</span><span class=\"na\">getBeanName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"o\">,</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"c1\">// Send registration event.</span>\n      <span class=\"n\">getReaderContext</span><span class=\"o\">().</span><span class=\"na\">fireComponentRegistered</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">BeanComponentDefinition</span><span class=\"o\">(</span><span class=\"n\">bdHolder</span><span class=\"o\">));</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>继续往下看怎么解析之前，我们先看下 <strong><code class=\"highlighter-rouge\">&lt;bean /&gt;</code></strong> 标签中可以定义哪些属性：</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Property</th>\n      <th> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>class</td>\n      <td>类的全限定名</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>可指定 id、name(用逗号、分号、空格分隔)</td>\n    </tr>\n    <tr>\n      <td>scope</td>\n      <td>作用域</td>\n    </tr>\n    <tr>\n      <td>constructor arguments</td>\n      <td>指定构造参数</td>\n    </tr>\n    <tr>\n      <td>properties</td>\n      <td>设置属性的值</td>\n    </tr>\n    <tr>\n      <td>autowiring mode</td>\n      <td>no(默认值)、byName、byType、 constructor</td>\n    </tr>\n    <tr>\n      <td>lazy-initialization mode</td>\n      <td>是否懒加载(如果被非懒加载的bean依赖了那么其实也就不能懒加载了)</td>\n    </tr>\n    <tr>\n      <td>initialization method</td>\n      <td>bean 属性设置完成后，会调用这个方法</td>\n    </tr>\n    <tr>\n      <td>destruction method</td>\n      <td>bean 销毁后的回调方法</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>上面表格中的内容我想大家都非常熟悉吧，如果不熟悉，那就是你不够了解 Spring 的配置了。</p>\n\n<p>简单地说就是像下面这样子：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"exampleBean\"</span> <span class=\"na\">name=</span><span class=\"s\">\"name1, name2, name3\"</span> <span class=\"na\">class=</span><span class=\"s\">\"com.javadoop.ExampleBean\"</span>\n      <span class=\"na\">scope=</span><span class=\"s\">\"singleton\"</span> <span class=\"na\">lazy-init=</span><span class=\"s\">\"true\"</span> <span class=\"na\">init-method=</span><span class=\"s\">\"init\"</span> <span class=\"na\">destroy-method=</span><span class=\"s\">\"cleanup\"</span><span class=\"nt\">&gt;</span>\n  \n    <span class=\"c\">&lt;!-- 可以用下面三种形式指定构造参数 --&gt;</span>\n    <span class=\"nt\">&lt;constructor-arg</span> <span class=\"na\">type=</span><span class=\"s\">\"int\"</span> <span class=\"na\">value=</span><span class=\"s\">\"7500000\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;constructor-arg</span> <span class=\"na\">name=</span><span class=\"s\">\"years\"</span> <span class=\"na\">value=</span><span class=\"s\">\"7500000\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;constructor-arg</span> <span class=\"na\">index=</span><span class=\"s\">\"0\"</span> <span class=\"na\">value=</span><span class=\"s\">\"7500000\"</span><span class=\"nt\">/&gt;</span>\n  \n    <span class=\"c\">&lt;!-- property 的几种情况 --&gt;</span>\n    <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">\"beanOne\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;ref</span> <span class=\"na\">bean=</span><span class=\"s\">\"anotherExampleBean\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">\"beanTwo\"</span> <span class=\"na\">ref=</span><span class=\"s\">\"yetAnotherBean\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">\"integerProperty\"</span> <span class=\"na\">value=</span><span class=\"s\">\"1\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>当然，除了上面举例出来的这些，还有 factory-bean、factory-method、<code class=\"highlighter-rouge\">&lt;lockup-method /&gt;</code>、<code class=\"highlighter-rouge\">&lt;replaced-method /&gt;</code>、<code class=\"highlighter-rouge\">&lt;meta /&gt;</code>、<code class=\"highlighter-rouge\">&lt;qualifier /&gt;</code> 这几个，大家是不是熟悉呢？自己检验一下自己对 Spring 中 bean 的了解程度。</p>\n\n<p>有了以上这些知识以后，我们再继续往里看怎么解析 bean 元素，是怎么转换到 BeanDefinitionHolder 的。</p>\n\n<p>// BeanDefinitionParserDelegate 428</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"nc\">BeanDefinitionHolder</span> <span class=\"nf\">parseBeanDefinitionElement</span><span class=\"o\">(</span><span class=\"nc\">Element</span> <span class=\"n\">ele</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"nf\">parseBeanDefinitionElement</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"nc\">BeanDefinitionHolder</span> <span class=\"nf\">parseBeanDefinitionElement</span><span class=\"o\">(</span><span class=\"nc\">Element</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"nc\">BeanDefinition</span> <span class=\"n\">containingBean</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"nc\">String</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">ele</span><span class=\"o\">.</span><span class=\"na\">getAttribute</span><span class=\"o\">(</span><span class=\"no\">ID_ATTRIBUTE</span><span class=\"o\">);</span>\n   <span class=\"nc\">String</span> <span class=\"n\">nameAttr</span> <span class=\"o\">=</span> <span class=\"n\">ele</span><span class=\"o\">.</span><span class=\"na\">getAttribute</span><span class=\"o\">(</span><span class=\"no\">NAME_ATTRIBUTE</span><span class=\"o\">);</span>\n\n   <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">aliases</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;();</span>\n      \n   <span class=\"c1\">// 将 name 属性的定义按照 “逗号、分号、空格” 切分，形成一个 别名列表数组，</span>\n   <span class=\"c1\">// 当然，如果你不定义 name 属性的话，就是空的了</span>\n   <span class=\"c1\">// 我在附录中简单介绍了一下 id 和 name 的配置，大家可以看一眼，有个20秒就可以了</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">hasLength</span><span class=\"o\">(</span><span class=\"n\">nameAttr</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">nameArr</span> <span class=\"o\">=</span> <span class=\"nc\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">tokenizeToStringArray</span><span class=\"o\">(</span><span class=\"n\">nameAttr</span><span class=\"o\">,</span> <span class=\"no\">MULTI_VALUE_ATTRIBUTE_DELIMITERS</span><span class=\"o\">);</span>\n      <span class=\"n\">aliases</span><span class=\"o\">.</span><span class=\"na\">addAll</span><span class=\"o\">(</span><span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">nameArr</span><span class=\"o\">));</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"nc\">String</span> <span class=\"n\">beanName</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n   <span class=\"c1\">// 如果没有指定id, 那么用别名列表的第一个名字作为beanName</span>\n   <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"nc\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">hasText</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">aliases</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">beanName</span> <span class=\"o\">=</span> <span class=\"n\">aliases</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"No XML 'id' specified - using '\"</span> <span class=\"o\">+</span> <span class=\"n\">beanName</span> <span class=\"o\">+</span>\n               <span class=\"s\">\"' as bean name and \"</span> <span class=\"o\">+</span> <span class=\"n\">aliases</span> <span class=\"o\">+</span> <span class=\"s\">\" as aliases\"</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">containingBean</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">checkNameUniqueness</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">aliases</span><span class=\"o\">,</span> <span class=\"n\">ele</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n  \n   <span class=\"c1\">// 根据 &lt;bean ...&gt;...&lt;/bean&gt; 中的配置创建 BeanDefinition，然后把配置中的信息都设置到实例中,</span>\n   <span class=\"c1\">// 细节后面细说，先知道下面这行结束后，一个 BeanDefinition 实例就出来了。</span>\n   <span class=\"nc\">AbstractBeanDefinition</span> <span class=\"n\">beanDefinition</span> <span class=\"o\">=</span> <span class=\"n\">parseBeanDefinitionElement</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">containingBean</span><span class=\"o\">);</span>\n   \n   <span class=\"c1\">// 到这里，整个 &lt;bean /&gt; 标签就算解析结束了，一个 BeanDefinition 就形成了。</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">beanDefinition</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 如果都没有设置 id 和 name，那么此时的 beanName 就会为 null，进入下面这块代码产生</span>\n      <span class=\"c1\">// 如果读者不感兴趣的话，我觉得不需要关心这块代码，对本文源码分析来说，这些东西不重要</span>\n      <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"nc\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">hasText</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n         <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">containingBean</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"c1\">// 按照我们的思路，这里 containingBean 是 null 的</span>\n               <span class=\"n\">beanName</span> <span class=\"o\">=</span> <span class=\"nc\">BeanDefinitionReaderUtils</span><span class=\"o\">.</span><span class=\"na\">generateBeanName</span><span class=\"o\">(</span>\n                     <span class=\"n\">beanDefinition</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">readerContext</span><span class=\"o\">.</span><span class=\"na\">getRegistry</span><span class=\"o\">(),</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">else</span> <span class=\"o\">{</span>\n               <span class=\"c1\">// 如果我们不定义 id 和 name，那么我们引言里的那个例子：</span>\n               <span class=\"c1\">//   1. beanName 为：com.javadoop.example.MessageServiceImpl#0</span>\n               <span class=\"c1\">//   2. beanClassName 为：com.javadoop.example.MessageServiceImpl</span>\n              \n               <span class=\"n\">beanName</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">readerContext</span><span class=\"o\">.</span><span class=\"na\">generateBeanName</span><span class=\"o\">(</span><span class=\"n\">beanDefinition</span><span class=\"o\">);</span>\n               \n               <span class=\"nc\">String</span> <span class=\"n\">beanClassName</span> <span class=\"o\">=</span> <span class=\"n\">beanDefinition</span><span class=\"o\">.</span><span class=\"na\">getBeanClassName</span><span class=\"o\">();</span>\n               <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">beanClassName</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span>\n                     <span class=\"n\">beanName</span><span class=\"o\">.</span><span class=\"na\">startsWith</span><span class=\"o\">(</span><span class=\"n\">beanClassName</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">beanName</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">beanClassName</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span>\n                     <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">readerContext</span><span class=\"o\">.</span><span class=\"na\">getRegistry</span><span class=\"o\">().</span><span class=\"na\">isBeanNameInUse</span><span class=\"o\">(</span><span class=\"n\">beanClassName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                  <span class=\"c1\">// 把 beanClassName 设置为 Bean 的别名</span>\n                  <span class=\"n\">aliases</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">beanClassName</span><span class=\"o\">);</span>\n               <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n               <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Neither XML 'id' nor 'name' specified - \"</span> <span class=\"o\">+</span>\n                     <span class=\"s\">\"using generated bean name [\"</span> <span class=\"o\">+</span> <span class=\"n\">beanName</span> <span class=\"o\">+</span> <span class=\"s\">\"]\"</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n         <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Exception</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">error</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">(),</span> <span class=\"n\">ele</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">aliasesArray</span> <span class=\"o\">=</span> <span class=\"nc\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">toStringArray</span><span class=\"o\">(</span><span class=\"n\">aliases</span><span class=\"o\">);</span>\n      <span class=\"c1\">// 返回 BeanDefinitionHolder</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">BeanDefinitionHolder</span><span class=\"o\">(</span><span class=\"n\">beanDefinition</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">aliasesArray</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>然后，我们再看看怎么根据配置创建 BeanDefinition 实例的：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"nc\">AbstractBeanDefinition</span> <span class=\"nf\">parseBeanDefinitionElement</span><span class=\"o\">(</span>\n      <span class=\"nc\">Element</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"nc\">BeanDefinition</span> <span class=\"n\">containingBean</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n   <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">parseState</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">BeanEntry</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">));</span>\n\n   <span class=\"nc\">String</span> <span class=\"n\">className</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">.</span><span class=\"na\">hasAttribute</span><span class=\"o\">(</span><span class=\"no\">CLASS_ATTRIBUTE</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">className</span> <span class=\"o\">=</span> <span class=\"n\">ele</span><span class=\"o\">.</span><span class=\"na\">getAttribute</span><span class=\"o\">(</span><span class=\"no\">CLASS_ATTRIBUTE</span><span class=\"o\">).</span><span class=\"na\">trim</span><span class=\"o\">();</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"nc\">String</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">.</span><span class=\"na\">hasAttribute</span><span class=\"o\">(</span><span class=\"no\">PARENT_ATTRIBUTE</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n         <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">ele</span><span class=\"o\">.</span><span class=\"na\">getAttribute</span><span class=\"o\">(</span><span class=\"no\">PARENT_ATTRIBUTE</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"c1\">// 创建 BeanDefinition，然后设置类信息而已，很简单，就不贴代码了</span>\n      <span class=\"nc\">AbstractBeanDefinition</span> <span class=\"n\">bd</span> <span class=\"o\">=</span> <span class=\"n\">createBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">className</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"o\">);</span>\n\n      <span class=\"c1\">// 设置 BeanDefinition 的一堆属性，这些属性定义在 AbstractBeanDefinition 中</span>\n      <span class=\"n\">parseBeanDefinitionAttributes</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">containingBean</span><span class=\"o\">,</span> <span class=\"n\">bd</span><span class=\"o\">);</span>\n      <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">setDescription</span><span class=\"o\">(</span><span class=\"nc\">DomUtils</span><span class=\"o\">.</span><span class=\"na\">getChildElementValueByTagName</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"no\">DESCRIPTION_ELEMENT</span><span class=\"o\">));</span>\n    \n      <span class=\"cm\">/**\n       * 下面的一堆是解析 &lt;bean&gt;......&lt;/bean&gt; 内部的子元素，\n       * 解析出来以后的信息都放到 bd 的属性中\n       */</span>\n     \n      <span class=\"c1\">// 解析 &lt;meta /&gt;</span>\n      <span class=\"n\">parseMetaElements</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">bd</span><span class=\"o\">);</span>\n      <span class=\"c1\">// 解析 &lt;lookup-method /&gt;</span>\n      <span class=\"n\">parseLookupOverrideSubElements</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">getMethodOverrides</span><span class=\"o\">());</span>\n      <span class=\"c1\">// 解析 &lt;replaced-method /&gt;</span>\n      <span class=\"n\">parseReplacedMethodSubElements</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">getMethodOverrides</span><span class=\"o\">());</span>\n    <span class=\"c1\">// 解析 &lt;constructor-arg /&gt;</span>\n      <span class=\"n\">parseConstructorArgElements</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">bd</span><span class=\"o\">);</span>\n      <span class=\"c1\">// 解析 &lt;property /&gt;</span>\n      <span class=\"n\">parsePropertyElements</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">bd</span><span class=\"o\">);</span>\n      <span class=\"c1\">// 解析 &lt;qualifier /&gt;</span>\n      <span class=\"n\">parseQualifierElements</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">bd</span><span class=\"o\">);</span>\n\n      <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">setResource</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">readerContext</span><span class=\"o\">.</span><span class=\"na\">getResource</span><span class=\"o\">());</span>\n      <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">setSource</span><span class=\"o\">(</span><span class=\"n\">extractSource</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">));</span>\n\n      <span class=\"k\">return</span> <span class=\"n\">bd</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">ClassNotFoundException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">error</span><span class=\"o\">(</span><span class=\"s\">\"Bean class [\"</span> <span class=\"o\">+</span> <span class=\"n\">className</span> <span class=\"o\">+</span> <span class=\"s\">\"] not found\"</span><span class=\"o\">,</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">NoClassDefFoundError</span> <span class=\"n\">err</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">error</span><span class=\"o\">(</span><span class=\"s\">\"Class that bean class [\"</span> <span class=\"o\">+</span> <span class=\"n\">className</span> <span class=\"o\">+</span> <span class=\"s\">\"] depends on not found\"</span><span class=\"o\">,</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">err</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Throwable</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">error</span><span class=\"o\">(</span><span class=\"s\">\"Unexpected failure during bean definition parsing\"</span><span class=\"o\">,</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">finally</span> <span class=\"o\">{</span>\n      <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">parseState</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>到这里，我们已经完成了根据 <code class=\"highlighter-rouge\">&lt;bean /&gt;</code> 配置创建了一个 BeanDefinitionHolder 实例。注意，是一个。</p>\n\n<p>我们回到解析 <code class=\"highlighter-rouge\">&lt;bean /&gt;</code> 的入口方法:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">processBeanDefinition</span><span class=\"o\">(</span><span class=\"nc\">Element</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"nc\">BeanDefinitionParserDelegate</span> <span class=\"n\">delegate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 将 &lt;bean /&gt; 节点转换为 BeanDefinitionHolder，就是上面说的一堆</span>\n   <span class=\"nc\">BeanDefinitionHolder</span> <span class=\"n\">bdHolder</span> <span class=\"o\">=</span> <span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">parseBeanDefinitionElement</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">);</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bdHolder</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 如果有自定义属性的话，进行相应的解析，先忽略</span>\n      <span class=\"n\">bdHolder</span> <span class=\"o\">=</span> <span class=\"n\">delegate</span><span class=\"o\">.</span><span class=\"na\">decorateBeanDefinitionIfRequired</span><span class=\"o\">(</span><span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">bdHolder</span><span class=\"o\">);</span>\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 我们把这步叫做 注册Bean 吧</span>\n         <span class=\"nc\">BeanDefinitionReaderUtils</span><span class=\"o\">.</span><span class=\"na\">registerBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">bdHolder</span><span class=\"o\">,</span> <span class=\"n\">getReaderContext</span><span class=\"o\">().</span><span class=\"na\">getRegistry</span><span class=\"o\">());</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BeanDefinitionStoreException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">getReaderContext</span><span class=\"o\">().</span><span class=\"na\">error</span><span class=\"o\">(</span><span class=\"s\">\"Failed to register bean definition with name '\"</span> <span class=\"o\">+</span>\n               <span class=\"n\">bdHolder</span><span class=\"o\">.</span><span class=\"na\">getBeanName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"o\">,</span> <span class=\"n\">ele</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"c1\">// 注册完成后，发送事件，本文不展开说这个</span>\n      <span class=\"n\">getReaderContext</span><span class=\"o\">().</span><span class=\"na\">fireComponentRegistered</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">BeanComponentDefinition</span><span class=\"o\">(</span><span class=\"n\">bdHolder</span><span class=\"o\">));</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>大家再仔细看一下这块吧，我们后面就不回来说这个了。这里已经根据一个 <code class=\"highlighter-rouge\">&lt;bean /&gt;</code> 标签产生了一个 BeanDefinitionHolder 的实例，这个实例里面也就是一个 BeanDefinition 的实例和它的 beanName、aliases 这三个信息，注意，我们的关注点始终在 BeanDefinition 上：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">BeanDefinitionHolder</span> <span class=\"kd\">implements</span> <span class=\"nc\">BeanMetadataElement</span> <span class=\"o\">{</span>\n\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">BeanDefinition</span> <span class=\"n\">beanDefinition</span><span class=\"o\">;</span>\n\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">;</span>\n\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">aliases</span><span class=\"o\">;</span>\n<span class=\"o\">...</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>然后我们准备注册这个 BeanDefinition，最后，把这个注册事件发送出去。</p>\n\n<p>下面，我们开始说说注册 Bean 吧。</p>\n\n<h5 id=\"注册-bean\">注册 Bean</h5>\n\n<p>// BeanDefinitionReaderUtils 143</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">registerBeanDefinition</span><span class=\"o\">(</span>\n      <span class=\"nc\">BeanDefinitionHolder</span> <span class=\"n\">definitionHolder</span><span class=\"o\">,</span> <span class=\"nc\">BeanDefinitionRegistry</span> <span class=\"n\">registry</span><span class=\"o\">)</span>\n      <span class=\"kd\">throws</span> <span class=\"nc\">BeanDefinitionStoreException</span> <span class=\"o\">{</span>\n\n   <span class=\"nc\">String</span> <span class=\"n\">beanName</span> <span class=\"o\">=</span> <span class=\"n\">definitionHolder</span><span class=\"o\">.</span><span class=\"na\">getBeanName</span><span class=\"o\">();</span>\n   <span class=\"c1\">// 注册这个 Bean</span>\n   <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">registerBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">definitionHolder</span><span class=\"o\">.</span><span class=\"na\">getBeanDefinition</span><span class=\"o\">());</span>\n\n   <span class=\"c1\">// 如果还有别名的话，也要根据别名全部注册一遍，不然根据别名就会找不到 Bean 了</span>\n   <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">aliases</span> <span class=\"o\">=</span> <span class=\"n\">definitionHolder</span><span class=\"o\">.</span><span class=\"na\">getAliases</span><span class=\"o\">();</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">aliases</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">alias</span> <span class=\"o\">:</span> <span class=\"n\">aliases</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// alias -&gt; beanName 保存它们的别名信息，这个很简单，用一个 map 保存一下就可以了，</span>\n         <span class=\"c1\">// 获取的时候，会先将 alias 转换为 beanName，然后再查找</span>\n         <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">registerAlias</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">alias</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>别名注册的放一边，毕竟它很简单，我们看看怎么注册 Bean。</p>\n\n<p>// DefaultListableBeanFactory 793</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">registerBeanDefinition</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"nc\">BeanDefinition</span> <span class=\"n\">beanDefinition</span><span class=\"o\">)</span>\n      <span class=\"kd\">throws</span> <span class=\"nc\">BeanDefinitionStoreException</span> <span class=\"o\">{</span>\n\n   <span class=\"nc\">Assert</span><span class=\"o\">.</span><span class=\"na\">hasText</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"s\">\"Bean name must not be empty\"</span><span class=\"o\">);</span>\n   <span class=\"nc\">Assert</span><span class=\"o\">.</span><span class=\"na\">notNull</span><span class=\"o\">(</span><span class=\"n\">beanDefinition</span><span class=\"o\">,</span> <span class=\"s\">\"BeanDefinition must not be null\"</span><span class=\"o\">);</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">beanDefinition</span> <span class=\"k\">instanceof</span> <span class=\"nc\">AbstractBeanDefinition</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n         <span class=\"o\">((</span><span class=\"nc\">AbstractBeanDefinition</span><span class=\"o\">)</span> <span class=\"n\">beanDefinition</span><span class=\"o\">).</span><span class=\"na\">validate</span><span class=\"o\">();</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BeanDefinitionValidationException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanDefinitionStoreException</span><span class=\"o\">(...);</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// old? 还记得 “允许 bean 覆盖” 这个配置吗？allowBeanDefinitionOverriding</span>\n   <span class=\"nc\">BeanDefinition</span> <span class=\"n\">oldBeanDefinition</span><span class=\"o\">;</span>\n  \n   <span class=\"c1\">// 之后会看到，所有的 Bean 注册后会放入这个 beanDefinitionMap 中</span>\n   <span class=\"n\">oldBeanDefinition</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionMap</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n  \n   <span class=\"c1\">// 处理重复名称的 Bean 定义的情况</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">oldBeanDefinition</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isAllowBeanDefinitionOverriding</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 如果不允许覆盖的话，抛异常</span>\n         <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanDefinitionStoreException</span><span class=\"o\">(</span><span class=\"n\">beanDefinition</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">()...</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">oldBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">getRole</span><span class=\"o\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">beanDefinition</span><span class=\"o\">.</span><span class=\"na\">getRole</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// log...用框架定义的 Bean 覆盖用户自定义的 Bean </span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(!</span><span class=\"n\">beanDefinition</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">oldBeanDefinition</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// log...用新的 Bean 覆盖旧的 Bean</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// log...用同等的 Bean 覆盖旧的 Bean，这里指的是 equals 方法返回 true 的 Bean</span>\n      <span class=\"o\">}</span>\n      <span class=\"c1\">// 覆盖</span>\n      <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">beanDefinition</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 判断是否已经有其他的 Bean 开始初始化了.</span>\n      <span class=\"c1\">// 注意，\"注册Bean\" 这个动作结束，Bean 依然还没有初始化，我们后面会有大篇幅说初始化过程，</span>\n      <span class=\"c1\">// 在 Spring 容器启动的最后，会 预初始化 所有的 singleton beans</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasBeanCreationStarted</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// Cannot modify startup-time collection elements anymore (for stable iteration)</span>\n         <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionMap</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">beanDefinition</span><span class=\"o\">);</span>\n            <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">updatedDefinitions</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionNames</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">updatedDefinitions</span><span class=\"o\">.</span><span class=\"na\">addAll</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionNames</span><span class=\"o\">);</span>\n            <span class=\"n\">updatedDefinitions</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionNames</span> <span class=\"o\">=</span> <span class=\"n\">updatedDefinitions</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">manualSingletonNames</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n               <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">updatedSingletons</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LinkedHashSet</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">manualSingletonNames</span><span class=\"o\">);</span>\n               <span class=\"n\">updatedSingletons</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n               <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">manualSingletonNames</span> <span class=\"o\">=</span> <span class=\"n\">updatedSingletons</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 最正常的应该是进到这个分支。</span>\n        \n         <span class=\"c1\">// 将 BeanDefinition 放到这个 map 中，这个 map 保存了所有的 BeanDefinition</span>\n         <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">beanDefinition</span><span class=\"o\">);</span>\n         <span class=\"c1\">// 这是个 ArrayList，所以会按照 bean 配置的顺序保存每一个注册的 Bean 的名字</span>\n         <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionNames</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n         <span class=\"c1\">// 这是个 LinkedHashSet，代表的是手动注册的 singleton bean，</span>\n         <span class=\"c1\">// 注意这里是 remove 方法，到这里的 Bean 当然不是手动注册的</span>\n         <span class=\"c1\">// 手动指的是通过调用以下方法注册的 bean ：</span>\n         <span class=\"c1\">//     registerSingleton(String beanName, Object singletonObject)</span>\n         <span class=\"c1\">// 这不是重点，解释只是为了不让大家疑惑。Spring 会在后面\"手动\"注册一些 Bean，</span>\n         <span class=\"c1\">// 如 \"environment\"、\"systemProperties\" 等 bean，我们自己也可以在运行时注册 Bean 到容器中的</span>\n         <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">manualSingletonNames</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"c1\">// 这个不重要，在预初始化的时候会用到，不必管它。</span>\n      <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">frozenBeanDefinitionNames</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">oldBeanDefinition</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">containsSingleton</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">resetBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>总结一下，到这里已经初始化了 Bean 容器，<code class=\"highlighter-rouge\">&lt;bean /&gt;</code> 配置也相应的转换为了一个个 BeanDefinition，然后注册了各个 BeanDefinition 到注册中心，并且发送了注册事件。</p>\n\n<blockquote>\n  <p>到这里是一个分水岭，前面的内容都还算比较简单，大家要清楚地知道前面都做了哪些事情。</p>\n</blockquote>\n\n<h3 id=\"bean-容器实例化完成后\">Bean 容器实例化完成后</h3>\n\n<p>说到这里，我们回到 refresh() 方法，我重新贴了一遍代码，看看我们说到哪了。是的，我们才说完 obtainFreshBeanFactory() 方法。</p>\n\n<p>考虑到篇幅，这里开始大幅缩减掉没必要详细介绍的部分，大家直接看下面的代码中的注释就好了。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">refresh</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span><span class=\"o\">,</span> <span class=\"nc\">IllegalStateException</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span>\n   <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">startupShutdownMonitor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n      <span class=\"c1\">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span>\n      <span class=\"n\">prepareRefresh</span><span class=\"o\">();</span>\n     \n      <span class=\"c1\">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span>\n      <span class=\"c1\">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span>\n      <span class=\"c1\">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span>\n      <span class=\"nc\">ConfigurableListableBeanFactory</span> <span class=\"n\">beanFactory</span> <span class=\"o\">=</span> <span class=\"n\">obtainFreshBeanFactory</span><span class=\"o\">();</span>\n\n      <span class=\"c1\">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span>\n      <span class=\"c1\">// 这块待会会展开说</span>\n      <span class=\"n\">prepareBeanFactory</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span>\n         <span class=\"c1\">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span>\n        \n         <span class=\"c1\">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span>\n         <span class=\"c1\">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span>\n         <span class=\"n\">postProcessBeanFactory</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n         <span class=\"c1\">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 回调方法</span>\n         <span class=\"n\">invokeBeanFactoryPostProcessors</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>          \n         \n          \n\n         <span class=\"c1\">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span>\n         <span class=\"c1\">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span>\n         <span class=\"c1\">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。这里仅仅是注册，之后会看到回调这两方法的时机</span>\n         <span class=\"n\">registerBeanPostProcessors</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n\n         <span class=\"c1\">// 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span>\n         <span class=\"n\">initMessageSource</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span>\n         <span class=\"n\">initApplicationEventMulticaster</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// 从方法名就可以知道，典型的模板方法(钩子方法)，不展开说</span>\n         <span class=\"c1\">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span>\n         <span class=\"n\">onRefresh</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span>\n         <span class=\"n\">registerListeners</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// 重点，重点，重点</span>\n         <span class=\"c1\">// 初始化所有的 singleton beans</span>\n         <span class=\"c1\">//（lazy-init 的除外）</span>\n         <span class=\"n\">finishBeanFactoryInitialization</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n\n         <span class=\"c1\">// 最后，广播事件，ApplicationContext 初始化完成，不展开</span>\n         <span class=\"n\">finishRefresh</span><span class=\"o\">();</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BeansException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isWarnEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">warn</span><span class=\"o\">(</span><span class=\"s\">\"Exception encountered during context initialization - \"</span> <span class=\"o\">+</span>\n                  <span class=\"s\">\"cancelling refresh attempt: \"</span> <span class=\"o\">+</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n\n         <span class=\"c1\">// Destroy already created singletons to avoid dangling resources.</span>\n         <span class=\"c1\">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span>\n         <span class=\"n\">destroyBeans</span><span class=\"o\">();</span>\n\n         <span class=\"c1\">// Reset 'active' flag.</span>\n         <span class=\"n\">cancelRefresh</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">);</span>\n\n         <span class=\"c1\">// 把异常往外抛</span>\n         <span class=\"k\">throw</span> <span class=\"n\">ex</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"k\">finally</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// Reset common introspection caches in Spring's core, since we</span>\n         <span class=\"c1\">// might not ever need metadata for singleton beans anymore...</span>\n         <span class=\"n\">resetCommonCaches</span><span class=\"o\">();</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h3 id=\"准备-bean-容器-preparebeanfactory\">准备 Bean 容器: prepareBeanFactory</h3>\n\n<p>之前我们说过，Spring 把我们在 xml 配置的 bean 都注册以后，会”手动”注册一些特殊的 bean。</p>\n\n<p>这里简单介绍下 prepareBeanFactory(factory) 方法：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cm\">/**\n * Configure the factory's standard context characteristics,\n * such as the context's ClassLoader and post-processors.\n * @param beanFactory the BeanFactory to configure\n */</span>\n<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">prepareBeanFactory</span><span class=\"o\">(</span><span class=\"nc\">ConfigurableListableBeanFactory</span> <span class=\"n\">beanFactory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 设置 BeanFactory 的类加载器，我们知道 BeanFactory 需要加载类，也就需要类加载器，</span>\n   <span class=\"c1\">// 这里设置为加载当前 ApplicationContext 类的类加载器</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">setBeanClassLoader</span><span class=\"o\">(</span><span class=\"n\">getClassLoader</span><span class=\"o\">());</span>\n    \n   <span class=\"c1\">// 设置 BeanExpressionResolver</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">setBeanExpressionResolver</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">StandardBeanExpressionResolver</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">getBeanClassLoader</span><span class=\"o\">()));</span>\n   <span class=\"c1\">// </span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">addPropertyEditorRegistrar</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ResourceEditorRegistrar</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"n\">getEnvironment</span><span class=\"o\">()));</span>\n\n   <span class=\"c1\">// 添加一个 BeanPostProcessor，这个 processor 比较简单：</span>\n   <span class=\"c1\">// 实现了 Aware 接口的 beans 在初始化的时候，这个 processor 负责回调，</span>\n   <span class=\"c1\">// 这个我们很常用，如我们会为了获取 ApplicationContext 而 implement ApplicationContextAware</span>\n   <span class=\"c1\">// 注意：它不仅仅回调 ApplicationContextAware，</span>\n   <span class=\"c1\">//   还会负责回调 EnvironmentAware、ResourceLoaderAware 等，看下源码就清楚了</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">addBeanPostProcessor</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ApplicationContextAwareProcessor</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">));</span>\n  \n   <span class=\"c1\">// 下面几行的意思就是，如果某个 bean 依赖于以下几个接口的实现类，在自动装配的时候忽略它们，</span>\n   <span class=\"c1\">// Spring 会通过其他方式来处理这些依赖。</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">ignoreDependencyInterface</span><span class=\"o\">(</span><span class=\"nc\">EnvironmentAware</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">ignoreDependencyInterface</span><span class=\"o\">(</span><span class=\"nc\">EmbeddedValueResolverAware</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">ignoreDependencyInterface</span><span class=\"o\">(</span><span class=\"nc\">ResourceLoaderAware</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">ignoreDependencyInterface</span><span class=\"o\">(</span><span class=\"nc\">ApplicationEventPublisherAware</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">ignoreDependencyInterface</span><span class=\"o\">(</span><span class=\"nc\">MessageSourceAware</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">ignoreDependencyInterface</span><span class=\"o\">(</span><span class=\"nc\">ApplicationContextAware</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n\n   <span class=\"cm\">/**\n    * 下面几行就是为特殊的几个 bean 赋值，如果有 bean 依赖了以下几个，会注入这边相应的值，\n    * 之前我们说过，\"当前 ApplicationContext 持有一个 BeanFactory\"，这里解释了第一行\n    * ApplicationContext 还继承了 ResourceLoader、ApplicationEventPublisher、MessageSource\n    * 所以对于这几个依赖，可以赋值为 this，注意 this 是一个 ApplicationContext\n    * 那这里怎么没看到为 MessageSource 赋值呢？那是因为 MessageSource 被注册成为了一个普通的 bean\n    */</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">registerResolvableDependency</span><span class=\"o\">(</span><span class=\"nc\">BeanFactory</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">registerResolvableDependency</span><span class=\"o\">(</span><span class=\"nc\">ResourceLoader</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">registerResolvableDependency</span><span class=\"o\">(</span><span class=\"nc\">ApplicationEventPublisher</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">registerResolvableDependency</span><span class=\"o\">(</span><span class=\"nc\">ApplicationContext</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n\n   <span class=\"c1\">// 这个 BeanPostProcessor 也很简单，在 bean 实例化后，如果是 ApplicationListener 的子类，</span>\n   <span class=\"c1\">// 那么将其添加到 listener 列表中，可以理解成：注册 事件监听器</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">addBeanPostProcessor</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ApplicationListenerDetector</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">));</span>\n\n   <span class=\"c1\">// 这里涉及到特殊的 bean，名为：loadTimeWeaver，这不是我们的重点，忽略它</span>\n   <span class=\"c1\">// tips: ltw 是 AspectJ 的概念，指的是在运行期进行织入，这个和 Spring AOP 不一样，</span>\n   <span class=\"c1\">//    感兴趣的读者请参考我写的关于 AspectJ 的另一篇文章 https://www.javadoop.com/post/aspectj</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">containsBean</span><span class=\"o\">(</span><span class=\"no\">LOAD_TIME_WEAVER_BEAN_NAME</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">addBeanPostProcessor</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">LoadTimeWeaverAwareProcessor</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">));</span>\n      <span class=\"c1\">// Set a temporary ClassLoader for type matching.</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">setTempClassLoader</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ContextTypeMatchClassLoader</span><span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">getBeanClassLoader</span><span class=\"o\">()));</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"cm\">/**\n    * 从下面几行代码我们可以知道，Spring 往往很 \"智能\" 就是因为它会帮我们默认注册一些有用的 bean，\n    * 我们也可以选择覆盖\n    */</span>\n  \n   <span class=\"c1\">// 如果没有定义 \"environment\" 这个 bean，那么 Spring 会 \"手动\" 注册一个</span>\n   <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">containsLocalBean</span><span class=\"o\">(</span><span class=\"no\">ENVIRONMENT_BEAN_NAME</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">registerSingleton</span><span class=\"o\">(</span><span class=\"no\">ENVIRONMENT_BEAN_NAME</span><span class=\"o\">,</span> <span class=\"n\">getEnvironment</span><span class=\"o\">());</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">// 如果没有定义 \"systemProperties\" 这个 bean，那么 Spring 会 \"手动\" 注册一个</span>\n   <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">containsLocalBean</span><span class=\"o\">(</span><span class=\"no\">SYSTEM_PROPERTIES_BEAN_NAME</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">registerSingleton</span><span class=\"o\">(</span><span class=\"no\">SYSTEM_PROPERTIES_BEAN_NAME</span><span class=\"o\">,</span> <span class=\"n\">getEnvironment</span><span class=\"o\">().</span><span class=\"na\">getSystemProperties</span><span class=\"o\">());</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">// 如果没有定义 \"systemEnvironment\" 这个 bean，那么 Spring 会 \"手动\" 注册一个</span>\n   <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">containsLocalBean</span><span class=\"o\">(</span><span class=\"no\">SYSTEM_ENVIRONMENT_BEAN_NAME</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">registerSingleton</span><span class=\"o\">(</span><span class=\"no\">SYSTEM_ENVIRONMENT_BEAN_NAME</span><span class=\"o\">,</span> <span class=\"n\">getEnvironment</span><span class=\"o\">().</span><span class=\"na\">getSystemEnvironment</span><span class=\"o\">());</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>在上面这块代码中，Spring 对一些特殊的 bean 进行了处理，读者如果暂时还不能消化它们也没有关系，慢慢往下看。</p>\n\n<h3 id=\"初始化所有的-singleton-beans\">初始化所有的 singleton beans</h3>\n\n<p>我们的重点当然是 finishBeanFactoryInitialization(beanFactory); 这个巨头了，这里会负责初始化所有的 singleton beans。</p>\n\n<p>注意，后面的描述中，我都会使用<strong>初始化</strong>或<strong>预初始化</strong>来代表这个阶段，Spring 会在这个阶段完成所有的 singleton beans 的实例化。</p>\n\n<p>我们来总结一下，到目前为止，应该说 BeanFactory 已经创建完成，并且所有的实现了 BeanFactoryPostProcessor 接口的 Bean 都已经初始化并且其中的 postProcessBeanFactory(factory) 方法已经得到回调执行了。而且 Spring 已经“手动”注册了一些特殊的 Bean，如 ‘environment’、‘systemProperties’ 等。</p>\n\n<p>剩下的就是初始化 singleton beans 了，我们知道它们是单例的，如果没有设置懒加载，那么 Spring 会在接下来初始化所有的 singleton beans。</p>\n\n<p>// AbstractApplicationContext.java 834</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// 初始化剩余的 singleton beans</span>\n<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">finishBeanFactoryInitialization</span><span class=\"o\">(</span><span class=\"nc\">ConfigurableListableBeanFactory</span> <span class=\"n\">beanFactory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n   <span class=\"c1\">// 首先，初始化名字为 conversionService 的 Bean。本着送佛送到西的精神，我在附录中简单介绍了一下 ConversionService，因为这实在太实用了</span>\n   <span class=\"c1\">// 什么，看代码这里没有初始化 Bean 啊！</span>\n   <span class=\"c1\">// 注意了，初始化的动作包装在 beanFactory.getBean(...) 中，这里先不说细节，先往下看吧</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">containsBean</span><span class=\"o\">(</span><span class=\"no\">CONVERSION_SERVICE_BEAN_NAME</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span>\n         <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">isTypeMatch</span><span class=\"o\">(</span><span class=\"no\">CONVERSION_SERVICE_BEAN_NAME</span><span class=\"o\">,</span> <span class=\"nc\">ConversionService</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">setConversionService</span><span class=\"o\">(</span>\n            <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"no\">CONVERSION_SERVICE_BEAN_NAME</span><span class=\"o\">,</span> <span class=\"nc\">ConversionService</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">));</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// Register a default embedded value resolver if no bean post-processor</span>\n   <span class=\"c1\">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span>\n   <span class=\"c1\">// at this point, primarily for resolution in annotation attribute values.</span>\n   <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">hasEmbeddedValueResolver</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">addEmbeddedValueResolver</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">StringValueResolver</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n         <span class=\"nd\">@Override</span>\n         <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">resolveStringValue</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">strVal</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">getEnvironment</span><span class=\"o\">().</span><span class=\"na\">resolvePlaceholders</span><span class=\"o\">(</span><span class=\"n\">strVal</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">});</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// 先初始化 LoadTimeWeaverAware 类型的 Bean</span>\n   <span class=\"c1\">// 之前也说过，这是 AspectJ 相关的内容，放心跳过吧</span>\n   <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">weaverAwareNames</span> <span class=\"o\">=</span> <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">getBeanNamesForType</span><span class=\"o\">(</span><span class=\"nc\">LoadTimeWeaverAware</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>\n   <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">weaverAwareName</span> <span class=\"o\">:</span> <span class=\"n\">weaverAwareNames</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">getBean</span><span class=\"o\">(</span><span class=\"n\">weaverAwareName</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// Stop using the temporary ClassLoader for type matching.</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">setTempClassLoader</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n\n   <span class=\"c1\">// 没什么别的目的，因为到这一步的时候，Spring 已经开始预初始化 singleton beans 了，</span>\n   <span class=\"c1\">// 肯定不希望这个时候还出现 bean 定义解析、加载、注册。</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">freezeConfiguration</span><span class=\"o\">();</span>\n\n   <span class=\"c1\">// 开始初始化</span>\n   <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">preInstantiateSingletons</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>从上面最后一行往里看，我们就又回到 DefaultListableBeanFactory 这个类了，这个类大家应该都不陌生了吧。</p>\n\n<h4 id=\"preinstantiatesingletons\">preInstantiateSingletons</h4>\n\n<p>// DefaultListableBeanFactory 728</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">preInstantiateSingletons</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span> <span class=\"o\">{</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">logger</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Pre-instantiating singletons in \"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">// this.beanDefinitionNames 保存了所有的 beanNames</span>\n   <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">beanNames</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">beanDefinitionNames</span><span class=\"o\">);</span>\n\n   <span class=\"c1\">// 触发所有的非懒加载的 singleton beans 的初始化操作</span>\n   <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">beanName</span> <span class=\"o\">:</span> <span class=\"n\">beanNames</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n     \n      <span class=\"c1\">// 合并父 Bean 中的配置，注意 &lt;bean id=\"\" class=\"\" parent=\"\" /&gt; 中的 parent，用的不多吧，</span>\n      <span class=\"c1\">// 考虑到这可能会影响大家的理解，我在附录中解释了一下 \"Bean 继承\"，不了解的请到附录中看一下</span>\n      <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">bd</span> <span class=\"o\">=</span> <span class=\"n\">getMergedLocalBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n     \n      <span class=\"c1\">// 非抽象、非懒加载的 singletons。如果配置了 'abstract = true'，那是不需要初始化的</span>\n      <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">isAbstract</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">isSingleton</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">isLazyInit</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 处理 FactoryBean(读者如果不熟悉 FactoryBean，请移步附录区了解)</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isFactoryBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// FactoryBean 的话，在 beanName 前面加上 ‘&amp;’ 符号。再调用 getBean，getBean 方法别急</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">FactoryBean</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">FactoryBean</span><span class=\"o\">&lt;?&gt;)</span> <span class=\"n\">getBean</span><span class=\"o\">(</span><span class=\"no\">FACTORY_BEAN_PREFIX</span> <span class=\"o\">+</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n            <span class=\"c1\">// 判断当前 FactoryBean 是否是 SmartFactoryBean 的实现，此处忽略，直接跳过</span>\n            <span class=\"kt\">boolean</span> <span class=\"n\">isEagerInit</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">getSecurityManager</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">factory</span> <span class=\"k\">instanceof</span> <span class=\"nc\">SmartFactoryBean</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n               <span class=\"n\">isEagerInit</span> <span class=\"o\">=</span> <span class=\"nc\">AccessController</span><span class=\"o\">.</span><span class=\"na\">doPrivileged</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">PrivilegedAction</span><span class=\"o\">&lt;</span><span class=\"nc\">Boolean</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n                  <span class=\"nd\">@Override</span>\n                  <span class=\"kd\">public</span> <span class=\"nc\">Boolean</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n                     <span class=\"k\">return</span> <span class=\"o\">((</span><span class=\"nc\">SmartFactoryBean</span><span class=\"o\">&lt;?&gt;)</span> <span class=\"n\">factory</span><span class=\"o\">).</span><span class=\"na\">isEagerInit</span><span class=\"o\">();</span>\n                  <span class=\"o\">}</span>\n               <span class=\"o\">},</span> <span class=\"n\">getAccessControlContext</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">else</span> <span class=\"o\">{</span>\n               <span class=\"n\">isEagerInit</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">factory</span> <span class=\"k\">instanceof</span> <span class=\"nc\">SmartFactoryBean</span> <span class=\"o\">&amp;&amp;</span>\n                     <span class=\"o\">((</span><span class=\"nc\">SmartFactoryBean</span><span class=\"o\">&lt;?&gt;)</span> <span class=\"n\">factory</span><span class=\"o\">).</span><span class=\"na\">isEagerInit</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isEagerInit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n               \n               <span class=\"n\">getBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n         <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 对于普通的 Bean，只要调用 getBean(beanName) 这个方法就可以进行初始化了</span>\n            <span class=\"n\">getBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n  \n   <span class=\"c1\">// 到这里说明所有的非懒加载的 singleton beans 已经完成了初始化</span>\n   <span class=\"c1\">// 如果我们定义的 bean 是实现了 SmartInitializingSingleton 接口的，那么在这里得到回调，忽略</span>\n   <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">beanName</span> <span class=\"o\">:</span> <span class=\"n\">beanNames</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"nc\">Object</span> <span class=\"n\">singletonInstance</span> <span class=\"o\">=</span> <span class=\"n\">getSingleton</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">singletonInstance</span> <span class=\"k\">instanceof</span> <span class=\"nc\">SmartInitializingSingleton</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"kd\">final</span> <span class=\"nc\">SmartInitializingSingleton</span> <span class=\"n\">smartSingleton</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">SmartInitializingSingleton</span><span class=\"o\">)</span> <span class=\"n\">singletonInstance</span><span class=\"o\">;</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">getSecurityManager</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">AccessController</span><span class=\"o\">.</span><span class=\"na\">doPrivileged</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">PrivilegedAction</span><span class=\"o\">&lt;</span><span class=\"nc\">Object</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n               <span class=\"nd\">@Override</span>\n               <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n                  <span class=\"n\">smartSingleton</span><span class=\"o\">.</span><span class=\"na\">afterSingletonsInstantiated</span><span class=\"o\">();</span>\n                  <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n               <span class=\"o\">}</span>\n            <span class=\"o\">},</span> <span class=\"n\">getAccessControlContext</span><span class=\"o\">());</span>\n         <span class=\"o\">}</span>\n         <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">smartSingleton</span><span class=\"o\">.</span><span class=\"na\">afterSingletonsInstantiated</span><span class=\"o\">();</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>接下来，我们就进入到 getBean(beanName) 方法了，这个方法我们经常用来从 BeanFactory 中获取一个 Bean，而初始化的过程也封装到了这个方法里。</p>\n\n<h4 id=\"getbean\">getBean</h4>\n\n<p>在继续前进之前，读者应该具备 FactoryBean 的知识，如果读者还不熟悉，请移步附录部分了解 FactoryBean。</p>\n\n<p>// AbstractBeanFactory 196</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">getBean</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span> <span class=\"o\">{</span>\n   <span class=\"k\">return</span> <span class=\"nf\">doGetBean</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 我们在剖析初始化 Bean 的过程，但是 getBean 方法我们经常是用来从容器中获取 Bean 用的，注意切换思路，</span>\n<span class=\"c1\">// 已经初始化过了就从容器中直接返回，否则就先初始化再返回</span>\n<span class=\"nd\">@SuppressWarnings</span><span class=\"o\">(</span><span class=\"s\">\"unchecked\"</span><span class=\"o\">)</span>\n<span class=\"kd\">protected</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span> <span class=\"nf\">doGetBean</span><span class=\"o\">(</span>\n      <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">requiredType</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">typeCheckOnly</span><span class=\"o\">)</span>\n      <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 获取一个 “正统的” beanName，处理两种情况，一个是前面说的 FactoryBean(前面带 ‘&amp;’)，</span>\n   <span class=\"c1\">// 一个是别名问题，因为这个方法是 getBean，获取 Bean 用的，你要是传一个别名进来，是完全可以的</span>\n   <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">beanName</span> <span class=\"o\">=</span> <span class=\"n\">transformedBeanName</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n  \n   <span class=\"c1\">// 注意跟着这个，这个是返回值</span>\n   <span class=\"nc\">Object</span> <span class=\"n\">bean</span><span class=\"o\">;</span> \n\n   <span class=\"c1\">// 检查下是不是已经创建过了</span>\n   <span class=\"nc\">Object</span> <span class=\"n\">sharedInstance</span> <span class=\"o\">=</span> <span class=\"n\">getSingleton</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n  \n   <span class=\"c1\">// 这里说下 args 呗，虽然看上去一点不重要。前面我们一路进来的时候都是 getBean(beanName)，</span>\n   <span class=\"c1\">// 所以 args 传参其实是 null 的，但是如果 args 不为空的时候，那么意味着调用方不是希望获取 Bean，而是创建 Bean</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sharedInstance</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">args</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isSingletonCurrentlyInCreation</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"...\"</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n         <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Returning cached instance of singleton bean '\"</span> <span class=\"o\">+</span> <span class=\"n\">beanName</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"c1\">// 下面这个方法：如果是普通 Bean 的话，直接返回 sharedInstance，</span>\n      <span class=\"c1\">// 如果是 FactoryBean 的话，返回它创建的那个实例对象</span>\n      <span class=\"c1\">// (FactoryBean 知识，读者若不清楚请移步附录)</span>\n      <span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"n\">getObjectForBeanInstance</span><span class=\"o\">(</span><span class=\"n\">sharedInstance</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isPrototypeCurrentlyInCreation</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 创建过了此 beanName 的 prototype 类型的 bean，那么抛异常，</span>\n         <span class=\"c1\">// 往往是因为陷入了循环引用</span>\n         <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCurrentlyInCreationException</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"c1\">// 检查一下这个 BeanDefinition 在容器中是否存在</span>\n      <span class=\"nc\">BeanFactory</span> <span class=\"n\">parentBeanFactory</span> <span class=\"o\">=</span> <span class=\"n\">getParentBeanFactory</span><span class=\"o\">();</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parentBeanFactory</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">containsBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 如果当前容器不存在这个 BeanDefinition，试试父容器中有没有</span>\n         <span class=\"nc\">String</span> <span class=\"n\">nameToLookup</span> <span class=\"o\">=</span> <span class=\"n\">originalBeanName</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 返回父容器的查询结果</span>\n            <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">)</span> <span class=\"n\">parentBeanFactory</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"n\">nameToLookup</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n         <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// No args -&gt; delegate to standard getBean method.</span>\n            <span class=\"k\">return</span> <span class=\"n\">parentBeanFactory</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"n\">nameToLookup</span><span class=\"o\">,</span> <span class=\"n\">requiredType</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">typeCheckOnly</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// typeCheckOnly 为 false，将当前 beanName 放入一个 alreadyCreated 的 Set 集合中。</span>\n         <span class=\"n\">markBeanAsCreated</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"cm\">/*\n       * 稍稍总结一下：\n       * 到这里的话，要准备创建 Bean 了，对于 singleton 的 Bean 来说，容器中还没创建过此 Bean；\n       * 对于 prototype 的 Bean 来说，本来就是要创建一个新的 Bean。\n       */</span>\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n         <span class=\"kd\">final</span> <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">mbd</span> <span class=\"o\">=</span> <span class=\"n\">getMergedLocalBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n         <span class=\"n\">checkMergedBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n\n         <span class=\"c1\">// 先初始化依赖的所有 Bean，这个很好理解。</span>\n         <span class=\"c1\">// 注意，这里的依赖指的是 depends-on 中定义的依赖</span>\n         <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">dependsOn</span> <span class=\"o\">=</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getDependsOn</span><span class=\"o\">();</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">dependsOn</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">dep</span> <span class=\"o\">:</span> <span class=\"n\">dependsOn</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n               <span class=\"c1\">// 检查是不是有循环依赖，这里的循环依赖和我们前面说的循环依赖又不一样，这里肯定是不允许出现的，不然要乱套了，读者想一下就知道了</span>\n               <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isDependent</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">dep</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">,</span>\n                        <span class=\"s\">\"Circular depends-on relationship between '\"</span> <span class=\"o\">+</span> <span class=\"n\">beanName</span> <span class=\"o\">+</span> <span class=\"s\">\"' and '\"</span> <span class=\"o\">+</span> <span class=\"n\">dep</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"o\">);</span>\n               <span class=\"o\">}</span>\n               <span class=\"c1\">// 注册一下依赖关系</span>\n               <span class=\"n\">registerDependentBean</span><span class=\"o\">(</span><span class=\"n\">dep</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n               <span class=\"c1\">// 先初始化被依赖项</span>\n               <span class=\"n\">getBean</span><span class=\"o\">(</span><span class=\"n\">dep</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n\n         <span class=\"c1\">// 如果是 singleton scope 的，创建 singleton 的实例</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isSingleton</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">sharedInstance</span> <span class=\"o\">=</span> <span class=\"n\">getSingleton</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">ObjectFactory</span><span class=\"o\">&lt;</span><span class=\"nc\">Object</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n               <span class=\"nd\">@Override</span>\n               <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">getObject</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span> <span class=\"o\">{</span>\n                  <span class=\"k\">try</span> <span class=\"o\">{</span>\n                     <span class=\"c1\">// 执行创建 Bean，详情后面再说</span>\n                     <span class=\"k\">return</span> <span class=\"nf\">createBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n                  <span class=\"o\">}</span>\n                  <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BeansException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                     <span class=\"n\">destroySingleton</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n                     <span class=\"k\">throw</span> <span class=\"n\">ex</span><span class=\"o\">;</span>\n                  <span class=\"o\">}</span>\n               <span class=\"o\">}</span>\n            <span class=\"o\">});</span>\n            <span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"n\">getObjectForBeanInstance</span><span class=\"o\">(</span><span class=\"n\">sharedInstance</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n\n         <span class=\"c1\">// 如果是 prototype scope 的，创建 prototype 的实例</span>\n         <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isPrototype</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// It's a prototype -&gt; create a new instance.</span>\n            <span class=\"nc\">Object</span> <span class=\"n\">prototypeInstance</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"k\">try</span> <span class=\"o\">{</span>\n               <span class=\"n\">beforePrototypeCreation</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n               <span class=\"c1\">// 执行创建 Bean</span>\n               <span class=\"n\">prototypeInstance</span> <span class=\"o\">=</span> <span class=\"n\">createBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">finally</span> <span class=\"o\">{</span>\n               <span class=\"n\">afterPrototypeCreation</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"n\">getObjectForBeanInstance</span><span class=\"o\">(</span><span class=\"n\">prototypeInstance</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n\n         <span class=\"c1\">// 如果不是 singleton 和 prototype 的话，需要委托给相应的实现类来处理</span>\n         <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"nc\">String</span> <span class=\"n\">scopeName</span> <span class=\"o\">=</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getScope</span><span class=\"o\">();</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">Scope</span> <span class=\"n\">scope</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">scopes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">scopeName</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">scope</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n               <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IllegalStateException</span><span class=\"o\">(</span><span class=\"s\">\"No Scope registered for scope name '\"</span> <span class=\"o\">+</span> <span class=\"n\">scopeName</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">try</span> <span class=\"o\">{</span>\n               <span class=\"nc\">Object</span> <span class=\"n\">scopedInstance</span> <span class=\"o\">=</span> <span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">ObjectFactory</span><span class=\"o\">&lt;</span><span class=\"nc\">Object</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n                  <span class=\"nd\">@Override</span>\n                  <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">getObject</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span> <span class=\"o\">{</span>\n                     <span class=\"n\">beforePrototypeCreation</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n                     <span class=\"k\">try</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">// 执行创建 Bean</span>\n                        <span class=\"k\">return</span> <span class=\"nf\">createBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n                     <span class=\"o\">}</span>\n                     <span class=\"k\">finally</span> <span class=\"o\">{</span>\n                        <span class=\"n\">afterPrototypeCreation</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n                     <span class=\"o\">}</span>\n                  <span class=\"o\">}</span>\n               <span class=\"o\">});</span>\n               <span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"n\">getObjectForBeanInstance</span><span class=\"o\">(</span><span class=\"n\">scopedInstance</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IllegalStateException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n               <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span>\n                     <span class=\"s\">\"Scope '\"</span> <span class=\"o\">+</span> <span class=\"n\">scopeName</span> <span class=\"o\">+</span> <span class=\"s\">\"' is not active for the current thread; consider \"</span> <span class=\"o\">+</span>\n                     <span class=\"s\">\"defining a scoped proxy for this bean if you intend to refer to it from a singleton\"</span><span class=\"o\">,</span>\n                     <span class=\"n\">ex</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BeansException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">cleanupAfterBeanCreationFailure</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n         <span class=\"k\">throw</span> <span class=\"n\">ex</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// 最后，检查一下类型对不对，不对的话就抛异常，对的话就返回了</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">requiredType</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">bean</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">requiredType</span><span class=\"o\">.</span><span class=\"na\">isInstance</span><span class=\"o\">(</span><span class=\"n\">bean</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n         <span class=\"k\">return</span> <span class=\"nf\">getTypeConverter</span><span class=\"o\">().</span><span class=\"na\">convertIfNecessary</span><span class=\"o\">(</span><span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">requiredType</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">TypeMismatchException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Failed to convert bean '\"</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">\"' to required type '\"</span> <span class=\"o\">+</span>\n                  <span class=\"nc\">ClassUtils</span><span class=\"o\">.</span><span class=\"na\">getQualifiedName</span><span class=\"o\">(</span><span class=\"n\">requiredType</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n         <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanNotOfRequiredTypeException</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">requiredType</span><span class=\"o\">,</span> <span class=\"n\">bean</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">());</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">)</span> <span class=\"n\">bean</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>大家应该也猜到了，接下来当然是分析 createBean 方法：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"kd\">abstract</span> <span class=\"nc\">Object</span> <span class=\"nf\">createBean</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeanCreationException</span><span class=\"o\">;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>第三个参数 args 数组代表创建实例需要的参数，不就是给构造方法用的参数，或者是工厂 Bean 的参数嘛，不过要注意，在我们的初始化阶段，args 是 null。</p>\n\n<p>这回我们要到一个新的类了 AbstractAutowireCapableBeanFactory，看类名，AutowireCapable？类名是不是也说明了点问题了。</p>\n\n<p>主要是为了以下场景，采用 @Autowired 注解注入属性值：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MessageServiceImpl</span> <span class=\"kd\">implements</span> <span class=\"nc\">MessageService</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Autowired</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">UserService</span> <span class=\"n\">userService</span><span class=\"o\">;</span>\n  \n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">userService</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"messageService\"</span> <span class=\"na\">class=</span><span class=\"s\">\"com.javadoop.example.MessageServiceImpl\"</span> <span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>以上这种属于混用了 xml 和 注解 两种方式的配置方式，Spring 会处理这种情况。</p>\n\n<p>好了，读者要知道这么回事就可以了，继续向前。</p>\n\n<p>// AbstractAutowireCapableBeanFactory 447</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cm\">/**\n * Central method of this class: creates a bean instance,\n * populates the bean instance, applies post-processors, etc.\n * @see #doCreateBean\n */</span>\n<span class=\"nd\">@Override</span>\n<span class=\"kd\">protected</span> <span class=\"nc\">Object</span> <span class=\"nf\">createBean</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeanCreationException</span> <span class=\"o\">{</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Creating instance of bean '\"</span> <span class=\"o\">+</span> <span class=\"n\">beanName</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">mbdToUse</span> <span class=\"o\">=</span> <span class=\"n\">mbd</span><span class=\"o\">;</span>\n\n   <span class=\"c1\">// 确保 BeanDefinition 中的 Class 被加载</span>\n   <span class=\"nc\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">resolvedClass</span> <span class=\"o\">=</span> <span class=\"n\">resolveBeanClass</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resolvedClass</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">hasBeanClass</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getBeanClassName</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">mbdToUse</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RootBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">);</span>\n      <span class=\"n\">mbdToUse</span><span class=\"o\">.</span><span class=\"na\">setBeanClass</span><span class=\"o\">(</span><span class=\"n\">resolvedClass</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// 准备方法覆写，这里又涉及到一个概念：MethodOverrides，它来自于 bean 定义中的 &lt;lookup-method /&gt; </span>\n   <span class=\"c1\">// 和 &lt;replaced-method /&gt;，如果读者感兴趣，回到 bean 解析的地方看看对这两个标签的解析。</span>\n   <span class=\"c1\">// 我在附录中也对这两个标签的相关知识点进行了介绍，读者可以移步去看看</span>\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"n\">mbdToUse</span><span class=\"o\">.</span><span class=\"na\">prepareMethodOverrides</span><span class=\"o\">();</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BeanDefinitionValidationException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanDefinitionStoreException</span><span class=\"o\">(</span><span class=\"n\">mbdToUse</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span>\n            <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"s\">\"Validation of method overrides failed\"</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 让 InstantiationAwareBeanPostProcessor 在这一步有机会返回代理，</span>\n      <span class=\"c1\">// 在 《Spring AOP 源码分析》那篇文章中有解释，这里先跳过</span>\n      <span class=\"nc\">Object</span> <span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"n\">resolveBeforeInstantiation</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbdToUse</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bean</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">return</span> <span class=\"n\">bean</span><span class=\"o\">;</span> \n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Throwable</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span><span class=\"n\">mbdToUse</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">,</span>\n            <span class=\"s\">\"BeanPostProcessor before instantiation of bean failed\"</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">// 重头戏，创建 bean</span>\n   <span class=\"nc\">Object</span> <span class=\"n\">beanInstance</span> <span class=\"o\">=</span> <span class=\"n\">doCreateBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbdToUse</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Finished creating instance of bean '\"</span> <span class=\"o\">+</span> <span class=\"n\">beanName</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">beanInstance</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h4 id=\"创建-bean\">创建 Bean</h4>\n\n<p>我们继续往里看 doCreateBean 这个方法：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cm\">/**\n * Actually create the specified bean. Pre-creation processing has already happened\n * at this point, e.g. checking {@code postProcessBeforeInstantiation} callbacks.\n * &lt;p&gt;Differentiates between default bean instantiation, use of a\n * factory method, and autowiring a constructor.\n * @param beanName the name of the bean\n * @param mbd the merged bean definition for the bean\n * @param args explicit arguments to use for constructor or factory method invocation\n * @return a new instance of the bean\n * @throws BeanCreationException if the bean could not be created\n * @see #instantiateBean\n * @see #instantiateUsingFactoryMethod\n * @see #autowireConstructor\n */</span>\n<span class=\"kd\">protected</span> <span class=\"nc\">Object</span> <span class=\"nf\">doCreateBean</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n      <span class=\"kd\">throws</span> <span class=\"nc\">BeanCreationException</span> <span class=\"o\">{</span>\n\n   <span class=\"c1\">// Instantiate the bean.</span>\n   <span class=\"nc\">BeanWrapper</span> <span class=\"n\">instanceWrapper</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isSingleton</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">instanceWrapper</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">factoryBeanInstanceCache</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">instanceWrapper</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 说明不是 FactoryBean，这里实例化 Bean，这里非常关键，细节之后再说</span>\n      <span class=\"n\">instanceWrapper</span> <span class=\"o\">=</span> <span class=\"n\">createBeanInstance</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">// 这个就是 Bean 里面的 我们定义的类 的实例，很多地方我直接描述成 \"bean 实例\"</span>\n   <span class=\"kd\">final</span> <span class=\"nc\">Object</span> <span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">instanceWrapper</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">instanceWrapper</span><span class=\"o\">.</span><span class=\"na\">getWrappedInstance</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n   <span class=\"c1\">// 类型</span>\n   <span class=\"nc\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">beanType</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">instanceWrapper</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">instanceWrapper</span><span class=\"o\">.</span><span class=\"na\">getWrappedClass</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n   <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">resolvedTargetType</span> <span class=\"o\">=</span> <span class=\"n\">beanType</span><span class=\"o\">;</span>\n\n   <span class=\"c1\">// 建议跳过吧，涉及接口：MergedBeanDefinitionPostProcessor</span>\n   <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">postProcessingLock</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">postProcessed</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// MergedBeanDefinitionPostProcessor，这个我真不展开说了，直接跳过吧，很少用的</span>\n            <span class=\"n\">applyMergedBeanDefinitionPostProcessors</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">beanType</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n         <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Throwable</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">,</span>\n                  <span class=\"s\">\"Post-processing of merged bean definition failed\"</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n         <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">postProcessed</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// Eagerly cache singletons to be able to resolve circular references</span>\n   <span class=\"c1\">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span>\n   <span class=\"c1\">// 下面这块代码是为了解决循环依赖的问题，以后有时间，我再对循环依赖这个问题进行解析吧</span>\n   <span class=\"kt\">boolean</span> <span class=\"n\">earlySingletonExposure</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isSingleton</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">allowCircularReferences</span> <span class=\"o\">&amp;&amp;</span>\n         <span class=\"n\">isSingletonCurrentlyInCreation</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">));</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">earlySingletonExposure</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Eagerly caching bean '\"</span> <span class=\"o\">+</span> <span class=\"n\">beanName</span> <span class=\"o\">+</span>\n               <span class=\"s\">\"' to allow for resolving potential circular references\"</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">addSingletonFactory</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">ObjectFactory</span><span class=\"o\">&lt;</span><span class=\"nc\">Object</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n         <span class=\"nd\">@Override</span>\n         <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">getObject</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">getEarlyBeanReference</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">bean</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">});</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// Initialize the bean instance.</span>\n   <span class=\"nc\">Object</span> <span class=\"n\">exposedObject</span> <span class=\"o\">=</span> <span class=\"n\">bean</span><span class=\"o\">;</span>\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 这一步也是非常关键的，这一步负责属性装配，因为前面的实例只是实例化了，并没有设值，这里就是设值</span>\n      <span class=\"n\">populateBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">instanceWrapper</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">exposedObject</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 还记得 init-method 吗？还有 InitializingBean 接口？还有 BeanPostProcessor 接口？</span>\n         <span class=\"c1\">// 这里就是处理 bean 初始化完成后的各种回调</span>\n         <span class=\"n\">exposedObject</span> <span class=\"o\">=</span> <span class=\"n\">initializeBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">exposedObject</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Throwable</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ex</span> <span class=\"k\">instanceof</span> <span class=\"nc\">BeanCreationException</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">beanName</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(((</span><span class=\"nc\">BeanCreationException</span><span class=\"o\">)</span> <span class=\"n\">ex</span><span class=\"o\">).</span><span class=\"na\">getBeanName</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n         <span class=\"k\">throw</span> <span class=\"o\">(</span><span class=\"nc\">BeanCreationException</span><span class=\"o\">)</span> <span class=\"n\">ex</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"o\">{</span>\n         <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span>\n               <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"s\">\"Initialization of bean failed\"</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">earlySingletonExposure</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// </span>\n      <span class=\"nc\">Object</span> <span class=\"n\">earlySingletonReference</span> <span class=\"o\">=</span> <span class=\"n\">getSingleton</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">earlySingletonReference</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">exposedObject</span> <span class=\"o\">==</span> <span class=\"n\">bean</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">exposedObject</span> <span class=\"o\">=</span> <span class=\"n\">earlySingletonReference</span><span class=\"o\">;</span>\n         <span class=\"o\">}</span>\n         <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(!</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">allowRawInjectionDespiteWrapping</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">hasDependentBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">dependentBeans</span> <span class=\"o\">=</span> <span class=\"n\">getDependentBeans</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n            <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">actualDependentBeans</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LinkedHashSet</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;(</span><span class=\"n\">dependentBeans</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">dependentBean</span> <span class=\"o\">:</span> <span class=\"n\">dependentBeans</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n               <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">removeSingletonIfCreatedForTypeCheckOnly</span><span class=\"o\">(</span><span class=\"n\">dependentBean</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                  <span class=\"n\">actualDependentBeans</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">dependentBean</span><span class=\"o\">);</span>\n               <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">actualDependentBeans</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n               <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCurrentlyInCreationException</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span>\n                     <span class=\"s\">\"Bean with name '\"</span> <span class=\"o\">+</span> <span class=\"n\">beanName</span> <span class=\"o\">+</span> <span class=\"s\">\"' has been injected into other beans [\"</span> <span class=\"o\">+</span>\n                     <span class=\"nc\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">collectionToCommaDelimitedString</span><span class=\"o\">(</span><span class=\"n\">actualDependentBeans</span><span class=\"o\">)</span> <span class=\"o\">+</span>\n                     <span class=\"s\">\"] in its raw version as part of a circular reference, but has eventually been \"</span> <span class=\"o\">+</span>\n                     <span class=\"s\">\"wrapped. This means that said other beans do not use the final version of the \"</span> <span class=\"o\">+</span>\n                     <span class=\"s\">\"bean. This is often the result of over-eager type matching - consider using \"</span> <span class=\"o\">+</span>\n                     <span class=\"s\">\"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\"</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// Register bean as disposable.</span>\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"n\">registerDisposableBeanIfNecessary</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">BeanDefinitionValidationException</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span>\n            <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"s\">\"Invalid destruction signature\"</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">return</span> <span class=\"n\">exposedObject</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>到这里，我们已经分析完了 doCreateBean 方法，总的来说，我们已经说完了整个初始化流程。</p>\n\n<p>接下来我们挑 doCreateBean 中的三个细节出来说说。一个是创建 Bean 实例的 createBeanInstance 方法，一个是依赖注入的 populateBean 方法，还有就是回调方法 initializeBean。</p>\n\n<p>注意了，接下来的这三个方法要认真说那也是极其复杂的，很多地方我就点到为止了，感兴趣的读者可以自己往里看，最好就是碰到不懂的，自己写代码去调试它。</p>\n\n<h5 id=\"创建-bean-实例\">创建 Bean 实例</h5>\n\n<p>我们先看看 createBeanInstance 方法。需要说明的是，这个方法如果每个分支都分析下去，必然也是极其复杂冗长的，我们挑重点说。此方法的目的就是实例化我们指定的类。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"nc\">BeanWrapper</span> <span class=\"nf\">createBeanInstance</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// 确保已经加载了此 class</span>\n   <span class=\"nc\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">beanClass</span> <span class=\"o\">=</span> <span class=\"n\">resolveBeanClass</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n\n   <span class=\"c1\">// 校验一下这个类的访问权限</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">beanClass</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nc\">Modifier</span><span class=\"o\">.</span><span class=\"na\">isPublic</span><span class=\"o\">(</span><span class=\"n\">beanClass</span><span class=\"o\">.</span><span class=\"na\">getModifiers</span><span class=\"o\">())</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isNonPublicAccessAllowed</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">,</span>\n            <span class=\"s\">\"Bean class isn't public, and non-public access not allowed: \"</span> <span class=\"o\">+</span> <span class=\"n\">beanClass</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getFactoryMethodName</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>  <span class=\"o\">{</span>\n      <span class=\"c1\">// 采用工厂方法实例化，不熟悉这个概念的读者请看附录，注意，不是 FactoryBean</span>\n      <span class=\"k\">return</span> <span class=\"nf\">instantiateUsingFactoryMethod</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// 如果不是第一次创建，比如第二次创建 prototype bean。</span>\n   <span class=\"c1\">// 这种情况下，我们可以从第一次创建知道，采用无参构造函数，还是构造函数依赖注入 来完成实例化</span>\n   <span class=\"kt\">boolean</span> <span class=\"n\">resolved</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n   <span class=\"kt\">boolean</span> <span class=\"n\">autowireNecessary</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">constructorArgumentLock</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">resolvedConstructorOrFactoryMethod</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">resolved</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">autowireNecessary</span> <span class=\"o\">=</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">constructorArgumentsResolved</span><span class=\"o\">;</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resolved</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">autowireNecessary</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 构造函数依赖注入</span>\n         <span class=\"k\">return</span> <span class=\"nf\">autowireConstructor</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 无参构造函数</span>\n         <span class=\"k\">return</span> <span class=\"nf\">instantiateBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// 判断是否采用有参构造函数</span>\n   <span class=\"nc\">Constructor</span><span class=\"o\">&lt;?&gt;[]</span> <span class=\"n\">ctors</span> <span class=\"o\">=</span> <span class=\"n\">determineConstructorsFromBeanPostProcessors</span><span class=\"o\">(</span><span class=\"n\">beanClass</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ctors</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">||</span>\n         <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResolvedAutowireMode</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"nc\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">AUTOWIRE_CONSTRUCTOR</span> <span class=\"o\">||</span>\n         <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">hasConstructorArgumentValues</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nc\">ObjectUtils</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">))</span>  <span class=\"o\">{</span>\n      <span class=\"c1\">// 构造函数依赖注入</span>\n      <span class=\"k\">return</span> <span class=\"nf\">autowireConstructor</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">ctors</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// 调用无参构造函数</span>\n   <span class=\"k\">return</span> <span class=\"nf\">instantiateBean</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>挑个简单的<strong>无参构造函数</strong>构造实例来看看：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"nc\">BeanWrapper</span> <span class=\"nf\">instantiateBean</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">mbd</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"nc\">Object</span> <span class=\"n\">beanInstance</span><span class=\"o\">;</span>\n      <span class=\"kd\">final</span> <span class=\"nc\">BeanFactory</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">getSecurityManager</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">beanInstance</span> <span class=\"o\">=</span> <span class=\"nc\">AccessController</span><span class=\"o\">.</span><span class=\"na\">doPrivileged</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">PrivilegedAction</span><span class=\"o\">&lt;</span><span class=\"nc\">Object</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n            <span class=\"nd\">@Override</span>\n            <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n               \n               <span class=\"k\">return</span> <span class=\"nf\">getInstantiationStrategy</span><span class=\"o\">().</span><span class=\"na\">instantiate</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">},</span> <span class=\"n\">getAccessControlContext</span><span class=\"o\">());</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// 实例化</span>\n         <span class=\"n\">beanInstance</span> <span class=\"o\">=</span> <span class=\"n\">getInstantiationStrategy</span><span class=\"o\">().</span><span class=\"na\">instantiate</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"c1\">// 包装一下，返回</span>\n      <span class=\"nc\">BeanWrapper</span> <span class=\"n\">bw</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BeanWrapperImpl</span><span class=\"o\">(</span><span class=\"n\">beanInstance</span><span class=\"o\">);</span>\n      <span class=\"n\">initBeanWrapper</span><span class=\"o\">(</span><span class=\"n\">bw</span><span class=\"o\">);</span>\n      <span class=\"k\">return</span> <span class=\"n\">bw</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Throwable</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span>\n            <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"s\">\"Instantiation of bean failed\"</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>我们可以看到，关键的地方在于：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">beanInstance</span> <span class=\"o\">=</span> <span class=\"n\">getInstantiationStrategy</span><span class=\"o\">().</span><span class=\"na\">instantiate</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"o\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>这里会进行实际的实例化过程，我们进去看看:</p>\n\n<p>// SimpleInstantiationStrategy 59</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">instantiate</span><span class=\"o\">(</span><span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">bd</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"nc\">BeanFactory</span> <span class=\"n\">owner</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n   <span class=\"c1\">// 如果不存在方法覆写，那就使用 java 反射进行实例化，否则使用 CGLIB,</span>\n   <span class=\"c1\">// 方法覆写 请参见附录\"方法注入\"中对 lookup-method 和 replaced-method 的介绍</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">getMethodOverrides</span><span class=\"o\">().</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"nc\">Constructor</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">constructorToUse</span><span class=\"o\">;</span>\n      <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">constructorArgumentLock</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">constructorToUse</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">Constructor</span><span class=\"o\">&lt;?&gt;)</span> <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">resolvedConstructorOrFactoryMethod</span><span class=\"o\">;</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">constructorToUse</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">clazz</span> <span class=\"o\">=</span> <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">getBeanClass</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">clazz</span><span class=\"o\">.</span><span class=\"na\">isInterface</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n               <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanInstantiationException</span><span class=\"o\">(</span><span class=\"n\">clazz</span><span class=\"o\">,</span> <span class=\"s\">\"Specified class is an interface\"</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">try</span> <span class=\"o\">{</span>\n               <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">getSecurityManager</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                  <span class=\"n\">constructorToUse</span> <span class=\"o\">=</span> <span class=\"nc\">AccessController</span><span class=\"o\">.</span><span class=\"na\">doPrivileged</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">PrivilegedExceptionAction</span><span class=\"o\">&lt;</span><span class=\"nc\">Constructor</span><span class=\"o\">&lt;?&gt;&gt;()</span> <span class=\"o\">{</span>\n                     <span class=\"nd\">@Override</span>\n                     <span class=\"kd\">public</span> <span class=\"nc\">Constructor</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">run</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n                        <span class=\"k\">return</span> <span class=\"n\">clazz</span><span class=\"o\">.</span><span class=\"na\">getDeclaredConstructor</span><span class=\"o\">((</span><span class=\"nc\">Class</span><span class=\"o\">[])</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n                     <span class=\"o\">}</span>\n                  <span class=\"o\">});</span>\n               <span class=\"o\">}</span>\n               <span class=\"k\">else</span> <span class=\"o\">{</span>\n                  <span class=\"n\">constructorToUse</span> <span class=\"o\">=</span> <span class=\"n\">clazz</span><span class=\"o\">.</span><span class=\"na\">getDeclaredConstructor</span><span class=\"o\">((</span><span class=\"nc\">Class</span><span class=\"o\">[])</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n               <span class=\"o\">}</span>\n               <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"na\">resolvedConstructorOrFactoryMethod</span> <span class=\"o\">=</span> <span class=\"n\">constructorToUse</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Throwable</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n               <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanInstantiationException</span><span class=\"o\">(</span><span class=\"n\">clazz</span><span class=\"o\">,</span> <span class=\"s\">\"No default constructor found\"</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"c1\">// 利用构造方法进行实例化</span>\n      <span class=\"k\">return</span> <span class=\"nc\">BeanUtils</span><span class=\"o\">.</span><span class=\"na\">instantiateClass</span><span class=\"o\">(</span><span class=\"n\">constructorToUse</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 存在方法覆写，利用 CGLIB 来完成实例化，需要依赖于 CGLIB 生成子类，这里就不展开了。</span>\n      <span class=\"c1\">// tips: 因为如果不使用 CGLIB 的话，存在 override 的情况 JDK 并没有提供相应的实例化支持</span>\n      <span class=\"k\">return</span> <span class=\"nf\">instantiateWithMethodInjection</span><span class=\"o\">(</span><span class=\"n\">bd</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">owner</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>到这里，我们就算实例化完成了。我们开始说怎么进行属性注入。</p>\n\n<h5 id=\"bean-属性注入\">bean 属性注入</h5>\n\n<p>看完了 createBeanInstance(…) 方法，我们来看看 populateBean(…) 方法，该方法负责进行属性设值，处理依赖。</p>\n\n<p>// AbstractAutowireCapableBeanFactory 1203</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">populateBean</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"nc\">BeanWrapper</span> <span class=\"n\">bw</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"c1\">// bean 实例的所有属性都在这里了</span>\n   <span class=\"nc\">PropertyValues</span> <span class=\"n\">pvs</span> <span class=\"o\">=</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getPropertyValues</span><span class=\"o\">();</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bw</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">pvs</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span>\n               <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"s\">\"Cannot apply property values to null instance\"</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"o\">{</span>\n         <span class=\"c1\">// Skip property population phase for null instance.</span>\n         <span class=\"k\">return</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c1\">// 到这步的时候，bean 实例化完成（通过工厂方法或构造方法），但是还没开始属性设值，</span>\n   <span class=\"c1\">// InstantiationAwareBeanPostProcessor 的实现类可以在这里对 bean 进行状态修改，</span>\n   <span class=\"c1\">// 我也没找到有实际的使用，所以我们暂且忽略这块吧</span>\n   <span class=\"kt\">boolean</span> <span class=\"n\">continueWithPropertyPopulation</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n   <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isSynthetic</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">hasInstantiationAwareBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">BeanPostProcessor</span> <span class=\"n\">bp</span> <span class=\"o\">:</span> <span class=\"n\">getBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bp</span> <span class=\"k\">instanceof</span> <span class=\"nc\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">InstantiationAwareBeanPostProcessor</span> <span class=\"n\">ibp</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"n\">bp</span><span class=\"o\">;</span>\n            <span class=\"c1\">// 如果返回 false，代表不需要进行后续的属性设值，也不需要再经过其他的 BeanPostProcessor 的处理</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">ibp</span><span class=\"o\">.</span><span class=\"na\">postProcessAfterInstantiation</span><span class=\"o\">(</span><span class=\"n\">bw</span><span class=\"o\">.</span><span class=\"na\">getWrappedInstance</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n               <span class=\"n\">continueWithPropertyPopulation</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n               <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">continueWithPropertyPopulation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResolvedAutowireMode</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"nc\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">AUTOWIRE_BY_NAME</span> <span class=\"o\">||</span>\n         <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResolvedAutowireMode</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"nc\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">AUTOWIRE_BY_TYPE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"nc\">MutablePropertyValues</span> <span class=\"n\">newPvs</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MutablePropertyValues</span><span class=\"o\">(</span><span class=\"n\">pvs</span><span class=\"o\">);</span>\n\n      <span class=\"c1\">// 通过名字找到所有属性值，如果是 bean 依赖，先初始化依赖的 bean。记录依赖关系</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResolvedAutowireMode</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"nc\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">AUTOWIRE_BY_NAME</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">autowireByName</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">newPvs</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"c1\">// 通过类型装配。复杂一些</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResolvedAutowireMode</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"nc\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">AUTOWIRE_BY_TYPE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">autowireByType</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">newPvs</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"n\">pvs</span> <span class=\"o\">=</span> <span class=\"n\">newPvs</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"kt\">boolean</span> <span class=\"n\">hasInstAwareBpps</span> <span class=\"o\">=</span> <span class=\"n\">hasInstantiationAwareBeanPostProcessors</span><span class=\"o\">();</span>\n   <span class=\"kt\">boolean</span> <span class=\"n\">needsDepCheck</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getDependencyCheck</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"nc\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">DEPENDENCY_CHECK_NONE</span><span class=\"o\">);</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasInstAwareBpps</span> <span class=\"o\">||</span> <span class=\"n\">needsDepCheck</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"nc\">PropertyDescriptor</span><span class=\"o\">[]</span> <span class=\"n\">filteredPds</span> <span class=\"o\">=</span> <span class=\"n\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"o\">(</span><span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">allowCaching</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasInstAwareBpps</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">BeanPostProcessor</span> <span class=\"n\">bp</span> <span class=\"o\">:</span> <span class=\"n\">getBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bp</span> <span class=\"k\">instanceof</span> <span class=\"nc\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n               <span class=\"nc\">InstantiationAwareBeanPostProcessor</span> <span class=\"n\">ibp</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"n\">bp</span><span class=\"o\">;</span>\n               <span class=\"c1\">// 这里有个非常有用的 BeanPostProcessor 进到这里: AutowiredAnnotationBeanPostProcessor</span>\n               <span class=\"c1\">// 对采用 @Autowired、@Value 注解的依赖进行设值，这里的内容也是非常丰富的，不过本文不会展开说了，感兴趣的读者请自行研究</span>\n               <span class=\"n\">pvs</span> <span class=\"o\">=</span> <span class=\"n\">ibp</span><span class=\"o\">.</span><span class=\"na\">postProcessPropertyValues</span><span class=\"o\">(</span><span class=\"n\">pvs</span><span class=\"o\">,</span> <span class=\"n\">filteredPds</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">.</span><span class=\"na\">getWrappedInstance</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n               <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pvs</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                  <span class=\"k\">return</span><span class=\"o\">;</span>\n               <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">needsDepCheck</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">checkDependencies</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">filteredPds</span><span class=\"o\">,</span> <span class=\"n\">pvs</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">// 设置 bean 实例的属性值</span>\n   <span class=\"n\">applyPropertyValues</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">pvs</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h5 id=\"initializebean\">initializeBean</h5>\n\n<p>属性注入完成后，这一步其实就是处理各种回调了，这块代码比较简单。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">protected</span> <span class=\"nc\">Object</span> <span class=\"nf\">initializeBean</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">mbd</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">getSecurityManager</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"nc\">AccessController</span><span class=\"o\">.</span><span class=\"na\">doPrivileged</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">PrivilegedAction</span><span class=\"o\">&lt;</span><span class=\"nc\">Object</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n         <span class=\"nd\">@Override</span>\n         <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"n\">invokeAwareMethods</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">bean</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n         <span class=\"o\">}</span>\n      <span class=\"o\">},</span> <span class=\"n\">getAccessControlContext</span><span class=\"o\">());</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 如果 bean 实现了 BeanNameAware、BeanClassLoaderAware 或 BeanFactoryAware 接口，回调</span>\n      <span class=\"n\">invokeAwareMethods</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">bean</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"nc\">Object</span> <span class=\"n\">wrappedBean</span> <span class=\"o\">=</span> <span class=\"n\">bean</span><span class=\"o\">;</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isSynthetic</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// BeanPostProcessor 的 postProcessBeforeInitialization 回调</span>\n      <span class=\"n\">wrappedBean</span> <span class=\"o\">=</span> <span class=\"n\">applyBeanPostProcessorsBeforeInitialization</span><span class=\"o\">(</span><span class=\"n\">wrappedBean</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// 处理 bean 中定义的 init-method，</span>\n      <span class=\"c1\">// 或者如果 bean 实现了 InitializingBean 接口，调用 afterPropertiesSet() 方法</span>\n      <span class=\"n\">invokeInitMethods</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">wrappedBean</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Throwable</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">BeanCreationException</span><span class=\"o\">(</span>\n            <span class=\"o\">(</span><span class=\"n\">mbd</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"o\">),</span>\n            <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"s\">\"Invocation of init method failed\"</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isSynthetic</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// BeanPostProcessor 的 postProcessAfterInitialization 回调</span>\n      <span class=\"n\">wrappedBean</span> <span class=\"o\">=</span> <span class=\"n\">applyBeanPostProcessorsAfterInitialization</span><span class=\"o\">(</span><span class=\"n\">wrappedBean</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">wrappedBean</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>大家发现没有，BeanPostProcessor 的两个回调都发生在这边，只不过中间处理了 init-method，是不是和读者原来的认知有点不一样了？</p>\n\n<h2 id=\"附录\">附录</h2>\n\n<h3 id=\"id-和-name\">id 和 name</h3>\n\n<p>每个 Bean 在 Spring 容器中都有一个唯一的名字（beanName）和 0 个或多个别名（aliases）。</p>\n\n<p>我们从 Spring 容器中获取 Bean 的时候，可以根据 beanName，也可以通过别名。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"s\">\"beanName or alias\"</span><span class=\"o\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>在配置 <code class=\"highlighter-rouge\">&lt;bean /&gt;</code> 的过程中，我们可以配置 id 和 name，看几个例子就知道是怎么回事了。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"messageService\"</span> <span class=\"na\">name=</span><span class=\"s\">\"m1, m2, m3\"</span> <span class=\"na\">class=</span><span class=\"s\">\"com.javadoop.example.MessageServiceImpl\"</span><span class=\"nt\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>以上配置的结果就是：beanName 为 messageService，别名有 3 个，分别为 m1、m2、m3。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">name=</span><span class=\"s\">\"m1, m2, m3\"</span> <span class=\"na\">class=</span><span class=\"s\">\"com.javadoop.example.MessageServiceImpl\"</span> <span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>以上配置的结果就是：beanName 为 m1，别名有 2 个，分别为 m2、m3。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">class=</span><span class=\"s\">\"com.javadoop.example.MessageServiceImpl\"</span><span class=\"nt\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>beanName 为：com.javadoop.example.MessageServiceImpl#0，</p>\n\n<p>别名 1 个，为： com.javadoop.example.MessageServiceImpl</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"messageService\"</span> <span class=\"na\">class=</span><span class=\"s\">\"com.javadoop.example.MessageServiceImpl\"</span><span class=\"nt\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>以上配置的结果就是：beanName 为 messageService，没有别名。</p>\n\n<h3 id=\"配置是否允许-bean-覆盖是否允许循环依赖\">配置是否允许 Bean 覆盖、是否允许循环依赖</h3>\n\n<p>我们说过，默认情况下，allowBeanDefinitionOverriding 属性为 null。如果在同一配置文件中 Bean id 或 name 重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p>\n\n<p>可是有些时候我们希望在系统启动的过程中就严格杜绝发生 Bean 覆盖，因为万一出现这种情况，会增加我们排查问题的成本。</p>\n\n<p>循环依赖说的是 A 依赖 B，而 B 又依赖 A。或者是 A 依赖 B，B 依赖 C，而 C 却依赖 A。默认 allowCircularReferences 也是 null。</p>\n\n<p>它们两个属性是一起出现的，必然可以在同一个地方一起进行配置。</p>\n\n<p>添加这两个属性的作者 Juergen Hoeller 在这个 <a href=\"https://jira.spring.io/browse/SPR-4374\">jira</a> 的讨论中说明了怎么配置这两个属性。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">NoBeanOverridingContextLoader</span> <span class=\"kd\">extends</span> <span class=\"nc\">ContextLoader</span> <span class=\"o\">{</span>\n \n  <span class=\"nd\">@Override</span>\n  <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">customizeContext</span><span class=\"o\">(</span><span class=\"nc\">ServletContext</span> <span class=\"n\">servletContext</span><span class=\"o\">,</span> <span class=\"nc\">ConfigurableWebApplicationContext</span> <span class=\"n\">applicationContext</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">customizeContext</span><span class=\"o\">(</span><span class=\"n\">servletContext</span><span class=\"o\">,</span> <span class=\"n\">applicationContext</span><span class=\"o\">);</span>\n    <span class=\"nc\">AbstractRefreshableApplicationContext</span> <span class=\"n\">arac</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">AbstractRefreshableApplicationContext</span><span class=\"o\">)</span> <span class=\"n\">applicationContext</span><span class=\"o\">;</span>\n    <span class=\"n\">arac</span><span class=\"o\">.</span><span class=\"na\">setAllowBeanDefinitionOverriding</span><span class=\"o\">(</span><span class=\"kc\">false</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyContextLoaderListener</span> <span class=\"kd\">extends</span> <span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">springframework</span><span class=\"o\">.</span><span class=\"na\">web</span><span class=\"o\">.</span><span class=\"na\">context</span><span class=\"o\">.</span><span class=\"na\">ContextLoaderListener</span> <span class=\"o\">{</span>\n \n  <span class=\"nd\">@Override</span>\n  <span class=\"kd\">protected</span> <span class=\"nc\">ContextLoader</span> <span class=\"nf\">createContextLoader</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">NoBeanOverridingContextLoader</span><span class=\"o\">();</span>\n  <span class=\"o\">}</span>\n  \n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;listener&gt;</span>\n    <span class=\"nt\">&lt;listener-class&gt;</span>com.javadoop.MyContextLoaderListener<span class=\"nt\">&lt;/listener-class&gt;</span>  \n<span class=\"nt\">&lt;/listener&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>如果以上方式不能满足你的需求，请参考这个链接：<a href=\"http://blog.csdn.net/zgmzyr/article/details/39380477\">解决spring中不同配置文件中存在name或者id相同的bean可能引起的问题</a></p>\n\n<h3 id=\"profile\">profile</h3>\n\n<p>我们可以把不同环境的配置分别配置到单独的文件中，举个例子：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;beans</span> <span class=\"na\">profile=</span><span class=\"s\">\"development\"</span>\n    <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"na\">xmlns:jdbc=</span><span class=\"s\">\"http://www.springframework.org/schema/jdbc\"</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"...\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;jdbc:embedded-database</span> <span class=\"na\">id=</span><span class=\"s\">\"dataSource\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;jdbc:script</span> <span class=\"na\">location=</span><span class=\"s\">\"classpath:com/bank/config/sql/schema.sql\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;jdbc:script</span> <span class=\"na\">location=</span><span class=\"s\">\"classpath:com/bank/config/sql/test-data.sql\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/jdbc:embedded-database&gt;</span>\n<span class=\"nt\">&lt;/beans&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;beans</span> <span class=\"na\">profile=</span><span class=\"s\">\"production\"</span>\n    <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"na\">xmlns:jee=</span><span class=\"s\">\"http://www.springframework.org/schema/jee\"</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"...\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;jee:jndi-lookup</span> <span class=\"na\">id=</span><span class=\"s\">\"dataSource\"</span> <span class=\"na\">jndi-name=</span><span class=\"s\">\"java:comp/env/jdbc/datasource\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/beans&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>应该不必做过多解释了吧，看每个文件第一行的 profile=”“。</p>\n\n<p>当然，我们也可以在一个配置文件中使用：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;beans</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"na\">xmlns:jdbc=</span><span class=\"s\">\"http://www.springframework.org/schema/jdbc\"</span>\n    <span class=\"na\">xmlns:jee=</span><span class=\"s\">\"http://www.springframework.org/schema/jee\"</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"...\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;beans</span> <span class=\"na\">profile=</span><span class=\"s\">\"development\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;jdbc:embedded-database</span> <span class=\"na\">id=</span><span class=\"s\">\"dataSource\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;jdbc:script</span> <span class=\"na\">location=</span><span class=\"s\">\"classpath:com/bank/config/sql/schema.sql\"</span><span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;jdbc:script</span> <span class=\"na\">location=</span><span class=\"s\">\"classpath:com/bank/config/sql/test-data.sql\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/jdbc:embedded-database&gt;</span>\n    <span class=\"nt\">&lt;/beans&gt;</span>\n\n    <span class=\"nt\">&lt;beans</span> <span class=\"na\">profile=</span><span class=\"s\">\"production\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;jee:jndi-lookup</span> <span class=\"na\">id=</span><span class=\"s\">\"dataSource\"</span> <span class=\"na\">jndi-name=</span><span class=\"s\">\"java:comp/env/jdbc/datasource\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/beans&gt;</span>\n<span class=\"nt\">&lt;/beans&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>理解起来也很简单吧。</p>\n\n<p>接下来的问题是，怎么使用特定的 profile 呢？Spring 在启动的过程中，会去寻找 “spring.profiles.active” 的属性值，根据这个属性值来的。那怎么配置这个值呢？</p>\n\n<p>Spring 会在这几个地方寻找 spring.profiles.active 的属性值：操作系统环境变量、JVM 系统变量、web.xml 中定义的参数、JNDI。</p>\n\n<p>最简单的方式莫过于在程序启动的时候指定：</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">-Dspring</span>.profiles.active<span class=\"o\">=</span><span class=\"s2\">\"profile1,profile2\"</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<blockquote>\n  <p>profile 可以激活多个</p>\n</blockquote>\n\n<p>当然，我们也可以通过代码的形式从 Environment 中设置 profile：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nc\">AnnotationConfigApplicationContext</span> <span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">AnnotationConfigApplicationContext</span><span class=\"o\">();</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"na\">getEnvironment</span><span class=\"o\">().</span><span class=\"na\">setActiveProfiles</span><span class=\"o\">(</span><span class=\"s\">\"development\"</span><span class=\"o\">);</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">SomeConfig</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">StandaloneDataConfig</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">JndiDataConfig</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"na\">refresh</span><span class=\"o\">();</span> <span class=\"c1\">// 重启</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>如果是 Spring Boot 的话更简单，我们一般会创建 application.properties、application-dev.properties、application-prod.properties 等文件，其中 application.properties 配置各个环境通用的配置，application-{profile}.properties 中配置特定环境的配置，然后在启动的时候指定 profile：</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre>java <span class=\"nt\">-Dspring</span>.profiles.active<span class=\"o\">=</span>prod <span class=\"nt\">-jar</span> JavaDoop.jar\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>如果是单元测试中使用的话，在测试类中使用 @ActiveProfiles 指定，这里就不展开了。</p>\n\n<h3 id=\"工厂模式生成-bean\">工厂模式生成 Bean</h3>\n\n<p>请读者注意 factory-bean 和 FactoryBean 的区别。这节说的是前者，是说静态工厂或实例工厂，而后者是 Spring 中的特殊接口，代表一类特殊的 Bean，附录的下面一节会介绍 FactoryBean。</p>\n\n<p>设计模式里，工厂方法模式分静态工厂和实例工厂，我们分别看看 Spring 中怎么配置这两个，来个代码示例就什么都清楚了。</p>\n\n<p>静态工厂：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"clientService\"</span>\n    <span class=\"na\">class=</span><span class=\"s\">\"examples.ClientService\"</span>\n    <span class=\"na\">factory-method=</span><span class=\"s\">\"createInstance\"</span><span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ClientService</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">ClientService</span> <span class=\"n\">clientService</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ClientService</span><span class=\"o\">();</span>\n    <span class=\"kd\">private</span> <span class=\"nf\">ClientService</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n\n    <span class=\"c1\">// 静态方法</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">ClientService</span> <span class=\"nf\">createInstance</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">clientService</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>实例工厂：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"serviceLocator\"</span> <span class=\"na\">class=</span><span class=\"s\">\"examples.DefaultServiceLocator\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"c\">&lt;!-- inject any dependencies required by this locator bean --&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span>\n\n<span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"clientService\"</span>\n    <span class=\"na\">factory-bean=</span><span class=\"s\">\"serviceLocator\"</span>\n    <span class=\"na\">factory-method=</span><span class=\"s\">\"createClientServiceInstance\"</span><span class=\"nt\">/&gt;</span>\n\n<span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"accountService\"</span>\n    <span class=\"na\">factory-bean=</span><span class=\"s\">\"serviceLocator\"</span>\n    <span class=\"na\">factory-method=</span><span class=\"s\">\"createAccountServiceInstance\"</span><span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">DefaultServiceLocator</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">ClientService</span> <span class=\"n\">clientService</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ClientServiceImpl</span><span class=\"o\">();</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">AccountService</span> <span class=\"n\">accountService</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">AccountServiceImpl</span><span class=\"o\">();</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">ClientService</span> <span class=\"nf\">createClientServiceInstance</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">clientService</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">AccountService</span> <span class=\"nf\">createAccountServiceInstance</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">accountService</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h3 id=\"factorybean\">FactoryBean</h3>\n\n<p>FactoryBean 适用于 Bean 的创建过程比较复杂的场景，比如数据库连接池的创建。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">FactoryBean</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"no\">T</span> <span class=\"nf\">getObject</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span><span class=\"o\">;</span>\n    <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">getObjectType</span><span class=\"o\">();</span>\n    <span class=\"kt\">boolean</span> <span class=\"nf\">isSingleton</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span> \n    <span class=\"kd\">private</span> <span class=\"nc\">Car</span> <span class=\"n\">car</span> <span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">setCar</span><span class=\"o\">(</span><span class=\"nc\">Car</span> <span class=\"n\">car</span><span class=\"o\">){</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">car</span> <span class=\"o\">=</span> <span class=\"n\">car</span><span class=\"o\">;</span>  <span class=\"o\">}</span>  \n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>我们假设现在需要创建一个 Person 的 Bean，首先我们需要一个 Car 的实例，我们这里假设 Car 的实例创建很麻烦，那么我们可以把创建 Car 的复杂过程包装起来：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyCarFactoryBean</span> <span class=\"kd\">implements</span> <span class=\"nc\">FactoryBean</span><span class=\"o\">&lt;</span><span class=\"nc\">Car</span><span class=\"o\">&gt;{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">make</span><span class=\"o\">;</span> \n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">year</span> <span class=\"o\">;</span>\n    \n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setMake</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">m</span><span class=\"o\">){</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">make</span> <span class=\"o\">=</span><span class=\"n\">m</span> <span class=\"o\">;</span> <span class=\"o\">}</span>\n    \n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setYear</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"o\">){</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">year</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n    \n    <span class=\"kd\">public</span> <span class=\"nc\">Car</span> <span class=\"nf\">getObject</span><span class=\"o\">(){</span> \n      <span class=\"c1\">// 这里我们假设 Car 的实例化过程非常复杂，反正就不是几行代码可以写完的那种</span>\n      <span class=\"nc\">CarBuilder</span> <span class=\"n\">cb</span> <span class=\"o\">=</span> <span class=\"nc\">CarBuilder</span><span class=\"o\">.</span><span class=\"na\">car</span><span class=\"o\">();</span>\n      \n      <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">year</span><span class=\"o\">!=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">cb</span><span class=\"o\">.</span><span class=\"na\">setYear</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">year</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"nc\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">hasText</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">make</span><span class=\"o\">))</span> <span class=\"n\">cb</span><span class=\"o\">.</span><span class=\"na\">setMake</span><span class=\"o\">(</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">make</span> <span class=\"o\">);</span> \n      <span class=\"k\">return</span> <span class=\"n\">cb</span><span class=\"o\">.</span><span class=\"na\">factory</span><span class=\"o\">();</span> \n    <span class=\"o\">}</span>\n    \n    <span class=\"kd\">public</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"nc\">Car</span><span class=\"o\">&gt;</span> <span class=\"nf\">getObjectType</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"nc\">Car</span><span class=\"o\">.</span><span class=\"na\">class</span> <span class=\"o\">;</span> <span class=\"o\">}</span> \n    \n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSingleton</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>我们看看装配的时候是怎么配置的：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">class =</span> <span class=\"s\">\"com.javadoop.MyCarFactoryBean\"</span> <span class=\"na\">id =</span> <span class=\"s\">\"car\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;property</span> <span class=\"na\">name =</span> <span class=\"s\">\"make\"</span> <span class=\"na\">value =</span><span class=\"s\">\"Honda\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;property</span> <span class=\"na\">name =</span> <span class=\"s\">\"year\"</span> <span class=\"na\">value =</span><span class=\"s\">\"1984\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span>\n<span class=\"nt\">&lt;bean</span> <span class=\"na\">class =</span> <span class=\"s\">\"com.javadoop.Person\"</span> <span class=\"na\">id =</span> <span class=\"s\">\"josh\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;property</span> <span class=\"na\">name =</span> <span class=\"s\">\"car\"</span> <span class=\"na\">ref =</span> <span class=\"s\">\"car\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>看到不一样了吗？id 为 “car” 的 bean 其实指定的是一个 FactoryBean，不过配置的时候，我们直接让配置 Person 的 Bean 直接依赖于这个 FactoryBean 就可以了。中间的过程 Spring 已经封装好了。</p>\n\n<p>说到这里，我们再来点干货。我们知道，现在还用 xml 配置 Bean 依赖的越来越少了，更多时候，我们可能会采用 java  config 的方式来配置，这里有什么不一样呢？</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Configuration</span> \n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CarConfiguration</span> <span class=\"o\">{</span> \n\n    <span class=\"nd\">@Bean</span> \n    <span class=\"kd\">public</span> <span class=\"nc\">MyCarFactoryBean</span> <span class=\"nf\">carFactoryBean</span><span class=\"o\">(){</span> \n      <span class=\"nc\">MyCarFactoryBean</span> <span class=\"n\">cfb</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MyCarFactoryBean</span><span class=\"o\">();</span>\n      <span class=\"n\">cfb</span><span class=\"o\">.</span><span class=\"na\">setMake</span><span class=\"o\">(</span><span class=\"s\">\"Honda\"</span><span class=\"o\">);</span>\n      <span class=\"n\">cfb</span><span class=\"o\">.</span><span class=\"na\">setYear</span><span class=\"o\">(</span><span class=\"mi\">1984</span><span class=\"o\">);</span>\n      <span class=\"k\">return</span> <span class=\"n\">cfb</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Bean</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">Person</span> <span class=\"nf\">aPerson</span><span class=\"o\">(){</span> \n    <span class=\"nc\">Person</span> <span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Person</span><span class=\"o\">();</span>\n      <span class=\"c1\">// 注意这里的不同</span>\n    <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"na\">setCar</span><span class=\"o\">(</span><span class=\"n\">carFactoryBean</span><span class=\"o\">().</span><span class=\"na\">getObject</span><span class=\"o\">());</span>\n    <span class=\"k\">return</span> <span class=\"n\">person</span><span class=\"o\">;</span> \n    <span class=\"o\">}</span> \n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>这个时候，其实我们的思路也很简单，把 MyCarFactoryBean 看成是一个简单的 Bean 就可以了，不必理会什么 FactoryBean，它是不是 FactoryBean 和我们没关系。</p>\n\n<h3 id=\"初始化-bean-的回调\">初始化 Bean 的回调</h3>\n\n<p>有以下四种方案：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"exampleInitBean\"</span> <span class=\"na\">class=</span><span class=\"s\">\"examples.ExampleBean\"</span> <span class=\"na\">init-method=</span><span class=\"s\">\"init\"</span><span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AnotherExampleBean</span> <span class=\"kd\">implements</span> <span class=\"nc\">InitializingBean</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">afterPropertiesSet</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// do some initialization work</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Bean</span><span class=\"o\">(</span><span class=\"n\">initMethod</span> <span class=\"o\">=</span> <span class=\"s\">\"init\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"nc\">Foo</span> <span class=\"nf\">foo</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">Foo</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@PostConstruct</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    \n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"销毁-bean-的回调\">销毁 Bean 的回调</h3>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"exampleInitBean\"</span> <span class=\"na\">class=</span><span class=\"s\">\"examples.ExampleBean\"</span> <span class=\"na\">destroy-method=</span><span class=\"s\">\"cleanup\"</span><span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AnotherExampleBean</span> <span class=\"kd\">implements</span> <span class=\"nc\">DisposableBean</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">destroy</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// do some destruction work (like releasing pooled connections)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@Bean</span><span class=\"o\">(</span><span class=\"n\">destroyMethod</span> <span class=\"o\">=</span> <span class=\"s\">\"cleanup\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"nc\">Bar</span> <span class=\"nf\">bar</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">Bar</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nd\">@PreDestroy</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">cleanup</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    \n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"conversionservice\">ConversionService</h3>\n\n<p>既然文中说到了这个，顺便提一下好了。</p>\n\n<p>最有用的场景就是，它用来将前端传过来的参数和后端的 controller 方法上的参数进行绑定的时候用。</p>\n\n<p>像前端传过来的字符串、整数要转换为后端的 String、Integer 很容易，但是如果 controller 方法需要的是一个枚举值，或者是 Date 这些非基础类型（含基础类型包装类）值的时候，我们就可以考虑采用 ConversionService 来进行转换。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"conversionService\"</span>\n  <span class=\"na\">class=</span><span class=\"s\">\"org.springframework.context.support.ConversionServiceFactoryBean\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">\"converters\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;list&gt;</span>\n      <span class=\"nt\">&lt;bean</span> <span class=\"na\">class=</span><span class=\"s\">\"com.javadoop.learning.utils.StringToEnumConverterFactory\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/list&gt;</span>\n  <span class=\"nt\">&lt;/property&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>ConversionService 接口很简单，所以要自定义一个 convert 的话也很简单。</p>\n\n<p>下面再说一个实现这种转换很简单的方式，那就是实现 Converter 接口。</p>\n\n<p>来看一个很简单的例子，这样比什么都管用。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">StringToDateConverter</span> <span class=\"kd\">implements</span> <span class=\"nc\">Converter</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Date</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">Date</span> <span class=\"nf\">convert</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">source</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nc\">DateUtils</span><span class=\"o\">.</span><span class=\"na\">parseDate</span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"s\">\"yyyy-MM-dd\"</span><span class=\"o\">,</span> <span class=\"s\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"o\">,</span> <span class=\"s\">\"yyyy-MM-dd HH:mm\"</span><span class=\"o\">,</span> <span class=\"s\">\"HH:mm:ss\"</span><span class=\"o\">,</span> <span class=\"s\">\"HH:mm\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">ParseException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>只要注册这个 Bean 就可以了。这样，前端往后端传的时间描述字符串就很容易绑定成 Date 类型了，不需要其他任何操作。</p>\n\n<h3 id=\"bean-继承\">Bean 继承</h3>\n\n<p>在初始化 Bean 的地方，我们说过了这个：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nc\">RootBeanDefinition</span> <span class=\"n\">bd</span> <span class=\"o\">=</span> <span class=\"n\">getMergedLocalBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>这里涉及到的就是 <code class=\"highlighter-rouge\">&lt;bean parent=\"\" /&gt;</code> 中的 parent 属性，我们来看看 Spring 中是用这个来干什么的。</p>\n\n<p>首先，我们要明白，这里的继承和 java 语法中的继承没有任何关系，不过思路是相通的。child bean 会继承 parent bean 的所有配置，也可以覆盖一些配置，当然也可以新增额外的配置。</p>\n\n<p>Spring 中提供了继承自 AbstractBeanDefinition 的 <code class=\"highlighter-rouge\">ChildBeanDefinition</code> 来表示 child bean。</p>\n\n<p>看如下一个例子:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"o\">&lt;</span><span class=\"n\">bean</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">\"inheritedTestBean\"</span> <span class=\"kd\">abstract</span><span class=\"o\">=</span><span class=\"s\">\"true\"</span> <span class=\"kd\">class</span><span class=\"err\">=\"</span><span class=\"nc\">org</span><span class=\"o\">.</span><span class=\"na\">springframework</span><span class=\"o\">.</span><span class=\"na\">beans</span><span class=\"o\">.</span><span class=\"na\">TestBean</span><span class=\"s\">\"&gt;\n    &lt;property name=\"</span><span class=\"n\">name</span><span class=\"s\">\" value=\"</span><span class=\"n\">parent</span><span class=\"s\">\"/&gt;\n    &lt;property name=\"</span><span class=\"n\">age</span><span class=\"s\">\" value=\"</span><span class=\"mi\">1</span><span class=\"s\">\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"</span><span class=\"n\">inheritsWithDifferentClass</span><span class=\"s\">\" class=\"</span><span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">springframework</span><span class=\"o\">.</span><span class=\"na\">beans</span><span class=\"o\">.</span><span class=\"na\">DerivedTestBean</span><span class=\"s\">\"\n        parent=\"</span><span class=\"n\">inheritedTestBean</span><span class=\"s\">\" init-method=\"</span><span class=\"n\">initialize</span><span class=\"s\">\"&gt;\n        \n    &lt;property name=\"</span><span class=\"n\">name</span><span class=\"s\">\" value=\"</span><span class=\"n\">override</span><span class=\"err\">\"</span><span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">bean</span><span class=\"o\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>parent bean 设置了 <code class=\"highlighter-rouge\">abstract=\"true\"</code> 所以它不会被实例化，child bean 继承了 parent bean 的两个属性，但是对 name 属性进行了覆写。</p>\n\n<p>child bean 会继承 scope、构造器参数值、属性值、init-method、destroy-method 等等。</p>\n\n<p>当然，我不是说 parent bean 中的 abstract = true 在这里是必须的，只是说如果加上了以后 Spring 在实例化 singleton beans 的时候会忽略这个 bean。</p>\n\n<p>比如下面这个极端 parent bean，它没有指定 class，所以毫无疑问，这个 bean 的作用就是用来充当模板用的 parent bean，此处就必须加上 abstract = true。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"o\">&lt;</span><span class=\"n\">bean</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">\"inheritedTestBeanWithoutClass\"</span> <span class=\"kd\">abstract</span><span class=\"o\">=</span><span class=\"s\">\"true\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">property</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">\"parent\"</span><span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">property</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">\"age\"</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">\"1\"</span><span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">bean</span><span class=\"o\">&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h3 id=\"方法注入\">方法注入</h3>\n\n<p>一般来说，我们的应用中大多数的 Bean 都是 singleton 的。singleton 依赖 singleton，或者 prototype 依赖 prototype 都很好解决，直接设置属性依赖就可以了。</p>\n\n<p>但是，如果是 singleton 依赖 prototype 呢？这个时候不能用属性依赖，因为如果用属性依赖的话，我们每次其实拿到的还是第一次初始化时候的 bean。</p>\n\n<p>一种解决方案就是不要用属性依赖，每次获取依赖的 bean 的时候从 BeanFactory 中取。这个也是大家最常用的方式了吧。怎么取，我就不介绍了，大部分 Spring 项目大家都会定义那么个工具类的。</p>\n\n<p>另一种解决方案就是这里要介绍的通过使用 Lookup method。</p>\n\n<h4 id=\"lookup-method\">lookup-method</h4>\n\n<p>我们来看一下 Spring Reference 中提供的一个例子：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kn\">package</span> <span class=\"n\">fiona</span><span class=\"o\">.</span><span class=\"na\">apple</span><span class=\"o\">;</span>\n\n<span class=\"c1\">// no more Spring imports!</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">CommandManager</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">process</span><span class=\"o\">(</span><span class=\"nc\">Object</span> <span class=\"n\">commandState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// grab a new instance of the appropriate Command interface</span>\n        <span class=\"nc\">Command</span> <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">createCommand</span><span class=\"o\">();</span>\n        <span class=\"c1\">// set the state on the (hopefully brand new) Command instance</span>\n        <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"na\">setState</span><span class=\"o\">(</span><span class=\"n\">commandState</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"na\">execute</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// okay... but where is the implementation of this method?</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">abstract</span> <span class=\"nc\">Command</span> <span class=\"nf\">createCommand</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>xml 配置 <code class=\"highlighter-rouge\">&lt;lookup-method /&gt;</code>：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c\">&lt;!-- a stateful bean deployed as a prototype (non-singleton) --&gt;</span>\n<span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"myCommand\"</span> <span class=\"na\">class=</span><span class=\"s\">\"fiona.apple.AsyncCommand\"</span> <span class=\"na\">scope=</span><span class=\"s\">\"prototype\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"c\">&lt;!-- inject dependencies here as required --&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span>\n\n<span class=\"c\">&lt;!-- commandProcessor uses statefulCommandHelper --&gt;</span>\n<span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"commandManager\"</span> <span class=\"na\">class=</span><span class=\"s\">\"fiona.apple.CommandManager\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;lookup-method</span> <span class=\"na\">name=</span><span class=\"s\">\"createCommand\"</span> <span class=\"na\">bean=</span><span class=\"s\">\"myCommand\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>Spring 采用 <strong>CGLIB 生成字节码</strong>的方式来生成一个子类。我们定义的类不能定义为 final class，抽象方法上也不能加 final。</p>\n\n<p>lookup-method 上的配置也可以采用注解来完成，这样就可以不用配置 <code class=\"highlighter-rouge\">&lt;lookup-method /&gt;</code> 了，其他不变：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">CommandManager</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">process</span><span class=\"o\">(</span><span class=\"nc\">Object</span> <span class=\"n\">commandState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">MyCommand</span> <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">createCommand</span><span class=\"o\">();</span>\n        <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"na\">setState</span><span class=\"o\">(</span><span class=\"n\">commandState</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"na\">execute</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Lookup</span><span class=\"o\">(</span><span class=\"s\">\"myCommand\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">abstract</span> <span class=\"nc\">Command</span> <span class=\"nf\">createCommand</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<blockquote>\n  <p>注意，既然用了注解，要配置注解扫描：<code class=\"highlighter-rouge\">&lt;context:component-scan base-package=\"com.javadoop\" /&gt;</code></p>\n</blockquote>\n\n<p>甚至，我们可以像下面这样：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">CommandManager</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">process</span><span class=\"o\">(</span><span class=\"nc\">Object</span> <span class=\"n\">commandState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">MyCommand</span> <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">createCommand</span><span class=\"o\">();</span>\n        <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"na\">setState</span><span class=\"o\">(</span><span class=\"n\">commandState</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"na\">execute</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Lookup</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">abstract</span> <span class=\"nc\">MyCommand</span> <span class=\"nf\">createCommand</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<blockquote>\n  <p>上面的返回值用了 MyCommand，当然，如果 Command 只有一个实现类，那返回值也可以写 Command。</p>\n</blockquote>\n\n<h4 id=\"replaced-method\">replaced-method</h4>\n\n<p>记住它的功能，就是替换掉 bean 中的一些方法。</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyValueCalculator</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">computeValue</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// some real code...</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// some other methods...</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>方法覆写，注意要实现 MethodReplacer 接口：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ReplacementComputeValue</span> <span class=\"kd\">implements</span> <span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">springframework</span><span class=\"o\">.</span><span class=\"na\">beans</span><span class=\"o\">.</span><span class=\"na\">factory</span><span class=\"o\">.</span><span class=\"na\">support</span><span class=\"o\">.</span><span class=\"na\">MethodReplacer</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">Object</span> <span class=\"nf\">reimplement</span><span class=\"o\">(</span><span class=\"nc\">Object</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"nc\">Method</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Throwable</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// get the input value, work with it, and return a computed result</span>\n        <span class=\"nc\">String</span> <span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">)</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"o\">...;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>配置也很简单：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"myValueCalculator\"</span> <span class=\"na\">class=</span><span class=\"s\">\"x.y.z.MyValueCalculator\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"c\">&lt;!-- 定义 computeValue 这个方法要被替换掉 --&gt;</span>\n    <span class=\"nt\">&lt;replaced-method</span> <span class=\"na\">name=</span><span class=\"s\">\"computeValue\"</span> <span class=\"na\">replacer=</span><span class=\"s\">\"replacementComputeValue\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;arg-type&gt;</span>String<span class=\"nt\">&lt;/arg-type&gt;</span>\n    <span class=\"nt\">&lt;/replaced-method&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span>\n\n<span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"replacementComputeValue\"</span> <span class=\"na\">class=</span><span class=\"s\">\"a.b.c.ReplacementComputeValue\"</span><span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<blockquote>\n  <p>arg-type 明显不是必须的，除非存在方法重载，这样必须通过参数类型列表来判断这里要覆盖哪个方法。</p>\n</blockquote>\n\n<h3 id=\"beanpostprocessor\">BeanPostProcessor</h3>\n\n<p>应该说 BeanPostProcessor 概念在 Spring 中也是比较重要的。我们看下接口定义：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">BeanPostProcessor</span> <span class=\"o\">{</span>\n\n   <span class=\"nc\">Object</span> <span class=\"nf\">postProcessBeforeInitialization</span><span class=\"o\">(</span><span class=\"nc\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span><span class=\"o\">;</span>\n\n   <span class=\"nc\">Object</span> <span class=\"nf\">postProcessAfterInitialization</span><span class=\"o\">(</span><span class=\"nc\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">BeansException</span><span class=\"o\">;</span>\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>看这个接口中的两个方法名字我们大体上可以猜测 bean 在初始化之前会执行 postProcessBeforeInitialization 这个方法，初始化完成之后会执行 postProcessAfterInitialization 这个方法。但是，这么理解是非常片面的。</p>\n\n<p>首先，我们要明白，除了我们自己定义的 BeanPostProcessor 实现外，Spring 容器在启动时自动给我们也加了几个。如在获取 BeanFactory 的 obtainFactory() 方法结束后的 prepareBeanFactory(factory)，大家仔细看会发现，Spring 往容器中添加了这两个 BeanPostProcessor：ApplicationContextAwareProcessor、ApplicationListenerDetector。</p>\n\n<p>我们回到这个接口本身，读者请看第一个方法，这个方法接受的第一个参数是 bean 实例，第二个参数是 bean 的名字，重点在返回值将会作为新的 bean 实例，所以，没事的话这里不能随便返回个 null。</p>\n\n<p>那意味着什么呢？我们很容易想到的就是，我们这里可以对一些我们想要修饰的 bean 实例做一些事情。但是对于 Spring 框架来说，它会决定是不是要在这个方法中返回 bean 实例的代理，这样就有更大的想象空间了。</p>\n\n<p>最后，我们说说如果我们自己定义一个 bean 实现 BeanPostProcessor 的话，它的执行时机是什么时候？</p>\n\n<p>如果仔细看了代码分析的话，其实很容易知道了，在 bean 实例化完成、属性注入完成之后，会执行回调方法，具体请参见类 AbstractAutowireCapableBeanFactory#initBean 方法。</p>\n\n<p>首先会回调几个实现了 Aware 接口的 bean，然后就开始回调 BeanPostProcessor 的 postProcessBeforeInitialization 方法，之后是回调 init-method，然后再回调 BeanPostProcessor 的 postProcessAfterInitialization 方法。</p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>按理说，总结应该写在附录前面，我就不讲究了。</p>\n\n<p>在花了那么多时间后，这篇文章终于算是基本写完了，大家在惊叹 Spring 给我们做了那么多的事的时候，应该透过现象看本质，去理解 Spring 写得好的地方，去理解它的设计思想。</p>\n\n<p>本文的缺陷在于对 Spring 预初始化 singleton beans 的过程分析不够，主要是代码量真的比较大，分支旁路众多。同时，虽然附录条目不少，但是庞大的 Spring 真的引出了很多的概念，希望日后有精力可以慢慢补充一些。</p>\n",
      "desc"     : "Spring 最重要的概念是 IOC 和 AOP，本篇文章其实就是要带领大家来分析下 Spring 的 IOC 容器。既然大家平时都要用到 Spring，怎么可以不好好了解 Spring 呢？阅读本文并不能让你成为 Spring 专家，不过一定有助于大家理解 Spring 的很多概念，帮助大家排查应用中和 Spring 相关的一些问题。本文采用的源码版本是 4.3.11.RELEASE，算是..."
} ,
  
  
  
    {
      "title"    : "Dubbo2.7 三大新特性详解",
      "title-lower"    : "dubbo2.7 三大新特性详解",
      "sub-titile" : "异步化改造,三大中心改造,服务治理增强",
      "sub-titile-lower" : "异步化改造,三大中心改造,服务治理增强",
      "categories" : "",
      "tags"     : "Dubbo, RPC, 微服务",
      "url"      : "/zcblog/2019/03/22/dubbo-27-features/",
      "date"     : "2019-03-22 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于Dubbo官网，作者为@lexburner：<a href=\"http://dubbo.apache.org/zh-cn/blog/dubbo-27-features.html\">Dubbo2.7 三大新特性详解</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<!-- MarkdownTOC -->\n\n<ul>\n  <li><a href=\"#1-背景介绍\">1. 背景介绍</a></li>\n  <li><a href=\"#2-分支介绍\">2. 分支介绍</a></li>\n  <li><a href=\"#3-Dubbo-27-新特性\">3. Dubbo 2.7 新特性</a></li>\n  <li><a href=\"#4-异步化改造\">4. 异步化改造</a>\n    <ul>\n      <li><a href=\"#41-几种调用方式\">4.1 几种调用方式</a></li>\n      <li><a href=\"#42-Dubbo-26-异步化\">4.2 Dubbo 2.6 异步化</a></li>\n      <li><a href=\"#43-Dubbo-27-异步化\">4.3 Dubbo 2.7 异步化</a></li>\n      <li><a href=\"#44-异步化设计-FAQ\">4.4 异步化设计 FAQ</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#5-三大中心改造\">5. 三大中心改造</a>\n    <ul>\n      <li><a href=\"#51-元数据改造\">5.1 元数据改造</a></li>\n      <li><a href=\"#52-Dubbo-26-元数据\">5.2 Dubbo 2.6 元数据</a></li>\n      <li><a href=\"#53-Dubbo-27-元数据\">5.3 Dubbo 2.7 元数据</a></li>\n      <li><a href=\"#54-配置中心支持\">5.4 配置中心支持</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#6-服务治理增强\">6. 服务治理增强</a></li>\n  <li><a href=\"#7-总结\">7. 总结</a></li>\n</ul>\n\n<h2 id=\"1-背景介绍\">1 背景介绍</h2>\n\n<p>自 2017 年 7 月阿里重启 Dubbo 开源，到目前为止 github star 数，contributor 数都有了非常大的提升。2018 年 2 月 9 日阿里决定将 Dubbo 项目贡献给 Apache，经过一周的投票，顺利成为了 Apache 的孵化项目，也就是大家现在看到的 <strong>Incubator Dubbo</strong>。预计在 2019 年 4 月，Dubbo 可以达成毕业，成为 Apache 的顶级项目。</p>\n\n<h2 id=\"2-分支介绍\">2 分支介绍</h2>\n\n<p><img src=\"http://kirito.iocoder.cn/image-20190321153455566.png\" alt=\"分支\" /></p>\n\n<p>Dubbo 目前有如图所示的 5 个分支，其中 2.7.1-release 只是一个临时分支，忽略不计，对其他 4 个分支进行介绍。</p>\n\n<ul>\n  <li>2.5.x 近期已经通过投票，Dubbo 社区即将停止对其的维护。</li>\n  <li>2.6.x 为长期支持的版本，也是 Dubbo 贡献给 Apache 之前的版本，其包名前缀为：com.alibaba，JDK 版本对应 1.6。</li>\n  <li>3.x-dev 是前瞻性的版本，对 Dubbo 进行一些高级特性的补充，如支持 rx 特性。</li>\n  <li>master 为长期支持的版本，版本号为 2.7.x，也是 Dubbo 贡献给 Apache 的开发版本，其包名前缀为：org.apache，JDK 版本对应 1.8。</li>\n</ul>\n\n<blockquote>\n  <p>如果想要研究 Dubbo 的源码，建议直接浏览 master 分支。</p>\n</blockquote>\n\n<h2 id=\"3-dubbo-27-新特性\">3 Dubbo 2.7 新特性</h2>\n\n<p>Dubbo 2.7.x 作为 Apache 的孵化版本，除了代码优化之外，还新增了许多重磅的新特性，本文将会介绍其中最典型的三个新特性：</p>\n\n<ul>\n  <li>异步化改造</li>\n  <li>三大中心改造</li>\n  <li>服务治理增强</li>\n</ul>\n\n<h2 id=\"4-异步化改造\">4 异步化改造</h2>\n\n<h3 id=\"41-几种调用方式\">4.1 几种调用方式</h3>\n\n<p><img src=\"http://kirito.iocoder.cn/image-20190321160844133.png\" alt=\"调用方式\" /></p>\n\n<p>在远程方法调用中，大致可以分为这 4 种调用方式。oneway 指的是客户端发送消息后，不需要接受响应。对于那些不关心服务端响应的请求，比较适合使用 oneway 通信。</p>\n\n<blockquote>\n  <p>注意，void hello() 方法在远程方法调用中，不属于 oneway 调用，虽然 void 方法表达了不关心返回值的语义，但在 RPC 层面，仍然需要做通信层的响应。</p>\n</blockquote>\n\n<p>sync 是最常用的通信方式，也是默认的通信方法。</p>\n\n<p>future 和 callback 都属于异步调用的范畴，他们的区别是：在接收响应时，future.get() 会导致线程的阻塞;callback 通常会设置一个回调线程，当接收到响应时，自动执行，不会对当前线程造成阻塞。</p>\n\n<h3 id=\"42-dubbo-26-异步化\">4.2 Dubbo 2.6 异步化</h3>\n\n<p>异步化的优势在于客户端不需要启动多线程即可完成并行调用多个远程服务，相对多线程开销较小。介绍 2.7 中的异步化改造之前，先回顾一下如何在 2.6 中使用 Dubbo 异步化的能力。</p>\n\n<ol>\n  <li>将同步接口声明成 <code class=\"highlighter-rouge\">async=true</code>\n    <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"nt\">&lt;dubbo:reference</span> <span class=\"na\">id=</span><span class=\"s\">\"asyncService\"</span> <span class=\"na\">interface=</span><span class=\"s\">\"org.apache.dubbo.demo.api.AsyncService\"</span> <span class=\"na\">async=</span><span class=\"s\">\"true\"</span><span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div>    </div>\n    <div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">AsyncService</span> <span class=\"o\">{</span>\n     <span class=\"nc\">String</span> <span class=\"nf\">sayHello</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">);</span>\n <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div>    </div>\n  </li>\n  <li>通过上下文类获取 future\n    <div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"nc\">AsyncService</span><span class=\"o\">.</span><span class=\"na\">sayHello</span><span class=\"o\">(</span><span class=\"s\">\"Han Meimei\"</span><span class=\"o\">);</span>\n <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">fooFuture</span> <span class=\"o\">=</span> <span class=\"nc\">RpcContext</span><span class=\"o\">.</span><span class=\"na\">getContext</span><span class=\"o\">().</span><span class=\"na\">getFuture</span><span class=\"o\">();</span>\n <span class=\"n\">fooFuture</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n</pre></td></tr></tbody></table></code></pre></div>    </div>\n  </li>\n</ol>\n\n<p>可以看出，这样的使用方式，不太符合异步编程的习惯，竟然需要从一个上下文类中获取到 Future。如果同时进行多个异步调用，使用不当很容易造成上下文污染。而且，Future 并不支持 callback 的调用方式。这些弊端在 Dubbo 2.7 中得到了改进。</p>\n\n<h3 id=\"43-dubbo-27-异步化\">4.3 Dubbo 2.7 异步化</h3>\n\n<ol>\n  <li>无需配置中特殊声明，显式声明异步接口即可\n    <div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">AsyncService</span> <span class=\"o\">{</span>\n     <span class=\"nc\">String</span> <span class=\"nf\">sayHello</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">);</span>\n     <span class=\"k\">default</span> <span class=\"nc\">CompletableFuture</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">sayHiAsync</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">return</span> <span class=\"nc\">CompletableFuture</span><span class=\"o\">.</span><span class=\"na\">completedFuture</span><span class=\"o\">(</span><span class=\"n\">sayHello</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">));</span>\n     <span class=\"o\">}</span>\n <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div>    </div>\n  </li>\n  <li>使用 callback 方式处理返回值\n    <div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"nc\">CompletableFuture</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">asyncService</span><span class=\"o\">.</span><span class=\"na\">sayHiAsync</span><span class=\"o\">(</span><span class=\"s\">\"Han MeiMei\"</span><span class=\"o\">);</span>\n <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"na\">whenComplete</span><span class=\"o\">((</span><span class=\"n\">retValue</span><span class=\"o\">,</span> <span class=\"n\">exception</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n     <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">retValue</span><span class=\"o\">);</span>\n     <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n         <span class=\"n\">exception</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n     <span class=\"o\">}</span>\n <span class=\"o\">});</span>\n</pre></td></tr></tbody></table></code></pre></div>    </div>\n  </li>\n</ol>\n\n<p>Dubbo 2.7 中使用了 JDK1.8 提供的 <code class=\"highlighter-rouge\">CompletableFuture</code> 原生接口对自身的异步化做了改进。<code class=\"highlighter-rouge\">CompletableFuture</code> 可以支持 future 和 callback 两种调用方式，用户可以根据自己的喜好和场景选择使用，非常灵活。</p>\n\n<h3 id=\"44-异步化设计-faq\">4.4 异步化设计 FAQ</h3>\n\n<p>Q：如果 RPC 接口只定义了同步接口，有办法使用异步调用吗？</p>\n\n<p>A：2.6 中的异步调用唯一的优势在于，不需要在接口层面做改造，又可以进行异步调用，这种方式仍然在 2.7 中保留；使用 Dubbo 官方提供的 compiler hacker，编译期自动重写同步方法，请<a href=\"https://github.com/dubbo/dubbo-async-processor#compiler-hacker-processer\">在此</a>讨论和跟进具体进展。</p>\n\n<hr />\n\n<p>Q：关于异步接口的设计问题，为何不提供编译插件，根据原接口，自动编译出一个 XxxAsync 接口？</p>\n\n<p>A：Dubbo 2.7 采用过这种设计，但接口的膨胀会导致服务类的增量发布，而且接口名的变化会影响服务治理的一些相关逻辑，改为方法添加 Async 后缀相对影响范围较小。</p>\n\n<hr />\n\n<p>Q：Dubbo 分为了客户端异步和服务端异步，刚刚你介绍的是客户端异步，为什么不提服务端异步呢？</p>\n\n<p>A：Dubbo 2.7 新增了服务端异步的支持，但实际上，Dubbo 的业务线程池模型，本身就可以理解为异步调用，个人认为服务端异步的特性较为鸡肋。</p>\n\n<h2 id=\"5-三大中心改造\">5 三大中心改造</h2>\n\n<p>三大中心指的：注册中心，元数据中心，配置中心。</p>\n\n<p>在 2.7 之前的版本，Dubbo 只配备了注册中心，主流使用的注册中心为 zookeeper。新增加了元数据中心和配置中心，自然是为了解决对应的痛点，下面我们来详细阐释三大中心改造的原因。</p>\n\n<h3 id=\"51-元数据改造\">5.1 元数据改造</h3>\n\n<p>元数据是什么？元数据定义为描述数据的数据，在服务治理中，例如服务接口名，重试次数，版本号等等都可以理解为元数据。在 2.7 之前，元数据一股脑丢在了注册中心之中，这造成了一系列的问题：</p>\n\n<p><strong>推送量大 -&gt; 存储数据量大 -&gt; 网络传输量大 -&gt; 延迟严重</strong></p>\n\n<p>生产者端注册 30+ 参数，有接近一半是不需要作为注册中心进行传递；消费者端注册 25+ 参数，只有个别需要传递给注册中心。有了以上的理论分析，Dubbo 2.7 进行了大刀阔斧的改动，只将真正属于服务治理的数据发布到注册中心之中，大大降低了注册中心的负荷。</p>\n\n<p>同时，将全量的元数据发布到另外的组件中：元数据中心。元数据中心目前支持 redis（推荐），zookeeper。这也为 Dubbo 2.7 全新的 Dubbo Admin 做了准备，关于新版的 Dubbo Admin，我将会后续准备一篇独立的文章进行介绍。</p>\n\n<p>示例：使用 zookeeper 作为元数据中心</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;dubbo:metadata-report</span> <span class=\"na\">address=</span><span class=\"s\">\"zookeeper://127.0.0.1:2181\"</span><span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h3 id=\"52-dubbo-26-元数据\">5.2 Dubbo 2.6 元数据</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre>dubbo://30.5.120.185:20880/com.alibaba.dubbo.demo.DemoService?\n<span class=\"nv\">anyhost</span><span class=\"o\">=</span><span class=\"nb\">true</span>&amp;\n<span class=\"nv\">application</span><span class=\"o\">=</span>demo-provider&amp;\n<span class=\"nv\">interface</span><span class=\"o\">=</span>com.alibaba.dubbo.demo.DemoService&amp;\n<span class=\"nv\">methods</span><span class=\"o\">=</span>sayHello&amp;\nbean.name<span class=\"o\">=</span>com.alibaba.dubbo.demo.DemoService&amp;\n<span class=\"nv\">dubbo</span><span class=\"o\">=</span>2.0.2&amp;\n<span class=\"nv\">executes</span><span class=\"o\">=</span>4500&amp;\n<span class=\"nv\">generic</span><span class=\"o\">=</span><span class=\"nb\">false</span>&amp;\n<span class=\"nv\">owner</span><span class=\"o\">=</span>kirito&amp;\n<span class=\"nv\">pid</span><span class=\"o\">=</span>84228&amp;\n<span class=\"nv\">retries</span><span class=\"o\">=</span>7&amp;\n<span class=\"nv\">side</span><span class=\"o\">=</span>provider&amp;\n<span class=\"nv\">timestamp</span><span class=\"o\">=</span>1552965771067\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>从本地的 zookeeper 中取出一条服务数据，通过解码之后，可以看出，的确有很多参数是不必要。</p>\n\n<h3 id=\"53-dubbo-27-元数据\">5.3 Dubbo 2.7 元数据</h3>\n\n<p>在 2.7 中，如果不进行额外的配置，zookeeper 中的数据格式仍然会和 Dubbo 2.6 保持一致，这主要是为了保证兼容性，让 Dubbo 2.6 的客户端可以调用 Dubbo 2.7 的服务端。如果整体迁移到 2.7，则可以为注册中心开启简化配置的参数：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;dubbo:registry</span> <span class=\"na\">address=</span><span class=\"s\">“zookeeper://127.0.0.1:2181”</span> <span class=\"na\">simplified=</span><span class=\"s\">\"true\"</span><span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>Dubbo 将会只上传那些必要的服务治理数据，一个简化过后的数据如下所示：</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre>dubbo://30.5.120.185:20880/org.apache.dubbo.demo.api.DemoService?\n<span class=\"nv\">application</span><span class=\"o\">=</span>demo-provider&amp;\n<span class=\"nv\">dubbo</span><span class=\"o\">=</span>2.0.2&amp;\n<span class=\"nv\">release</span><span class=\"o\">=</span>2.7.0&amp;\n<span class=\"nv\">timestamp</span><span class=\"o\">=</span>1552975501873\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>对于那些非必要的服务信息，仍然全量存储在元数据中心之中：</p>\n\n<p><img src=\"http://kirito.iocoder.cn/image-20190321175852034.png\" alt=\"元数据\" /></p>\n\n<blockquote>\n  <p>元数据中心的数据可以被用于服务测试，服务 MOCK 等功能。目前注册中心配置中 simplified 的默认值为 false，因为考虑到了迁移的兼容问题，在后续迭代中，默认值将会改为 true。</p>\n</blockquote>\n\n<h3 id=\"54-配置中心支持\">5.4 配置中心支持</h3>\n\n<p>衡量配置中心的必要性往往从三个角度出发：</p>\n\n<ul>\n  <li>\n    <p>分布式配置统一管理</p>\n  </li>\n  <li>\n    <p>动态变更推送</p>\n  </li>\n  <li>\n    <p>安全性</p>\n  </li>\n</ul>\n\n<p>Spring Cloud Config, Apollo, Nacos 等分布式配置中心组件都对上述功能有不同程度的支持。在 2.7 之前的版本中，在 zookeeper 中设置了部分节点：configurators，routers，用于管理部分配置和路由信息，它们可以理解为 Dubbo 配置中心的雏形。在 2.7 中，Dubbo 正式支持了配置中心，目前支持的几种注册中心 Zookeeper，Apollo，Nacos（2.7.1-release 支持）。</p>\n\n<p>在 Dubbo 中，配置中心主要承担了两个作用</p>\n\n<ul>\n  <li>\n    <p>外部化配置。启动配置的集中式存储</p>\n  </li>\n  <li>\n    <p>服务治理。服务治理规则的存储与通知</p>\n  </li>\n</ul>\n\n<p>示例：使用 Zookeeper 作为配置中心</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;dubbo:config-center</span> <span class=\"na\">address=</span><span class=\"s\">\"zookeeper://127.0.0.1:2181\"</span><span class=\"nt\">/&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>引入配置中心后，需要注意配置项的覆盖问题，优先级如图所示</p>\n\n<p><img src=\"http://kirito.iocoder.cn/configuration.jpg\" alt=\"配置覆盖优先级\" /></p>\n\n<h2 id=\"6-服务治理增强\">6 服务治理增强</h2>\n\n<p>我更倾向于将 Dubbo 当做一个服务治理框架，而不仅仅是一个 RPC 框架。在 2.7 中，Dubbo 对其服务治理能力进行了增强，增加了标签路由的能力，并抽象出了应用路由和服务路由的概念。在最后一个特性介绍中，着重对标签路由 TagRouter 进行探讨。</p>\n\n<blockquote>\n  <p>在服务治理中，路由层和负载均衡层的对比。区别 1，Router：m 选 n，LoadBalance：n 选 1；区别 2，路由往往是叠加使用的，负载均衡只能配置一种。</p>\n</blockquote>\n\n<p>在很长的一段时间内，Dubbo 社区经常有人提的一个问题是：Dubbo 如何实现流量隔离和灰度发布，直到 2.7 提供了标签路由，用户可以使用这个功能，来实现上述的需求。</p>\n\n<p><img src=\"http://kirito.iocoder.cn/image-20190321191620078.png\" alt=\"标签路由\" /></p>\n\n<p>标签路由提供了这样一个能力，当调用链路为 A -&gt; B -&gt; C -&gt; D 时，用户给请求打标，最典型的打标方式可以借助 attachment（他可以在分布式调用中传递下去），调用会优先请求那些匹配的服务端，如 A -&gt; B，C -&gt; D，由于集群中未部署 C 节点，则会降级到普通节点。</p>\n\n<p>打标方式会收到集成系统差异的影响，从而导致很大的差异，所以 Dubbo 只提供了 <code class=\"highlighter-rouge\">RpcContext.getContext().setAttachment()</code> 这样的基础接口，用户可以使用 SPI 扩展，或者 server filter 的扩展，对测试流量进行打标，引导进入隔离环境/灰度环境。</p>\n\n<p>新版的 Dubbo Admin 提供了标签路由的配置项：</p>\n\n<p><img src=\"http://kirito.iocoder.cn/image-20190321192540774.png\" alt=\"标签路由配置\" /></p>\n\n<p>Dubbo 用户可以在自己系统的基础上对标签路由进行二次扩展，或者借鉴标签路由的设计，实现自己系统的流量隔离，灰度发布。</p>\n\n<h2 id=\"7-总结\">7 总结</h2>\n\n<p>本文介绍了 Dubbo 2.7 比较重要的三大新特性：异步化改造，三大中心改造，服务治理增强。Dubbo 2.7 还包含了很多功能优化、特性升级，可以在项目源码的 <a href=\"https://github.com/apache/incubator-dubbo/blob/master/CHANGES.md\">CHANGES.md</a> 中浏览全部的改动点。最后提供一份 Dubbo 2.7 的升级文档：<a href=\"http://dubbo.incubator.apache.org/zh-cn/docs/user/versions/version-270.html\">2.7迁移文档</a>，欢迎体验。</p>\n",
      "desc"     : "  本文来自于Dubbo官网，作者为@lexburner：Dubbo2.7 三大新特性详解，转载请保留链接 ;)  1. 背景介绍  2. 分支介绍  3. Dubbo 2.7 新特性  4. 异步化改造          4.1 几种调用方式      4.2 Dubbo 2.6 异步化      4.3 Dubbo 2.7 异步化      4.4 异步化设计 FAQ        5...."
} ,
  
  
  
    {
      "title"    : "Nacos 1.0.0 功能预览",
      "title-lower"    : "nacos 1.0.0 功能预览",
      "sub-titile" : "Version 1.0.0 marks Nacos architecture has been stable",
      "sub-titile-lower" : "version 1.0.0 marks nacos architecture has been stable",
      "categories" : "",
      "tags"     : "Nacos, 微服务, Java",
      "url"      : "/zcblog/2019/03/18/nacos-1.0.0-preview-function/",
      "date"     : "2019-03-18 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的简书：<a href=\"https://www.jianshu.com/p/7342f3a63094\">Nacos 1.0.0 功能预览</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p>Nacos 1.0.0 是正式 GA 的版本，在架构、功能和API设计上进行了全方位的重构和升级，1.0.0版本标志着Nacos的架构已经稳定，API列表最终确定。升级到1.0.0相比升级到其他版本，需要额外的一些工作，本文专门介绍如何从Nacos 0.8.0以上版本升级到1.0.0 版本的所有步骤和细节。</p>\n\n<h2 id=\"重要提示\">重要提示</h2>\n<p>Nacos 1.0.0 服务端不兼容 0.8.0 以前的版本，如果您想升级到1.0.0，请先升级服务端到0.8.0版本。同样的，Nacos 1.0.0 不兼容 0.8.0 以下版本的客户端访问。</p>\n\n<h2 id=\"变更列表\">变更列表</h2>\n<h3 id=\"naming-模块\">naming 模块</h3>\n<ul>\n  <li><a href=\"#注册实例支持ephemeral字段\">注册实例支持 <code class=\"highlighter-rouge\">ephemeral</code>字段</a> <a href=\"https://github.com/alibaba/nacos/issues/502\">#502</a>,<a href=\"https://github.com/alibaba/nacos/issues/677\">#677</a>;</li>\n  <li><a href=\"#去除了服务的健康检查模式\">去除了服务的健康检查模式</a>；</li>\n  <li><a href=\"#注册实例支持groupName字段\">注册实例支持 <code class=\"highlighter-rouge\">groupName</code>字段</a> <a href=\"https://github.com/alibaba/nacos/issues/269\">#269</a>;</li>\n  <li><a href=\"#去掉了/nacos/v1/ns/api/下的所有接口，转移到其他URL\">去掉了/nacos/v1/ns/api/下的所有接口，转移到其他URL</a> <a href=\"https://github.com/alibaba/nacos/issues/651\">#651</a>;</li>\n  <li><a href=\"#增加了Server状态的设置\">增加了<code class=\"highlighter-rouge\">Server</code>状态的设置</a> <a href=\"https://github.com/alibaba/nacos/issues/744\">#744</a>;</li>\n  <li><a href=\"#增加Server运行模式的设置\">增加<code class=\"highlighter-rouge\">Server</code>运行模式的设置</a> <a href=\"https://github.com/alibaba/nacos/issues/745\">#745</a>;</li>\n  <li><a href=\"#增加全局推送开关\">增加全局推送开关</a> <a href=\"https://github.com/alibaba/nacos/issues/634\">#634</a>;</li>\n  <li><a href=\"#支持启动时数据预热\">支持启动时数据预热</a> <a href=\"https://github.com/alibaba/nacos/issues/629\">#629</a>;</li>\n  <li><a href=\"#元数据编辑框优化\">元数据编辑框优化</a> <a href=\"https://github.com/alibaba/nacos/issues/479\">#479</a>;</li>\n</ul>\n\n<h3 id=\"config-模块\">config 模块</h3>\n<ul>\n  <li><a href=\"#支持MySQL-80\">支持MySQL 8.0</a> <a href=\"https://github.com/alibaba/nacos/issues/613\">#613</a>;</li>\n</ul>\n\n<h3 id=\"其他\">其他</h3>\n<ul>\n  <li><a href=\"#API完整列表开放，模型设计和架构设计文档发布\">API完整列表开放，模型设计和架构设计文档发布</a>；</li>\n</ul>\n\n<h2 id=\"变更详情\">变更详情</h2>\n<h3 id=\"注册实例支持ephemeral字段\">注册实例支持ephemeral字段</h3>\n\n<p>Nacos 在 1.0.0版本 <code class=\"highlighter-rouge\">instance</code>级别增加了一个<code class=\"highlighter-rouge\">ephemeral</code>字段，该字段表示注册的实例是否是临时实例还是持久化实例。如果是临时实例，则不会在 Nacos 服务端持久化存储，需要通过上报心跳的方式进行包活，如果一段时间内没有上报心跳，则会被 Nacos 服务端摘除。在被摘除后如果又开始上报心跳，则会重新将这个实例注册。持久化实例则会持久化被 Nacos 服务端，此时即使注册实例的客户端进程不在，这个实例也不会从服务端删除，只会将健康状态设为不健康。</p>\n\n<p><img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2019.03/18/post-ephemeral.png\" alt=\"ephemeral字段\" /></p>\n\n<p>同一个服务下可以同时有临时实例和持久化实例，这意味着当这服务的所有实例进程不在时，会有部分实例从服务上摘除，剩下的实例则会保留在服务下。</p>\n\n<p>另一个需要注意的是，临时实例和持久化实例，在特定的服务端进行模式下可能不允许进行注册，这和下面要讲的第5个变更有关。</p>\n\n<h4 id=\"注意事项\">注意事项</h4>\n<ul>\n  <li>当从老版本的 Nacos 升级到 Nacos 1.0.0 时，从磁盘加载的实例数据会被置为持久化实例，而只存在于内存里的实例数据将会丢失。</li>\n  <li>此时若老客户端再连上 Nacos Server 进行实例注册，会以当前 Server 的运行模式来设置是否持久化实例。</li>\n  <li>若老客户端只是在持续发送客户端心跳，那么在Server以AP模式运行时，如果实例存在，会自动进行注册。</li>\n</ul>\n\n<h3 id=\"去除了服务的健康检查模式\">去除了服务的健康检查模式</h3>\n\n<p>之前服务的健康检查模式有三种：client、server 和none, 分别代表客户端上报、服务端探测和取消健康检查。在控制台操作的位置如下所示：</p>\n\n<p><img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2019.03/18/post-health-check.png\" alt=\"健康检查模式\" /></p>\n\n<p>在 Nacos 1.0.0 中将把这个配置去掉，改为使用实例的<code class=\"highlighter-rouge\">ephemeral</code>来判断，<code class=\"highlighter-rouge\">ephemeral</code>为<code class=\"highlighter-rouge\">true</code>对应的是服务健康检查模式中的 client 模式,为<code class=\"highlighter-rouge\">false</code>对应的是 server 模式。</p>\n\n<h3 id=\"注册实例支持groupname字段\">注册实例支持groupName字段</h3>\n\n<p>客户端注册实例时，可以在方法级别指定要注册的分组名，这个分组名和服务名是对服务的一个二维的标识，二者共同定位一个服务。一个典型的使用分组的实例如下：</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">namingServer</span><span class=\"o\">.</span><span class=\"na\">registerInstance</span><span class=\"o\">(</span><span class=\"s\">\"nacos.test.1\"</span><span class=\"o\">,</span><span class=\"s\">\"group1\"</span><span class=\"o\">,</span><span class=\"n\">instance</span><span class=\"o\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>不指定分组的接口依然是支持的，此时会在服务端为这个服务分配一个默认的分组：DEFAULT_GROUP。</p>\n\n<h3 id=\"去掉了nacosv1nsapi下的所有接口转移到其他url\">去掉了/nacos/v1/ns/api/下的所有接口，转移到其他URL</h3>\n\n<p>为了让 Nacos 的 API 分类更加合理，管理更加清晰，原来在/nacos/v1/ns/api/下的接口都会转移到相应的其他URL下。Nacos 服务发现总体定义了 /instance,/service,/cluster,/health,/operator,/catalog,/raft 等 URL 目录，后面所有的 openAPI 都会根据其类型放到相应的 URL 下。对用户造成的影响是一些早期的版本客户端可能无法在访问 Nacos 服务端。</p>\n\n<h4 id=\"注意事项-1\">注意事项</h4>\n<ul>\n  <li>0.8.0及一下版本客户端都有调用这个 URL 下的接口，0.8.0 只依赖/nacos/v1/ns/api/hello 接口，所以对0.8.0的兼容问题不大。</li>\n  <li>多语言 SDK 和 DNS-F 需要检查下调用的接口，及时升级。</li>\n</ul>\n\n<h3 id=\"增加了server状态的设置\">增加了Server状态的设置</h3>\n\n<p>Nacos 增加了对 Server 状态的控制，所有的状态都定义在<code class=\"highlighter-rouge\">com.alibaba.nacos.naming.cluster.ServerStatus</code>类里。</p>\n\n<p><img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2019.03/18/post-server.png\" alt=\"Server状态\" /></p>\n\n<p>各个状态的含义介绍如下：</p>\n<ul>\n  <li>UP: Server 一切正常，读写请求都会被接受；</li>\n  <li>DOWN: Server 异常，所有请求会返回 HTTP 503 错误；</li>\n  <li>STARTING: Server 还在启动中，所有请求返回 HTTP 503 错误；</li>\n  <li>STARTING：Server 还在启动中，所有请求返回HTTP 503 错误；</li>\n  <li>PAUSED：Server 被人工暂停，区别于 DOWN 可能是系统自己检测到异常，然后设置 DOWN 状态，PAUSED 状态表示当前 Server 可能是没问题的，只是人工进行了干预；</li>\n  <li>WRITE_ONLY: 只有非 GET 请求会被接受；</li>\n  <li>READ_ONLY: 只有 GET 请求会被接受；</li>\n</ul>\n\n<p>用户可以使用如下接口来修饰集群所有机器的状态，如果再加上<code class=\"highlighter-rouge\">debug=true</code>参数,则只修改当前机器的状态。</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">curl</span><span class=\"o\">-</span><span class=\"no\">X</span> <span class=\"no\">PUT</span>\n<span class=\"err\">'</span><span class=\"n\">$NACOS_SERVER</span><span class=\"o\">:</span><span class=\"mi\">8848</span><span class=\"o\">/</span><span class=\"n\">nacos</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"o\">/</span><span class=\"n\">ns</span><span class=\"o\">/</span><span class=\"n\">operator</span><span class=\"o\">/</span><span class=\"n\">switches</span><span class=\"o\">?</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"n\">overridenServerStatus</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"no\">READ_ONLY</span><span class=\"err\">'</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>同时这个状态是会自适应进行修改的，比如启动时这个状态为STARTING,等到数据装载完毕，则会自动将状态置为 UP,在运行过程中，如果检测到系统异常如磁盘满，则又会将状态置为DOWN。不过自适应的状态值优先级要低于使用接口设置的状态值，因此当你想恢复自适应的状态调解的时候，记得将接口中<code class=\"highlighter-rouge\">overriddenServerStatus</code>设置为空。</p>\n\n<h3 id=\"增加server运行模式的设置\">增加Server运行模式的设置</h3>\n\n<p>Server的运行模式，是指 Nacos Server 可以运行在多种模式下，当前支持三种模式：AP、CP和 MIXED 。这里的运行模式，使用的是CAP理论里的C、A和P概念。基于CAP理论，在分布式系统中，数据的一致性、服务的可用性和网络分区容忍性只能三者选二。一般来说分布式系统需要支持网络分区容忍性，那么就只能在C和A里选择一个作为系统支持的属性。C 的准确定义应该是所有节点在同一时间看到的数据是一致的，而A的定义是所有的请求都会收到响应。</p>\n\n<p>Nacos 支持 AP 和 CP 模式的切换，这意味着 Nacos 同时支持两者一致性协议。这样，Nacos能够以一个注册中心管理这些生态的服务。不过在Nacos中，AP模式和CP模式的具体含义，还需要再说明下。</p>\n\n<p>AP模式为了服务的可能性而减弱了一致性，因此AP模式下只支持注册临时实例。AP 模式是在网络分区下也能够注册实例。在AP模式下也不能编辑服务的元数据等非实例级别的数据，但是允许创建一个默认配置的服务。同时注册实例前不需要进行创建服务的操作，因为这种模式下，服务其实降级成一个简单的字符创标识，不在存储任何属性，会在注册实例的时候自动创建。</p>\n\n<p>CP模式下则支持注册持久化实例，此时则是以 Raft 协议为集群运行模式，因此网络分区下不能够注册实例，在网络正常情况下，可以编辑服务器别的配置。改模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。</p>\n\n<p>MIXED 模式可能是一种比较让人迷惑的模式，这种模式的设立主要是为了能够同时支持临时实例和持久化实例的注册。这种模式下，注册实例之前必须创建服务，在服务已经存在的前提下，临时实例可以在网络分区的情况下进行注册。</p>\n\n<p>使用如下请求进行Server运行模式的设定：</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">curl</span> <span class=\"o\">-</span><span class=\"no\">X</span> <span class=\"no\">PUT</span>\n<span class=\"err\">'</span><span class=\"n\">$NACOS_SERVER</span><span class=\"o\">:</span><span class=\"mi\">8848</span><span class=\"o\">/</span><span class=\"n\">nacos</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"o\">/</span><span class=\"n\">ns</span><span class=\"o\">/</span><span class=\"n\">operator</span><span class=\"o\">/</span><span class=\"n\">switches</span><span class=\"o\">?</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"n\">serverMode</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"no\">CP</span><span class=\"err\">'</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h4 id=\"注意事项-2\">注意事项</h4>\n<ul>\n  <li>何时选择使用何种模式？一般来说，如果需要在服务级别编辑或者存储配置信息，那么 CP 是必须要使用的模式，如果不需要存储服务级别的信息，且服务实例是通过<code class=\"highlighter-rouge\">nacos-client</code>注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如 Spring cloud 和 Dubbo 服务，都适用于AP模式，而K8S服务和DNS服务，则适用于CP模式。AP模式的服务实例可以在CP模式下注册，例如Zookeeper,但是反过来不能。</li>\n  <li>切换运行模式，对原有数据不会影响，但是会影响新数据的创建和老数据的更新和删除。</li>\n</ul>\n\n<h3 id=\"增加全局推送开关\">增加全局推送开关</h3>\n\n<p>支持了全局推送开关，可以打开或者关闭服务变更的推送，调用接口如下：</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">curl</span> <span class=\"o\">-</span><span class=\"no\">X</span> <span class=\"no\">PUT</span>\n<span class=\"err\">'</span><span class=\"n\">$NACOS_SERVER</span><span class=\"o\">:</span><span class=\"mi\">8848</span><span class=\"o\">/</span><span class=\"n\">nacos</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"o\">/</span><span class=\"n\">ns</span><span class=\"o\">/</span><span class=\"n\">operator</span><span class=\"o\">/</span><span class=\"n\">switches</span><span class=\"o\">?</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"n\">pushEnabled</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"err\">'</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>关闭推送后，客户端依然会通过轮询的方式来更新到数据，只是更新的速度没有推送那么快。</p>\n\n<h3 id=\"支持启动时数据预热\">支持启动时数据预热</h3>\n\n<p>在老版本的Nacosz中，只要Server启动成功就会开始对外提供服务，此时服务的数据并不一定完全加载完成，这样可能会导致客户端接收到的数据并不完整。1.0.0增加了数据预热的逻辑，对于持久化数据，则会等待所有数据从磁盘加载完成，对于临时实例这样的非持久化数据，则会等待从其他Server拉取到完整数据。所有数据都准备好后，才会将Server状态置为UP。</p>\n\n<h4 id=\"注意事项-3\">注意事项</h4>\n<ul>\n  <li>对于临时实例的预热，实现机制是Server在启动时会从其他Server节点拉取数据，拉取成功则启动成功，但是当从老版本Server升级到1.0.0时，由于这个拉取全量数据的接口在老版本Server不存在，那么第一个升级的机器将无法拉到任何数据，从而后面升级的机器也无法从第一个升级的机器拉取到数据。此时建议使用调用API将Server的运行状态设置为<code class=\"highlighter-rouge\">WRITE_ONLY</code>,允许客户端数据逐步汇聚补偿上来，但是阻止任何查询的流量，等集群数据准备好以后，再将这个运行状态清空，集群自己调整运行状态，然后就会提供完整服务。</li>\n</ul>\n\n<h3 id=\"元数据编辑框优化\">元数据编辑框优化</h3>\n\n<p>此前的元数据编辑框需要用户按照指定格式来编辑，容易出错，如下如所示：</p>\n\n<p><img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2019.03/18/post-metadata-edit-box1.png\" alt=\"编辑出错\" /></p>\n\n<p>1.0.0将会对服务页面的元数据编辑框进行优化，在调整编辑框大小的同时，增加语法高亮，方便用户进行编辑和识别格式问题，一个大概的编辑框预览图如下：</p>\n\n<p><img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2019.03/18/post-metadata-edit-box2.png\" alt=\"编辑框优化\" /></p>\n\n<h3 id=\"支持mysql-80\">支持MySQL 8.0</h3>\n\n<p>Nacos 1.0.0将支持MySQL 8.0 驱动。</p>\n\n<h3 id=\"api完整列表开发模型设计和架构设计文档发布\">API完整列表开发，模型设计和架构设计文档发布</h3>\n<p>服务发现和配置管理的完整API列表会发布到官网，同时对于Nacos的数据模型，集群模型，架构设计及模块设计等文档也会发布。</p>\n\n<p>除了上面提到的变更，Nacos 1.0.0还进行了代码的优化和一些bug的修复，完整的变更列表可以参考：<a href=\"https://github.com/alibaba/nacos/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0\">https://github.com/alibaba/nacos/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0</a></p>\n",
      "desc"     : "  本文来自于我的简书：Nacos 1.0.0 功能预览，转载请保留链接 ;)Nacos 1.0.0 是正式 GA 的版本，在架构、功能和API设计上进行了全方位的重构和升级，1.0.0版本标志着Nacos的架构已经稳定，API列表最终确定。升级到1.0.0相比升级到其他版本，需要额外的一些工作，本文专门介绍如何从Nacos 0.8.0以上版本升级到1.0.0 版本的所有步骤和细节。重要提示..."
} ,
  
  
  
    {
      "title"    : "在Github Pages上部署简历",
      "title-lower"    : "在github pages上部署简历",
      "sub-titile" : "Making Github Pages on your resume",
      "sub-titile-lower" : "making github pages on your resume",
      "categories" : "",
      "tags"     : "Github Pages, 简历",
      "url"      : "/zcblog/2018/12/07/make-your-resume/",
      "date"     : "2018-12-07 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的简书：<a href=\"https://www.jianshu.com/p/d95443bfdf75\">如何在Github Pages上生成部署简历</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<h2 id=\"背景\">背景</h2>\n<p>每年的金三银四都是人员流动最大，找工作最好的时间段之一。而找工作就不得不需要更新简历，想到自己也会有这么一天，那么就来一起好好写一份简历吧。期间在网上找了不少写简历的资源，比如<a href=\"https://qdan.me/list/VUR-PAX01x8Skk0F\">轻单-在线简历制作</a>收录了一些在线生成简历的网站，有需要的童鞋可以直接拿走，不用再看这节课啦。</p>\n\n<p>怎么可能！我对自己写的简历模板有信心，放这个出来就是要比比看。比比看性价比，我们这个模版的价格是 0，分母是 0 就意味着性价比无穷大！</p>\n\n<p>写这个模版的初衷是希望同一份简历既能做页面展示，也能直接打印出来给我到处投。（请认真对待每一份简历，不要学习笔者）。</p>\n<ul>\n  <li><a href=\"https://github.com/DIYgod/Resume\">一看 star 数就知道一定是最牛的简历</a></li>\n  <li><a href=\"https://www.freepik.com/free-psd/editable-cv-format-download_716578.htm\">freepik 上的好看简历</a></li>\n</ul>\n\n<p>我们可以利用 Github 的静态页面托管服务 Github Pages 来帮助我们做页面展示。\n<img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564810996049-120b22b5-c125-477a-a203-05ca5f65c983.png\" alt=\"背景图\" /></p>\n\n<p><strong>什么是 Github Pages？</strong></p>\n\n<p>Github Pages 是 Github 的静态页面托管服务。它设计的初衷是为了用户能够直接通过 Github 仓库来托管用户个人、组织或是项目的专属页面。参考：https://help.github.com/articles/what-is-github-pages/</p>\n\n<p>可以说相当于一个可直接用 git 管理内容的静态服务器，有许多人会用它来托管自己的个人博客（利用 Jekyll、Pelican 这一类静态页面生成工具）或是在这上面发布自己的 HTML5 小游戏。当然这么好的东西也是有限制的。</p>\n\n<p><strong>Github Pages 的限制：</strong></p>\n\n<ul>\n  <li>仓库存储的所有文件不能超过 1 GB。</li>\n  <li>页面的带宽限制是低于每月 100 GB 或是每月 100,000 次请求。</li>\n  <li>每小时最多只能部署 10 个静态网站。</li>\n</ul>\n\n<p>对于发布自己的简历或是部署自己的博客的这一类需求我想是不用担心这些限制的，如果真的不小心超了，Github 那边不会采取什么强制措施，而是会发一份邮件提醒你应该找一个更适合你的托管对象的服务。</p>\n\n<h3 id=\"预备知识\">预备知识</h3>\n\n<p>本项目需要的预备知识：\ngit 的基本使用，如果对 git 完全陌生，推荐学习实验楼的<a href=\"https://www.shiyanlou.com/courses/4\">《Git 实战教程》</a>，仅需了解最基本的操作即可。</p>\n\n<h3 id=\"项目知识点\">项目知识点</h3>\n\n<p>本项目完成过程中，我们将学习：在 Github Pages 上部署自己的简历。</p>\n\n<h3 id=\"适合人群\">适合人群</h3>\n\n<p>适合对于简历有要求的同学，本项目可以完美的让你对简历进行管理。</p>\n\n<h3 id=\"最终效果\">最终效果</h3>\n\n<p>简历页面展示：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564810999043-db6bc15a-3d31-448a-b2e2-b46b75b023bb.png\" alt=\"简历页面展示\" /></p>\n\n<p>保存后的 pdf 版本：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811002148-7b2506fd-f658-4211-8586-509ef414c466.png\" alt=\"保存后的 pdf 版本\" /></p>\n\n<h2 id=\"步骤\">步骤</h2>\n\n<p>本次实验我们从初始化Git库开始，编辑简历文件，将文件部署在Github Pages上，最后可以将其保存为pdf格式并打印出来。下面我们进入具体的实现阶段。</p>\n\n<p>请尽量按照实验步骤自己操作，请确认文件保存在目录：<code class=\"highlighter-rouge\">/home/shiyanlou/Code</code> 下。</p>\n\n<h3 id=\"初始化git库\">初始化git库</h3>\n\n<p>打开终端，进入 Code 目录，创建 CV 文件夹, 并将其作为我们的工作目录。</p>\n\n<p><code class=\"highlighter-rouge\">$ cd Code</code></p>\n\n<p><code class=\"highlighter-rouge\">$ mkdir CV &amp;&amp; cd</code></p>\n\n<p>初始化 git 库。</p>\n\n<p><code class=\"highlighter-rouge\">$ git init</code></p>\n\n<p><strong>用户配置（可选）：</strong></p>\n\n<p><code class=\"highlighter-rouge\">$ git config --global user.name \"你的用户名\"</code></p>\n\n<p><code class=\"highlighter-rouge\">$ git config --global user.email \"你的邮箱地址\"</code></p>\n\n<p>这一步不做也没关系，用户名和邮箱是你提交commit时的签名，在 Github 的仓库页面上会显示这次提交的用户，如果不做设置就会默认为该仓库的拥有者，做了则根据邮箱来匹配用户。</p>\n\n<h3 id=\"编辑简历文件\">编辑简历文件</h3>\n\n<p>下载页面模板文件。下载完后解压压缩包，并且直接将其中的文件置于 CV 文件夹下。</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre>        <span class=\"nv\">$ </span>wget http://labfile.oss.aliyuncs.com/courses/624/cv-template.zip\n\n        <span class=\"nv\">$ </span>unzip cv-template\n\n        <span class=\"nv\">$ </span><span class=\"nb\">mv </span>cv-template/<span class=\"k\">*</span> <span class=\"nb\">.</span>\n\n        <span class=\"nv\">$ </span><span class=\"nb\">rm</span> <span class=\"nt\">-rf</span> cv-template<span class=\"k\">*</span> __MACOSX<span class=\"k\">*</span>（MACOSX前面是两根下划线）\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811448498-36fa5902-1ab2-4d03-813b-2b2e88121080.png\" alt=\"\" /></p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811452055-f8972291-36a7-48e5-a041-3639fb6cf725.png\" alt=\"\" /></p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811454857-41a1de16-f498-457d-9903-f4bbd2c5fa49.png\" alt=\"\" /></p>\n\n<p>用浏览器打开就可以看见模板的样子了。同学们可以根据自己的需求来修改模板的样式。</p>\n\n<p>怎么用浏览器打开？</p>\n\n<p>在linux终端项目目录输入命令 <code class=\"highlighter-rouge\">firefox index.html</code>；也可以进入文件夹，在图形化界面中右键选择用浏览器打开。</p>\n\n<p>有的童鞋可能已经发现这份模板是可编辑的了，所有的文字栏目都是可以随意编辑的：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811461240-fbabc524-9eea-4e82-9ff5-da58464ac445.png\" alt=\"\" /></p>\n\n<p>点击图片可以通过图片的url地址替换：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811472935-8aca375b-ff6e-4c23-b86d-3e14c1c91995.png\" alt=\"\" /></p>\n\n<p>替换后：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811477372-877c1b57-01d8-496f-8af6-d45b7059338b.png\" alt=\"\" /></p>\n\n<p>不想留就把整个栏目删掉：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811480339-4718170e-ca92-4db7-927f-a780d8eefab0.png\" alt=\"\" /></p>\n\n<p>可增加新的条目：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811484560-4fb9036c-0d7e-491f-a593-3004f9e16a1e.png\" alt=\"\" /></p>\n\n<p>可通过点击编辑进度条：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811488385-156c1dbc-a76d-4b15-8f9e-c3fc11599668.png\" alt=\"\" /></p>\n\n<p>注意敏感信息不要发布在页面上，我们仅在需要打印简历时用到这些信息：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811490978-5881011d-d931-4bdb-a178-dc87513c68dd.png\" alt=\"\" /></p>\n\n<p><strong>注意简历的内容不要超出背景的高度。</strong></p>\n\n<p>编辑完自己的简历以后，就把修改后的代码复制下来，替换掉原<code class=\"highlighter-rouge\">index.html</code>里的代码。</p>\n\n<p>Firefox 下，打开查看器：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811493545-abf50266-a3eb-4ed1-8072-496038153d2b.png\" alt=\"\" /></p>\n\n<p>复制 html 标签的外部 HTML：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811500332-6dcf9a91-d426-4e85-b0ea-ab4d60c93156.png\" alt=\"\" /></p>\n\n<p>然后将 index.html 中的 html 标签的所有内容（包括 html 标签）替换掉即可。</p>\n\n<p>我的本意是发布后的简历页面仍是可编辑的，这方便我日后直接在上面编辑手机等个人信息后保存打印。不喜欢这样子的可以修改<code class=\"highlighter-rouge\">static/js</code>下的<code class=\"highlighter-rouge\">script.js</code>文件，操作非常简单，删除该文件下的所有内容，然后加上下面这一句。</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre>        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">){</span>\n\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">*</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">removeAttr</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">contenteditable</span><span class=\"dl\">'</span><span class=\"p\">);</span>    \n   \n        <span class=\"p\">})</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>这一句是为了去掉页面上所有元素的可编辑属性，最后可以在 CSS 文件内再改改样式。</p>\n\n<h3 id=\"部署简历文件\">部署简历文件</h3>\n\n<p>首先需要每位同学都有自己的 Github 账号：<a href=\"https://github.com/\">https://github.com/</a></p>\n\n<p>没有就快去注册一个吧。然后新建一个仓库，名字取 cv 或是 resume 皆可，之后先别跟着它给的步骤做。</p>\n\n<p>Github Pages 支持托管的页面分两类，个人/组织页面 与 项目页面，其主要区别就是托管位置的区别。如下表所示（这里略去组织，它跟个人是差不多的）：</p>\n\n<table>\n  <tbody>\n    <tr>\n      <td>类型</td>\n      <td>页面域名 &amp; 托管位置</td>\n      <td>页面源文件所在的分支</td>\n      <td> </td>\n      <td>—</td>\n      <td>—</td>\n      <td>—</td>\n      <td>—</td>\n      <td>—</td>\n      <td> </td>\n      <td>个人主页</td>\n      <td>username.github.io</td>\n      <td>master</td>\n      <td> </td>\n      <td>项目主页</td>\n      <td>username.github.io/projectname</td>\n      <td>master、gh-pages 、或是在master的doc目录下</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>如果想使用个人主页，那么就创建一个名为<code class=\"highlighter-rouge\">username.github.io</code> （username需要替换为你的用户名）的库，在主分支master上托管你的页面代码。</p>\n\n<p>如果是使用项目主页，那么可以选择将代码托管在master、gh-pages、或者<code class=\"highlighter-rouge\">master</code>的<code class=\"highlighter-rouge\">doc</code>目录下，其中gh-pages是默认的页面托管分支，如果想使用master，可在项目页面的设置栏中进行切换。</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564811655654-013ebda8-7ab2-4039-9c28-2fe29bf23649.png\" alt=\"\" /></p>\n\n<p>无论使用哪一种页面操作都是差不多的，这里就用项目页面来做演示了，由于我们所有的代码就只有页面代码而已，那么就直接在master分支上进行托管吧。</p>\n\n<p>先在本地仓库做一次代码提交：</p>\n\n<p><code class=\"highlighter-rouge\">$ git add .</code></p>\n\n<p><code class=\"highlighter-rouge\">$ git commit -m 'commit my cv'</code></p>\n\n<p>在项目页面找到你的仓库地址后输入：</p>\n\n<p><code class=\"highlighter-rouge\">$ git remote add origin</code> 你的远程仓库地址</p>\n\n<p><code class=\"highlighter-rouge\">$ git push -u origin master</code></p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564824574463-5ca2b830-e390-4fc2-a662-978ad4d49692.png\" alt=\"\" /></p>\n\n<p>代码提交到远程仓库后，在项目页面设置 Github Pages 使用的托管源。</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564824578664-a7db6d3e-dfaa-47b0-875d-b23307cd62b9.png\" alt=\"\" /></p>\n\n<p>现在你可以访问<code class=\"highlighter-rouge\">https://你的用户名.github.io/resume/</code>这个地址了，恭喜，简历页面已成功部署在了 Github Pages 上。（参考：<a href=\"https://caojiele.com/online-resume/\">https://caojiele.com/online-resume/</a>，我这里是用的自己的域名，有域名的可以自己的，并且没有去掉页面上所有元素的可编辑属性）</p>\n\n<h3 id=\"保存简历为pdf格式\">保存简历为pdf格式</h3>\n\n<p>笔者考察过多个在线转换 pdf 的网站以及 js 保存 pdf 的方案，效果都不甚理想。最后发现这一步其实可以很简单，你只要打开浏览器的打印选项然后它其实是可以直接帮你保存为 pdf 的！这里还是推荐使用 Chrome ，Firefox 似乎无法删页脚与页眉。</p>\n\n<p>Firefox 下：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564824629382-e36d95f0-57cc-4829-891c-2088c4d08681.png\" alt=\"\" /></p>\n\n<p>勾上打印背景图像与颜色，页脚和页眉都设置成空白</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564824629225-3b4793ee-afd8-44ed-aafd-5ba4db403b46.png\" alt=\"\" /></p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564824629422-6baca01b-ef27-4067-aab0-dc2a0de0f189.png\" alt=\"\" />\nChrome 下：</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564824629637-10a75d47-d4f2-426d-920a-b1684091a04f.png\" alt=\"\" /></p>\n\n<p>因为等到打印 pdf 的时候，那个页边距是可以再调的，所以笔者比较倾向于在保存的时候不保留页边距。</p>\n\n<p>Mark简历生成器操作图：</p>\n\n<p><img src=\"https://raw.githubusercontent.com/caojiele/resume/master/img-folder/Dynamic_figure2.gif\" alt=\"Mark简历生成器操作图\" /></p>\n\n<p>网页链接：<a href=\"https://caojiele.com/online-resume/\">Mark简历模板主页</a></p>\n\n<p>项目地址：<a href=\"https://github.com/caojiele/online-resume\">online-resume</a></p>\n\n<h2 id=\"总结\">总结</h2>\n<p>本课程主要是给没有接触过 Github Pages 的同学演示一遍它的基本使用，关于其它主题如自定义域名，自定义 404 页面等可在<a href=\"https://help.github.com/categories/customizing-github-pages/\">Customizing GitHub Pages</a>中找到参考。这里还需要再三提醒一句，千万不要在发布的简历中加上个人身份敏感信息呀！最后再给看到这里的同学一个福利吧：https://www.canva.com/templates/resumes/</p>\n\n<h2 id=\"参考资料\">参考资料</h2>\n<ul>\n  <li><a href=\"https://help.github.com/categories/github-pages-basics/\">GitHub Pages Basics</a></li>\n  <li><a href=\"https://help.github.com/categories/customizing-github-pages/\">Customizing GitHub Pages</a></li>\n  <li><a href=\"https://codepen.io/ashblue/pen/mCtuA\">HTML5 Editable Table</a></li>\n  <li><a href=\"https://github.com/DIYgod/Resume\">一看 star 数就知道一定是最牛的简历</a></li>\n  <li><a href=\"https://www.freepik.com/free-psd/editable-cv-format-download_716578.htm\">freepik 上的好看简历</a></li>\n  <li><a href=\"https://note.youdao.com/share/?id=a097d9dedfc367e44e8a5840bc250a96&amp;type=note#/\">写简历注意事项</a></li>\n</ul>\n",
      "desc"     : "  本文来自于我的简书：如何在Github Pages上生成部署简历，转载请保留链接 ;)背景每年的金三银四都是人员流动最大，找工作最好的时间段之一。而找工作就不得不需要更新简历，想到自己也会有这么一天，那么就来一起好好写一份简历吧。期间在网上找了不少写简历的资源，比如轻单-在线简历制作收录了一些在线生成简历的网站，有需要的童鞋可以直接拿走，不用再看这节课啦。怎么可能！我对自己写的简历模板有..."
} ,
  
  
  
    {
      "title"    : "百日维“薪”",
      "title-lower"    : "百日维“薪”",
      "sub-titile" : "上海温尔信息科技有限公司的讨薪之路",
      "sub-titile-lower" : "上海温尔信息科技有限公司的讨薪之路",
      "categories" : "",
      "tags"     : "欠薪, 仲裁, 互联网寒冬",
      "url"      : "/zcblog/2018/10/01/failure-to-pay-wages/",
      "date"     : "2018-10-01 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的知乎：<a href=\"https://zhuanlan.zhihu.com/p/61230092\">上海温尔信息科技有限公司—百日维“薪”</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-8fb664624f4769ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"温尔法人-康宏\" /></p>\n\n<blockquote>\n  <p>你的脸上云淡风轻，谁也不知道你的牙咬得有多紧。你走路带着风，谁也不知道你膝盖上仍有曾摔伤的淤青。你笑得没心没肺，没人知道你哭起来只能无声落泪。要让人觉得毫不费力，只能背后极其努力。我们没有改变不了的未来，只有不想改变的过去。</p>\n</blockquote>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-4e07d7e69d2a7e9f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"仲裁\" /></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-d56d425a5cab837b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"虹口劳动仲裁委员会作息时间\" /></p>\n\n<blockquote>\n  <p>以下 <strong>上海温尔信息科技有限公司</strong> 简称 “<strong>温尔</strong>”</p>\n</blockquote>\n\n<p>2018年的互联网寒冬持续时间是如此之久，裁员欠薪的事情是屡见不鲜。此事从何说起呢？对，从2018年10月国庆休完假回来说起。10月之前还是会发工资的，本来是每个月10号发工资，但是每次都会拖着几天，甚至是一周后来发工资，所以资金流转一直有着不小的问题。这公司整体应该算小型公司，最鼎盛的时候也是两三百人的样子，在徐家汇一家写字楼包下了一层，但是老板并不会打理公司，自然问题是各种出现。这些就不说了，应为那个时候我还没进来，也是听之前公司员工有说过。好吧，接下来说下我亲身经历的事情，<strong>如果有任何描述内容不符合实际的，可以当面指出。</strong></p>\n\n<p>国庆回来后，工资就断片了，公司想出各种借口说银行账户有问题，有的说因为少缴了税，被封了，也有的说被股东起诉让法院封了，这就让发钱的卡不能出钱，只能进钱。公司说最多会下个月会发，我们就盼星星盼月亮的等着，这一等就是三个月过去了，到了18年年底。（你们可以脑补一波，这段缺兵短粮的日子是怎么熬过来的）到了12月29日的样子，我一个同事被叫进去谈话，说是要他降薪调岗，然后过年早点回去休息一阵（息工）。那东北哥们肯定就不干了，自然就让管事的碰上了钉子，后面找我谈的时候，直接就跟我说裁员，也愿意赔偿一个月的赔偿金，但是要分期半年偿还，可以打借条。也许正常的人听了，就会马上办理离职交接手续，每个月按时收钱。你如果是这样想，那就大错特错了。那么可能有的人会说：“一定是有前科，没信誉吧!老套路经常玩吧” 对，说得没错，在职期间，我是看着一波又一波的老员工过来讨薪，最终都是失望而归，典型的事例就有一个原来康宏的战友，在职期间担任总经理助理，来了几趟了，都没有要到钱，现在在这公司信息公示网上都能查到这哥们上法院起诉信息。</p>\n\n<p>说到我们，这种离职赔偿方案，当然是不能接受的。在此期间，要我们签署各种离职协议什么的，不签就没有离职证明。协议里面各种条条框框（后附协议书），总的来说签了就说明你和公司没有任何劳动纠纷了，默认这种偿还方式，差点就着了公司的道。在商量无果的情况下，我们在12月31日就去了虹口劳动仲裁委员会，可惜的是，当时是星期四，不能受理案件，只能咨询。我们将这种情况跟仲裁员们聊了起来，因为那个时候我们什么都没签，只是公司口头说裁我们，所以仲裁这边要我们寄个挂号信给公司，大致的信息就是<strong>本人与该公司的劳动协议解除，已无任何劳动关系</strong>。元旦过后，我们就马上将材料提交给仲裁委员会这边，因为大家有的忙着找工作，有的忙着回家了（可怜呀，回家过年一分钱都没有）。我也早早回家了，毕竟越靠近年关，票越难买，而且车上人还很多，准备来年找工作。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-c5617c543a70834d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"解除劳动合同协议书\" /></p>\n\n<p>也许去年是本命年吧，这个开庭的日子竟然是过年的前几天（小编也是霉到家了），跟仲裁那边商量年后时间开庭也不批准，没办法，只能灰溜溜的坐个硬座连夜赶回上海参加开庭。我本来以为人都有脸，公司碰到这事一般都不会来，看来我想错了，这些人压根就没有脸，还能与我们对簿公堂~ 这里省去开庭的内容描述，因为说的都是上海话，我也听不懂，这公司就是故意的，还好我们有一个本地的律师。其实商量的内容都差不多，唯一有歧义的就是12月份竟然没有绩效工资，说什么开会签字通过了，哈哈哈~我们那个部门没有一个人知道。开庭书记私下就跟我说都各退一步，如果协商下来，能调解就调解，不能调解只能下判决书了。我们也是想尽快解决这个事情，所以也没纠缠，爽快的答应了（12月份绩效就当送给狗了），所以最后我们是调解的，没有开庭，答应在<strong>2月份内还清</strong>。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-5787d641a80edde0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开庭通知\" /></p>\n\n<p>如果这里没有写了，是不是觉得公司在2月份会把钱打给我们。当然，没有这么简单，这也证明之前没有签分期协议是个明智的决定，果然2月份也没能如约履行支付拖欠的工资和赔偿金（这公司法人和管事的都是一群老赖，尤其那个<strong>李莲海</strong>）。没办法了，老实人被欺负到这份上，只能走最后一步，去虹口法院申请强制执行了，我们是3月1日就去执行的，一周之内法院那边就打电话了，说公司账户里面没有钱，我们之前提供的建行账户（也就是之前一直发工资被封掉的银行卡）根本就没查到，法院说可能这张卡是个人开的卡（我不清楚现在中国开公司的条件是什么，但是我觉得像这样的公司就赶紧不要来祸害人间了，趁早关门），所以这公司从成立的时候就想好了。法院这边说最多等6个月，已经将公司法人（就是第一张图上的人 康宏）上了限高令（限制高消费），后面结案能上黑名单，钱补上就会打过来，要我们等消息。所以前前后后，不带从10月份欠薪开始，我们已经走维权这条路已经有3个月，在4月的初始，也是此事经历过百日后，才提笔述说讨薪的经过。中国的劳动者维权之路到底在何方？依然是个未知数？还是有机会去大厂吧！钱多钱少无所谓，求个安稳，能发工资就行。</p>\n\n<p>这里借诸葛亮的出师表一句话结尾：”临表涕零，不知所言！“ 希望有付出就有收获，能拿回自己的血汗钱！也希望同行们找工作放大眼睛找，千万别入坑，只要一有不发工资的迹象，就赶紧走。</p>\n\n<hr />\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-4982fea4fc033d67.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"法院退代管款截图\" /></p>\n\n<p>话说在3月1日向法院申请强制执行后，我们本来是不抱希望的，想这老头（康宏）应该不会对自己上限高令和黑名单有太在意，没想到转折点在4月中旬。法院那边打电话，说他已经交了3万多，后续钱的会补上，我们欣喜若狂，仿佛拨云见日。没过几天就接到电话，要我们去签字结案，4月底的时候和我一起仲裁的另一个哥们就拿到了钱，为啥我没拿到？法院那边解释是他把钱都交到了那哥们的案子上，所以我的要等一会。这一会就是一个月哈（法院办事效率我不想说了，还要我们送锦旗，脸在哪？）到了5月17日我终于拿到了钱。从元旦开始仲裁到5月中旬拿到钱，将近花费半年时间的破事终于结束了。也算是给自己在那段时间坚持维权这条路的交代吧！最后借鲁迅先生一句话，送给大家：“真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。” 既然选择了要当猛士，就坚持当下去，即使一路走到黑，都不要后悔！Just do it! 💪💪💪</p>\n",
      "desc"     : "  本文来自于我的知乎：上海温尔信息科技有限公司—百日维“薪”，转载请保留链接 ;)  你的脸上云淡风轻，谁也不知道你的牙咬得有多紧。你走路带着风，谁也不知道你膝盖上仍有曾摔伤的淤青。你笑得没心没肺，没人知道你哭起来只能无声落泪。要让人觉得毫不费力，只能背后极其努力。我们没有改变不了的未来，只有不想改变的过去。  以下 上海温尔信息科技有限公司 简称 “温尔”2018年的互联网寒冬持续时间是..."
} ,
  
  
  
    {
      "title"    : "初识 Nacos(上）",
      "title-lower"    : "初识 nacos(上）",
      "sub-titile" : "学习《Spring Cloud 服务发现新选择》",
      "sub-titile-lower" : "学习《spring cloud 服务发现新选择》",
      "categories" : "",
      "tags"     : "Spring Cloud, Nacos, Java",
      "url"      : "/zcblog/2018/09/21/alibaba-nacos-discovery1/",
      "date"     : "2018-09-21 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的简书：<a href=\"https://www.jianshu.com/p/b374a7b10486\">初识 Nacos(上） 学习《Spring Cloud 服务发现新选择》</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p>最近在从零接触Alibaba 开源项目Nacos,学习的是<a href=\"https://github.com/mercyblitz\">小马哥(mercyblitz)</a>的技术周报，之前看了后忘记总结，导致也没有什么印象。所以现在决定学习一章，写一篇学习感悟，并且持续更新下去。首先这一章节主要讲得是服务发现(Service Discovery)，作为 Spring Cloud 最核心功能特性之一，受到业界的广泛关注。\n<img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2018.09/21/post-theme.png\" alt=\"文章主题\" /></p>\n\n<h2 id=\"spring-cloud-整体架构\">Spring Cloud 整体架构</h2>\n\n<p>在现行的 Spring Cloud 服务发现技术体系中，以 Spring Cloud Eureka 为典型代表，它作为官方推荐解决方案，被业 界广泛运用，然而其设计缺陷也非常之明显。还有Spring Cloud Zookeeper和Spring Cloud Consul。那么先介绍这三种的特点吧。\n<img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2018.09/21/post-architecture.png\" alt=\"整体架构\" /></p>\n\n<h3 id=\"spring-cloud-eureka-特点\">Spring Cloud Eureka 特点</h3>\n<h4 id=\"优点\">优点：</h4>\n<ul>\n  <li>Spring Cloud 背书 - 推荐服务发现方案</li>\n  <li>CAP 理论 - AP模型，数据最终一致</li>\n  <li>简单易用 - 开箱即用，控制台管理</li>\n</ul>\n\n<h4 id=\"缺点\">缺点：</h4>\n<ul>\n  <li>内存限制 - 客户端上报完整注册信息，造成服务端内存浪费</li>\n  <li>单一调度更新 - 客户端简单轮训更新，增加服务器压力</li>\n  <li>集群伸缩性限制 - 广播式复制模型，增加服务器压力</li>\n</ul>\n\n<h3 id=\"spring-cloud-zookeeper-特点\">Spring Cloud Zookeeper 特点</h3>\n<h4 id=\"优点-1\">优点：</h4>\n<ul>\n  <li>成熟协调系统 - Dubbo、Spring Cloud等适配方案</li>\n  <li>CAP理论 - CP模型，ZAB算法，强数据一致性</li>\n</ul>\n\n<h4 id=\"缺点-1\">缺点：</h4>\n<ul>\n  <li>维护成本 - 客户端、Session状态、网络故障</li>\n  <li>伸缩性限制 - 内存、GC、连接</li>\n</ul>\n\n<h3 id=\"spring-cloud-consul-特点\">Spring Cloud Consul 特点</h3>\n<h4 id=\"优点-2\">优点：</h4>\n<ul>\n  <li>通用方案 - 适用于 Service Mesh、 Java 生态</li>\n  <li>CAP理论 - AP 模型，Raft+Gossip 算法，数据最终一致</li>\n</ul>\n\n<h4 id=\"缺点-2\">缺点：</h4>\n<ul>\n  <li>可靠性无法保证 - 未经过大规模验证</li>\n  <li>非 Java 生态 - 维护和问题排查困难</li>\n</ul>\n\n<p>综上所述，让我得出了Spring Cloud服务发现方案对比结果:\n<img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2018.09/21/post-compare.png\" alt=\"方案对比结果\" /></p>\n\n<p>那么这三种服务发现的基本模式是怎样的呢？现在来谈谈Spring cloud 服务器发现模式。</p>\n<ul>\n  <li>首先都是服务器启动 - 启动注册中心</li>\n  <li>然后增加客户端依赖 - <code class=\"highlighter-rouge\">sping-cloud-start-*</code></li>\n  <li>最后就是客户端注册 - 记得在<code class=\"highlighter-rouge\">XXApplication.java</code>文件中添加<code class=\"highlighter-rouge\">@EnableDiscoveryClient</code>，注解开启服务注册与发现功能。</li>\n</ul>\n\n<p>以下我以Eureka发现模式为例：</p>\n<ul>\n  <li>首先去<a href=\"https://start.spring.io\">Spring Initializr</a>快速创建Eureka服务端和客户端应用程序，然后导入自己的IDE。当然你如果嫌麻烦，也可以直接导入已经写好的<a href=\"https://github.com/mercyblitz/tech-weekly/tree/master/2018.09.21%E3%80%8C%E5%B0%8F%E9%A9%AC%E5%93%A5%E6%8A%80%E6%9C%AF%E5%91%A8%E6%8A%A5%E3%80%8D-%20%E7%AC%AC%E4%B8%80%E6%9C%9F%E3%80%8ASpring%20Cloud%20%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%96%B0%E9%80%89%E6%8B%A9%20-%20Alibaba%20Nacos%20Discovery%E3%80%8B/%E4%BB%A3%E7%A0%81\">工程</a>。</li>\n  <li>然后在<code class=\"highlighter-rouge\">resources-application.properties</code>中分别配置好两者的端口号，像客户端这块还需要写好应用名称、以及Eureka 服务器地址。</li>\n  <li>最后我们就直接可以run<code class=\"highlighter-rouge\">XXApplication.java</code>了，像我的服务端端口是<code class=\"highlighter-rouge\">12345</code>，就访问<a href=\"localhost:12345\">localhost:12345</a>。页面跳转如下图所示，恭喜你的Eureka服务已经起来了。</li>\n  <li>Eureka-client亦如此，成功run起来后，在之前的服务端页面，也就是<a href=\"localhost:12345\">localhost:12345</a>，刷新下会在<code class=\"highlighter-rouge\">Instances currently registered with Eureka</code>出现<code class=\"highlighter-rouge\">EUREKA-CLIENT</code>的状态信息。</li>\n</ul>\n\n<p>spring-cloud-alibaba-nacos-discovery 作为 Spring Cloud Alibaba 服务发现的核心模块，其架构基础与 Spring Cloud 现行方案相同，均构建在 Spring Cloud Commons 抽象。因此，它在 Spring Cloud 服务发现的使用上，开发人员将不会心存任何的违和感。</p>\n\n<h2 id=\"alibaba-nacos-生态介绍\">Alibaba Nacos 生态介绍</h2>\n<p>从功能特性而言，spring-cloud-alibaba-nacos-discovery 仅是 Nacos 在 Spring Cloud 服务发现的解决方案，Nacos 在 Spring Cloud 中还支持分布式配置的特性。与开源产品不同的是，Nacos 曾经历过中国特色的超大流量考验，以及巨型规模的集群实施，无论从经验积累还是技术沉淀，现行 Spring Cloud 解决方案 都是无法比拟的。然而这并非说明它完美无缺，在内部的评估和讨论中，也发现其中差距和文化差异。为了解决这些问题，讨论将从整体架构和设计思考两个方面，介绍 Nacos 与 Spring 技术栈整合情况，以及与其他开源方案的适配思考，整体上，降低 Nacos 使用门槛，使迁移成本接近为零，达到“一次开发，到处运行”的目的。\n那么接下来我们通过Github上，Spring Cloud Alibaba项目中官方给出的指导文档来配置启动 Nacos吧。</p>\n\n<h3 id=\"下载注册中心\">下载注册中心</h3>\n\n<ol>\n  <li>\n    <p>首先需要获取 Nacos Server，支持直接下载和源码构建两种方式。</p>\n\n    <ol>\n      <li>直接下载：<a href=\"https://github.com/alibaba/nacos/releases\">Nacos Server 下载页</a></li>\n      <li>源码构建：进入 Nacos <a href=\"https://github.com/alibaba/nacos\">Github 项目页面</a>，将代码 git clone 到本地自行编译打包，<a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">参考此文档</a>。<strong>推荐使用源码构建方式以获取最新版本</strong></li>\n    </ol>\n  </li>\n</ol>\n\n<h3 id=\"启动注册中心\">启动注册中心</h3>\n\n<ol>\n  <li>\n    <p>启动 Server，进入解压后文件夹或编译打包好的文件夹，找到如下相对文件夹 nacos/bin，并对照操作系统实际情况之下如下命令。</p>\n\n    <ol>\n      <li>Linux/Unix/Mac 操作系统，执行命令 <code class=\"highlighter-rouge\">sh startup.sh -m standalone</code></li>\n      <li>Windows 操作系统，执行命令 <code class=\"highlighter-rouge\">cmd startup.cmd</code></li>\n    </ol>\n  </li>\n</ol>\n\n<h3 id=\"增加第三方依赖\">增加第三方依赖</h3>\n\n<ol>\n  <li>首先，修改 pom.xml 文件，引入 Nacos Discovery Starter。\n    <pre><code class=\"language-mongoDB\">     &lt;dependency&gt;\n         &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n         &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;\n     &lt;/dependency&gt;\n</code></pre>\n    <h3 id=\"外部化配置\">外部化配置</h3>\n  </li>\n  <li>在应用的 /src/main/resources/application.properties 配置文件中配置 Nacos Server 地址\n    <pre><code class=\"language-mongoDB\">     spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\n</code></pre>\n    <h3 id=\"激活服务发现\">激活服务发现</h3>\n  </li>\n  <li>使用 @EnableDiscoveryClient 注解开启服务注册与发现功能（<code class=\"highlighter-rouge\">SpringApplication.run</code>)\n    <pre><code class=\"language-mongoDB\">     @SpringBootApplication\n     @EnableDiscoveryClient\n     public class ProviderApplication {\n\n         public static void main(String[] args) {\n             SpringApplication.run(Application.class, args);\n         }\n\n         @RestController\n         class EchoController {\n             @RequestMapping(value = \"/echo/{string}\", method = RequestMethod.GET)\n             public String echo(@PathVariable String string) {\n                     return string;\n             }\n         }\n     }\n</code></pre>\n  </li>\n</ol>\n\n<h3 id=\"应用启动\">应用启动</h3>\n\n<ol>\n  <li>增加配置，在 nacos-discovery-provider-example 项目的 /src/main/resources/application.properties 中添加基本配置信息\n    <pre><code class=\"language-mongoDB\">     spring.application.name=service-provider\n     server.port=18082\n</code></pre>\n  </li>\n  <li>\n    <p>启动应用，支持 IDE 直接启动和编译打包后启动。</p>\n\n    <ol>\n      <li>IDE直接启动：找到 nacos-discovery-provider-example 项目的主类 <code class=\"highlighter-rouge\">ProviderApplication</code>，执行 main 方法启动应用。</li>\n      <li>打包编译后启动：在 nacos-discovery-provider-example 项目中执行 <code class=\"highlighter-rouge\">mvn clean package</code> 将工程编译打包，然后执行 <code class=\"highlighter-rouge\">java -jar nacos-discovery-provider-example.jar</code>启动应用。</li>\n    </ol>\n  </li>\n</ol>\n\n<h3 id=\"验证\">验证</h3>\n\n<h4 id=\"检验服务发现\">检验服务发现</h4>\n<p>在浏览器输入此地址<a href=\"http://127.0.0.1:8848/nacos/v1/ns/instances?serviceName=service-provider\">http://127.0.0.1:8848/nacos/v1/ns/instances?serviceName=service-provider</a> 并点击跳转，可以看到服务节点已经成功注册到 Nacos Server。</p>\n\n<p><img src=\"https://cdn.nlark.com/lark/0/2018/png/54319/1536986288092-5cf96af9-9a26-466b-85f6-39ad1d92dfdc.png\" alt=\"查询服务\" /></p>\n",
      "desc"     : "  本文来自于我的简书：初识 Nacos(上） 学习《Spring Cloud 服务发现新选择》，转载请保留链接 ;)最近在从零接触Alibaba 开源项目Nacos,学习的是小马哥(mercyblitz)的技术周报，之前看了后忘记总结，导致也没有什么印象。所以现在决定学习一章，写一篇学习感悟，并且持续更新下去。首先这一章节主要讲得是服务发现(Service Discovery)，作为 Sp..."
} ,
  
  
  
    {
      "title"    : "一场工作，一场梦",
      "title-lower"    : "一场工作，一场梦",
      "sub-titile" : "大家好，我是来自互联网行业的一位小学生，没有很了不起的开发项目，也没有大牛那华丽的代码。",
      "sub-titile-lower" : "大家好，我是来自互联网行业的一位小学生，没有很了不起的开发项目，也没有大牛那华丽的代码。",
      "categories" : "",
      "tags"     : "生活, 面试",
      "url"      : "/zcblog/2018/09/02/job-dream/",
      "date"     : "2018-09-02 00:00:00 +0800",
      "content": "<blockquote>\n  <p>版权声明：本文为微信公众号原创文章\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzUyOTUyMDA5MQ==&amp;mid=2247483780&amp;idx=1&amp;sn=e312d3fc94ab5ded21d069501f95564f&amp;chksm=fa5e8530cd290c260bc376e834e885f618e2b078ae2f3a73cc24cd13c14f979dfdae036d8ce0&amp;token=1705064804&amp;lang=zh_CN#rd\">一场工作，一场梦。</a>转载请保留链接 ;)</p>\n</blockquote>\n\n<p> 大家好，我是来自互联网行业的一位小学生，没有很了不起的开发项目，也没有大牛那华丽的代码。而从2012年开始，我就在学校开始接触了编程，但是毕竟专业的原因，学校给我的感觉还是以偏硬件为主，什么单片机，树莓派等等。后来毕业那会参加了考研，认为大学没有经过考研的洗礼是不完整的，呵呵，现在想起来真天真。考研失败后，我踏入了互联网这个行业，比同龄的人都要晚。当初估计也和大多数同僚一样，都是奔着高收入的念头加入了这个行业。现实是毕竟你比别人都起点低，毕了业那会虽然每天面试的机会确实很多，但是大公司流程多，轮次多；小公司还好，最多两轮就来offer了。找工作也就两周的时间，就已经迫不及待的把自己给“卖”了出去，可能是当时的一个浮躁的心态和一个浮躁的天气，也有可能看到周围的同学都已经找到了工作而不甘心。虽然这不是一家互联网行业的公司，但是是一个这个世纪逐步走向人们视线的行当，生物技术行业。在里面主要职能就是负责软件开发这一块的工作，第一次也接触了C#，也逐渐了解了这个行业涉及到的IT具体方面的工作。所以当意识工作一段时间后，我觉得有必要回顾一下这几年所犯下的错误，做一做经验总结，并且给正在这个职业上奋斗的人们提出我的一些忠告。开发行业变化得很快，我无法肯定在未来十年里这些建议是否一直有效，但我相信这些话对你们是肯定有所帮助的，不管是刚开始工作的小学生还是工作几年的老司机们。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-9de096f4a8844db3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>一、要坚持使用一个开发平台，框架或语言</p>\n\n<p>在过去的几年里，我所犯的最大错误是：几乎每次我换工作时也转换了开发平台。</p>\n\n<p>我的经历从大学的嵌入式 C 编程开始，到Java 企业开发，到用C# 开发windows桌面应用，再pyhton开发自动化应用，然后用 Objective-C 写 iOS 应用程序，到用 NDK 编写 Android 库，最后到写 Android 应用。系统也从liunx换成windows，再换成OS，这无疑是这段工作经历所带来的。</p>\n\n<p>这个职业经历听起来令人敬畏，但实际上你们的雇主并不关心。雇主们并不会重点关注你拥有各式各样的开发经验，但如果他们看到你没有足够的 Android 应用开发经验，你就不可能获得一个 Android 开发的工作。</p>\n\n<p>转换平台会对你的简历产生巨大的负面影响。对于一个雇主来说，实际上他没办法通过简历来验证你是不是某一特定开发领域的专家，为你付出大量资金是否合理。</p>\n\n<p>大多数公司都不关心你的过去，技术面试会更加重要。这就是为什么很多经历尚浅但专业对口的开发者可以找到工作的原因。</p>\n\n<p>那么我们如何适应市场的变化呢？只要你不停地敲代码，你就能自然而然地适应市场，但你也需要投入一些时间在新技能上，应在空闲时抽出时间来学习新技能，而且你也要降低期望薪水。你需要后退一步，才能前进两步。</p>\n\n<p>一旦你找到一个让你觉得舒服的平台，框架或语言，就应该坚持下去。从长远看，你期望的薪水和你的工作能力都会比频繁跳槽来得更高。找到最需要你的专属技能的好公司，然后踏实地在那里工作。我知道这听起来很简单，但我花了很多年才意识到这点。</p>\n\n<p>二、不要为高工资追求管理角色</p>\n\n<p>以前我总是以为那些穿着西装，作行政决策的管理者拿的薪水高得令人神往。虽然在一些情况下这没错，但这所占比例很小，经验丰富的开发者的薪金一般会比中等管理者更好。</p>\n\n<p>在我早期的职业生涯中，我一直想进入项目管理。然而17年有了第一家工作室后，自然而然接项目中不得不面对项目管理这块，我自修了管理的相关知识，在那里我学到了很多有趣的东西。但最后我意识到这不并适合我。</p>\n\n<p>在做开发者的时候，我总是感到公司缺乏企业文化，尤其是缺少技术因素的企业文化。然而在做了管理者之后，不仅编程水平无法提高，而且在企业文化的孤独感甚至更加强烈。最终当我离开这个岗位重归技术开发时，我终于开始重新欣赏我的开发工作。</p>\n\n<p>如果你对敲代码感到厌烦了，那么转成管理岗并不是解决方案，更好的办法是横向移动，换一个部门，换一家公司，或者是旅行，甚至可以选择在国外工作来解放你的思想，在全世界有许多技术中心，那里对开发者的要求很高，这能帮助你打开眼界。</p>\n\n<p>三、休息一段时间</p>\n\n<p>我从来没有“失业”，直到去年。因为互联网寒冬，公司面临裁员问题，不得不告别职场。我感到需要休息一下来“重构”我的职业生涯，事实证明这是我所作出的最好的决定之一。</p>\n\n<p>我休息了 2 个月，我能感觉到身边的每个人都在担心我的职业生涯即将结束，但所发生的一切恰恰相反。</p>\n\n<p>经过这几年不停地跳槽和匆匆忙忙地完成各种带薪年假，我终于体会到“失业”是如此“幸福”。事实上，在我们的职业生涯中，“幸福感”确实是最应该追求的东西。</p>\n\n<p>从我的情况来说，在这一段休息时间当中，我是将自己这几年的工作项目和一些开发经验进行了总结，同时把自己Github、Gitee等开源托管平台和博客都整理了一下，其中有幸参与了阿里中间件部门Dubbo的开发，成为了committer。业余也是不断练习自己的英语口语，天天拿着手机练习发音，不拿到90分以上就是不甘心，这对自己想去外企尝试也是多了一份保障。</p>\n\n<p>重新找回工作是很容易的，比预期的要容易得多。所以，如果你觉得自己需要的话，不要害怕一个长时间的休假。简历中的一段空白对于开发者来说不会被人认为有错。</p>\n\n<p>当然，如果你读了这篇文章后，无论你是否准备来个长期休假，请一定要遵循我下面的这几条忠告：</p>\n\n<ul>\n  <li>总是编码（just do it)</li>\n</ul>\n\n<p>即使是休息也不要停止编程，在我这段休息期间，我搭了一个博客的框架，一个使用Jekyll主题的博客项目。当然博客对于开发者好比公司官网一样，这里代表了你的学习足迹和开发经验展示的平台。</p>\n\n<p>多亏了这个小项目，让我在简历和面试中有了不少谈资。我尝试了许多主题和框架，比如Hexo等等，但都感觉不是我喜欢的菜。而这个<a href=\"https://caojiele.com\">网站</a>至今都在更新使用着。</p>\n\n<p>我真希望早点开始做这件事。我们的开发工作往往是重复的，时间越长，积累的编程习惯越难以更改，也让我们自我提高的空间越来越少。</p>\n\n<p>从长远来看，拥有个人项目、阅读、写博客和参加访谈都会有助于你成为一个更好的开发人员。只要你觉得有意思，就把你的代码推到 GitHub，并把你的经验与社区分享。</p>\n\n<ul>\n  <li>成为开发者社区的一员</li>\n</ul>\n\n<p>当我还在大学的时候，我总是懒得参加各种社团和俱乐部活动。当我找到我的第一份开发工作时，最不乐意做的也是和其他开发者闲聊闲逛。</p>\n\n<p>但是我错了。同行聚会和进入开发群是很有趣的事情，是结识开发者伙伴的好地方。如果你想在这个行业里做到最好，就尽量不要消极被动。与坐在你旁边的人交谈，提供你的帮助，分享你的经验。每个人都喜欢谈论自己的经历，更何况你也许会遇到很多潜在的雇主。</p>\n\n<p>在那里你会碰到许多需要教练的初学者团体，你可以指导新手，给他们提供练手的机会，甚至赞助活动。</p>\n\n<p>当然，要学习别人的开发技巧并且勇于实践，要热情地欢迎不同意见的人讲话，勇敢地听取他们的意见。</p>\n\n<ul>\n  <li>最好不要在招聘网站上求职</li>\n</ul>\n\n<p>招聘网站的背后是复杂的人力资源流程、候选人跟踪系统、滥发个人简历和混乱的沟通，这也是许多公司找不到人才而要依靠猎头公司的几个重要原因。</p>\n\n<p>优秀的人才应该跳过这些。网络是寻找人才之路，更多地关注当地的社区消息，当有人离开一个重要的职位，当一个有意思的公司得到了融资，或者某个企业人事变动正在招聘人时，你都会获得最新的第一手消息。</p>\n\n<p>你也能通过网络社交得知哪些公司的福利比较好，各公司的大多数开发者都会真诚对待你，他们会告诉你这些公司的架构是否老旧，经理是不是人品够好，甚至工资待遇怎么样。</p>\n\n<p>如果你看到一个有意向的工作机会，首先看看你的社交网，看看你的领英用户组或脉脉朋友圈，是否有人已经在那里工作了，或者问他们是否认识某些人。然后直接与他们联系，与那个公司的 CTO、招聘经理或其他开发人员直接交谈。</p>\n\n<p>猎头是好的，但不要依赖他们。他们的任务只是帮助企业填上一个职位的空缺，因为他们并不为你工作。如果他们推荐的职位的确非常适合你所寻找的工作，那么你就去做，如果觉得不适合，那么就告诉他们：谢谢，我不去。</p>\n\n<ul>\n  <li>正确的对待的离职</li>\n</ul>\n\n<p>离职前一定要找好下家吗？我相信这是所有行业的工作者在即将跳槽前所面临的问题。正常来说，离职前是要找下家的。离职无非分为两种，一种主动离职，另一种被离职；后者不说，找下家那是必须，公司也会给你时间找下家，我也相信离职前找到下家无非是多数的，而裸辞者可能会处于道德上制高点，好比分手原因说：“我不是因为别的女孩，就是觉得我们之间没有感觉了。”你们看，对于这些裸辞者，人家不是得陇望蜀、骑驴找马，企业会想，这是个好员工呀。但实际上在当今社会上，这样高风亮节的人已经少之又少，就像你是HR一样，别人来应聘说我是裸辞，你会相信吗？无疑心里是打了个问号的。</p>\n\n<p>作为这个社会的建设者，你在裸辞时还是要为自己的高风亮节承担一些不必要的“麻烦”，例如：</p>\n\n<p>1、求职时的困难</p>\n\n<p>裸辞后会给你的履历上出现“断档”的现象，同时也会增加你面试的难度，面试官会质疑，为什么你还没找到工作就辞职了？这里面有足够的想象空间，是不是因为工作态度，缺乏责任心？还是身体或心理上的原因？等等一系列的疑问会在面试官的脑袋里面放电影一样出现。社招时，HR为了避免招聘风险，会给工作断档的候选人画个问号，假如接下来还有别的疑点，会被直接pass调，因为这样招聘的风险会被放大很多，HR没有足够精力和成本去做背景调查，找个靠谱的人会省事很多。</p>\n\n<p>2、辞职后的处境</p>\n\n<p>找一份心仪的工作没那么容易，也许 3 个月，或者半年。要不然降低你的预期找个差强人意的工作，要不接着等，希望这段时间希望你不要有太大的经济压力和健康问题。</p>\n\n<p>持续一段时间面试却找不到合适的职位，加上缺少必要的社交机会，可能会对自己能力产生怀疑，自我效能感降低，慢慢产生抑郁性情绪，持续下去还会导致一些慢性病影响身体健康。这个不是危言耸听。</p>\n\n<p>如果自己意志力坚定还好。可是，父母或爱人也会有压力，担心你、心疼你，考虑过他们的感受没有？</p>\n\n<p>3、或受影响的信用</p>\n\n<p>根据目前政策，还没有实质性的信用影响，只有风险。工资流水往往是银行、使馆最为认可的收入证明方式，稳定的工薪族比无固定职业者更容易申请到贷款或签证。</p>\n\n<p>虽然中国人民银行的征信体系并不记录你的工作信息，但在一些贷款等需要社会信用评价时，经常断档可能给人不稳定的印象。</p>\n\n<p>所以做大部分人都做的事情，即使不符合你的价值观，但是会显得比较正常。坚持自己的原则，可能会脱离了群体，显得不太靠谱。</p>\n\n<p>反观骑驴找马的人：</p>\n\n<p>虽然请病假面试，最后说离职就离职，刚听到离职信息公司老板或 HR 会感到背叛，但大多数人都这样啊，在统计学上人家是正态分布的中间 95%的人，是正常值，也就是「靠谱」。</p>\n\n<p>所以大众不会谴责他，你为什么请假去面试，你太过分了！</p>\n",
      "desc"     : "  版权声明：本文为微信公众号原创文章一场工作，一场梦。转载请保留链接 ;) 大家好，我是来自互联网行业的一位小学生，没有很了不起的开发项目，也没有大牛那华丽的代码。而从2012年开始，我就在学校开始接触了编程，但是毕竟专业的原因，学校给我的感觉还是以偏硬件为主，什么单片机，树莓派等等。后来毕业那会参加了考研，认为大学没有经过考研的洗礼是不完整的，呵呵，现在想起来真天真。考研失败后，我踏入了..."
} ,
  
  
  
    {
      "title"    : "阿里云道哥自述：重回阿里的29个月",
      "title-lower"    : "阿里云道哥自述：重回阿里的29个月",
      "sub-titile" : "Back to Alibaba&#39;s 29 months",
      "sub-titile-lower" : "back to alibaba&#39;s 29 months",
      "categories" : "",
      "tags"     : "Alibaba, 生活",
      "url"      : "/zcblog/2018/09/02/back-to-alibaba/",
      "date"     : "2018-09-02 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的微信公众号：闪兔网络工作室，作者为阿里云首席安全研究员吴翰清。 <a href=\"https://mp.weixin.qq.com/s/cMJYnQxfmSzrwGq2xICCnQ\">阿里云道哥自述：重回阿里的29个月</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p><img src=\"https://raw.githubusercontent.com/caojiele/caojiele.github.io/master/img/in-post/2018.09/02/post-avator-dao.jpg\" alt=\"吴翰清\" /></p>\n\n<blockquote>\n  <p>无欲则刚</p>\n</blockquote>\n\n<p>回到阿里已经29个月了，算上此前在阿里的七年时间，已经为这家公司服役了将近十年。这十年的时光，加上2012年到2014年期间参与到安全宝创业的那两年，组成了迄今为止我的职业生涯。这些年经历的所有事情，吃过的所有苦头，所有的酸甜苦辣，都像刻刀一样雕琢了我的生命。过去的2016年，对我来说是非常难忘的一年，也是非常重要的一年。</p>\n\n<p>在十年前，我看着心中偶像的背影成长，现在，我也成为了一些人心中的背影。有些人羡慕我年纪轻轻就得到了很多，但我并不觉得自己和以前有什么不一样。成为别人心中的背影并不是我喜欢的，因为这个时代太可怕了，发条朋友圈都会被人截图拿去变成新闻头条，这让我变得比以往更加孤独。人们总爱随意评价他人，哪怕他们不了解的人和事，一点点的道听途说就可以做出长篇大论。但生活在这个互联网时代，也许我们无法回避被人评价。我们应该多一点讨论，少一点评价，尤其是不负责任的评价。这也是我越来越少写文章的原因之一，无论是写出来被人评价，或是要求我点评时事，都是我不愿看到的。评价他人我几乎看不到任何的益处，而有益的讨论却往往淹没在繁杂的噪音中。</p>\n\n<p>所以近两年来我很少看评论文章。很多媒体和大V写的东西不是水平有限就是胡扯，因为他们要么缺乏深入了解的机会，要么缺乏深入了解的能力，或者两者皆有，所以看了要么浪费时间，要么反而有害。我更多关注的是原始的事实本身，或者是某些当事人的直接访谈。虽然一个公开访谈有时候也不会讲真话，但至少对还原实际情况会有帮助，比二手资料要好一些。自己有所得就好。</p>\n\n<p>这些年的经历让我愈发的认识到这个社会何以浮躁，也看清了我过去一些浮躁的地方。现在的人们普遍抱着投机心理在做事情，这已经成为一个社会问题。大多数人期望能够通过较少的付出获得较多的回报，期望能够找到捷径，或者是发现一些别人没有发现的机会从而获得成功。比较典型的现象就是不断换工作以谋求到更好的职位和更高的薪水，或者是期望通过创业改变自己的命运。</p>\n\n<p>人们总是混淆了欲望和理想。</p>\n\n<p>我的体会是，这世上根本没有什么捷径可走，创业也根本不是功成名就的最佳途径。四年前，我是怀揣着「达则兼济天下」的情怀离开阿里，加入安全宝创业的，我希望我在安全领域的经验能够帮助更多的企业。但是两年创业维艰，最后安全宝分别卖给了百度和阿里——创始人马杰带着大部分人去了百度，我带着一小部分人回了阿里。回首四年前的我，更多的是纸上谈兵。这几年踩过的坑、吃过的苦头，让我伤痕累累，但却成就了今天的我。这个世界相对还是公平的，你所得到的，一定和你付出的一样多，只是人们往往只看到你所得到的，而只有你自己才能看到你所付出的。</p>\n\n<p>在很多外人看来创业后被巨头以一个不错的价码收购已经足够成功，但是在我看来，一个创业公司没有完成它创立之初的使命和初心，半途而废，就远远谈不上成功。也因此，我们依然继续行走在这条道路上，马杰在百度，我在阿里云，我们分别坚持着当初想去做的事情，和以前并无二致，我们依然走在完成初心的道路上，只是换了一个形式。</p>\n\n<p>所以什么是创业？不是说有一家公司才叫创业，现在注册一家公司的成本很低，但那不会带来任何本质的改变。我理解的创业，就是本来没有的东西，你做出来了，就是创业。</p>\n\n<p>在四年前，我会狂妄的宣称要去颠覆世界，现在看来，世界根本不需要被颠覆，也很难在短时间内颠覆一个行业或一个市场。世界需要的是变得更美好，这是创业公司应该追求的。</p>\n\n<p>在去年提交给公司的一份内部报告里，我曾经写过这样一段话：</p>\n\n<p>我相信未来我们会生活在一个数据被时时监控的时代，被企业出于商业目的监控，被黑客出于牟利目的监控。这就像我们每个人都赤身露体行走在光天化日之下一样，想想就会让人不舒服。如果没有合理的法律和有效的技术保护手段，这将是最糟糕的时代。</p>\n\n<p>但这个时代终将到来，不管我们是否喜欢它，只能做好迎接它的准备，不适者将被淘汰。我们能做的，是尽自己的微薄之力，按照我们的想法，将这个即将到来的时代塑造得更加美好。</p>\n\n<p>世界为什么会变得更美好？因为世界的未来是我们定义的。如果看到的未来错了怎么办？最保险的方式就是自己去做出来，这样就不会出差错了。创业者与科幻小说家唯一的区别是，创业者去做了。这就是创业的全部含义。</p>\n\n<p>但永远不要低估这个过程中的困难。创业者要面临一万个困难，解决完这一万个困难后，还有一万个新的困难在前面等着，没有对成功的坚定信仰是不可能走下去的。很多人在走到第十个困难的时候就放弃了，然后把放弃的理由推到了第十一个困难上。</p>\n\n<p>同样的，一件事情如果浅尝辄止，往往也是白干。一件事情如果只做个两三年，可能就是来搭搭顺风车，享受一下别人创造的成果，给履历里镀点金，成为自己上升的阶梯。一件事情如果不坚持做个八年、十年，可能很难真正做出点什么东西。一个人如果总是两三年就换件事情做，在我看来就是浪费时间。哪怕薪水会不断的涨，头衔在不断上升，但最后终将一事无成，因为所有的积累，都变成半途而废。</p>\n\n<blockquote>\n  <p>深度决定成败</p>\n</blockquote>\n\n<p>真正想做好一件事情，出发点要很纯粹，这样才能做深，也只有做深，才能真正做到不一样。很多评论文章里会提到个观点，叫「产品的细节决定了产品的成败」，很多人自己不做产品，听着觉得好像有点道理，就到处传播这种观点。我觉得这就是典型的胡扯。细节根本不会决定产品的成败，甚至很多成功产品在早期的时候产品体验和各种细节都是一塌糊涂。准确来讲，是深度决定了产品的成败，包括了技术的深度、对行业对客户理解的深度等等。这些东西最后可能有一小部分会反应在一些产品细节上，但细节永远只是表面功夫，真正重要的是对细节背后的理解。人云亦云之害亦在于此。</p>\n\n<p>我们的「游戏盾」产品的发展历程，充分的说明了这一点。「游戏盾」产品的前身诞生在2015年年初，当时我们发现有一家做直播的客户自创了通过「快速切换」的方式来缓解DDoS攻击的解决方案，也在同一时间我们观察到游戏行业有一个客户也采用类似的思路，用VPN的架构完成了一个实现。这是一种不同于囤积带宽的防御方式，理论上可以只需要很小的带宽就能防御无限大的DDoS攻击。我们认为这种创新方案极具潜力，但客户自己实现的解决方案都有一些缺陷，由云平台来实现则具备先天优势，能够做到效率最优。于是我们把客户请到公司来进行交流，并请他参与到我们产品的设计与研发过程中。</p>\n\n<p>在2015年上半年，我制定了1号项目，内部代号「云层」，就是为了完成这个构想。到了2015年下半年，产品研发初步完成，我将它命名为「弹性安全网络」，并正式对外发布。但是运营一段时间后，我们发现客户比较难以理解它的作用和理念，同时在真实的场景里，也存在各种各样的瑕疵，导致没能真正解决客户的问题。最致命的是，我发现它在商业模式的设计上存在重大缺陷，继续运营下去我们会破产。于是在产品发布三个月后，在2015年年底，我正式叫停了这个项目，产品下线，研发资源重新释放出来投到别的产品上，第一次尝试以失败告终。</p>\n\n<p>但事情并没有结束，在我叫停项目并释放研发资源后，项目组有两三位同学不甘心就这么放弃，在没有任何支持的情况下利用业余时间继续进行着云层的研发工作，并自己去寻找天使客户，寻求真实的客户场景。</p>\n\n<p>转机出现在2016年4月份，一家做棋牌游戏的叫闲徕互娱的公司成为了云层的首批天使客户。这家公司成立后业务发展很迅速，就被黑色产业盯上，发起了疯狂的攻击。很多初创公司往往就倒在这种不正当的行业竞争当中，再也没有机会长大。在这种情况下，我们的技术人员和闲徕一起决定，试试云层。一开始，云层确实马上起到了立竿见影的作用，但是随着对抗的升级，黑客也逐渐摸到了我们的规律，攻击开始出现变化。在那段时间，我们每天都要进行快速响应，研发的同学经常要半夜爬起来更新程序，这场仗打得异常艰苦。</p>\n\n<p>但一切努力没有白费，通过几次大版本的升级，这个系统逐渐完善。一次次的真实对抗，有效的锤炼了产品，认识到了很多以前根本没有想到过的问题，闲徕的技术团队在这个过程中也积累了丰富的经验，到了11月，这家成立仅仅8个月的公司，被昆仑万维以20亿的价格收购，创造了一个神话。我们的云层也正式改名为「游戏盾」，在游戏行业里打开了局面。</p>\n\n<p>截止到今天，我们的「游戏盾」产品依然没有正式发布，尚在邀请内测阶段，但我们对它的未来充满了信心，并且我们也充分认识到它的潜力不仅仅只是解决游戏行业的问题，而是会帮助我们真正的构建下一代的安全网络，回归到真正的「弹性安全网络」。如果没有闲徕互娱的信任，不会锤炼出我们「游戏盾」产品的深度，而缺乏了这样的深度，闲徕互娱很可能会倒在6月，看不到11月的曙光。我们与客户共同成长。</p>\n\n<p>而在这整个过程中，最让我感动的，是项目组的那两三位同学，在我叫停了项目之后，依然保持乐观的心态，重整旗鼓，最终取得了成功。他们坐在我座位的不远处，我每天都能听到他们讨论问题时宏亮的声音，我从没有听到过他们的一丝抱怨，我看到的永远是他们冲在一线解决客户问题的身影。这种乐观的心态，这种对荣辱毫不计较的精神，才是真正的创业者精神。</p>\n\n<p>对创业初心的坚持，就是对使命的坚持。使命一定是解决了他人的问题，而不是解决了自己的问题。解决他人的问题就是「利他」，商业的本质不是交换，而是「利他」。一定是在利他的基础上，才能产生交换的需求。这就是为什么多数成功公司的企业文化里，都会强调「利他」的原因。需要有对应的企业文化，来催生对应的组织机制，以完成相应的商业目标，这是一环扣一环的。很多管理者从书上借鉴了一些做法，但并没有理解这其中的深层次联系。如果理解了企业的根本是客户价值，客户价值的本质是利他，从而鼓励所有员工成为「利他」的人，企业文化才不会流于形式和口号，才能真正成为基业长青的基石。</p>\n\n<blockquote>\n  <p>对社会的责任</p>\n</blockquote>\n\n<p>「利他」的事情做的多了，就解决了多数人的问题，进而就解决了一个社会问题。所以商业公司发展壮大后，都会开始谈社会责任。</p>\n\n<p>目前中国有超过37%的网站部署在阿里云上，而我团队所负责的安全，则要保护这么多企业的业务和数据，顿时感到肩上责任重大。</p>\n\n<p>这两年，阿里云云盾几乎已经成了云安全的代名词。一位朋友跟我说，客户谈到云安全，基本上都会提到云盾，因为现在几乎找不到什么别的云安全解决方案。我认为这是对我放弃写公众号后，专注在产品上的最大肯定。回想2015年1月推出第一个商业产品时，还没有几个人听说过云盾。那一年我在公司内部做分享，我很自信的告诉大家几年后他们一定会对云盾的名字如雷贯耳。</p>\n\n<p>这29个月，我在阿里云完成了云盾的商业化。在过去的2016年，我们仅用3个月时间就完成了2015年的全年营收，增长超过400%，而2017年我们将保持这个增速继续发展下去。坐火箭一样的速度。我们用两年时间走完了中国安全行业最大的上市公司花了十年走完的路，而我们的人数不到他们的十分之一。</p>\n\n<p>这29个月里，我们曾成功防御了当时互联网历史上最大的DDoS攻击，瞬时攻击达到了453.8Gbps；目前我们每天都会防御中国超过一半的大流量DDoS攻击；我们顺利的完成了G20峰会的安全保障工作，浙江政府的各级网站因此建立起了对云计算的信心；我们还连续两年夺得了安全媒体Freebuf颁发的「年度安全云」大奖。</p>\n\n<p>这29个月里，我们引领了整个云安全的方向，我们的前面没有他人，我们是开拓者。在国内的云计算市场，我们成功的重塑了云计算市场的行业标准 – 做云计算必须带有安全解决方案。云盾的各产品成为云计算的标配被友商争相模仿，甚至连定价都被直接复制。在国际方面，云计算的领头羊AWS在云安全方面陆续推出的inspector、WAF、DDoS防护（AWS Shield）等都是在一一对齐云盾的产品线。</p>\n\n<p>在2015年12月，阿里云上的一家游戏客户遭受了超大流量攻击，性质特别恶劣。我们对攻击事件进行了深入的分析，发现是全球最大的DDoS攻击犯罪团伙所为，该团伙臭名昭著，像笼罩在互联网上的一朵乌云。客户决定走司法途径。在2016年2月到8月，公安部历时半年，在全国范围内以及境外了抓捕了数十人，重创了该团伙，有效的震慑了黑色产业。</p>\n\n<p>据我们观测，在2016年9月，公安部实施打击的前后，全国的DDoS攻击总数下降了20%；据国外某大型基础设施提供商观察，全球伪随机子域名DDoS攻击（该团伙最常用的攻击方式之一）在5-8月期间陡降为0，与公安部的专案打击时间完全吻合；据Akamai 2016 Q3互联网安全状态报告显示，全球范围内来自中国的DDoS攻击流量比例下降了56%，对全球DDoS总攻击次数有显著影响，导致本季度全球总攻击下降8%。</p>\n\n<p>在我看来，阿里的安全未来对社会的贡献，不会亚于淘宝、天猫的零售业务、蚂蚁的金融业务对社会的贡献。因为这是时代的需要。随着互联网成为基础设施，数据在线后安全问题愈发突出。习大大也指出：「没有网络安全就没有国家安全。」国家对互联网的依赖程度越深，安全就越重要。</p>\n\n<blockquote>\n  <p>对团队的自信</p>\n</blockquote>\n\n<p>在这背后，需要一支能打仗的团队。我一直坚定的认为我所在的团队，放到整个阿里也是最优秀的团队。我判断团队是否优秀的标准和其他人不太一样，不是看有多少高级别的人，有多少光鲜履历的人，有多少经验丰富的人，而是优先看所有人对于使命的坚持有多强烈。在遇到逆境、遇到挫折、遭受委屈、不公待遇时是否依旧能坚持，初心不改。这样的团队将会很有韧劲，才能打逆风仗。因为创业不可能永远一帆风顺，逆风是常态，而那些冲着光鲜职位来的人，冲着晋升机会来的人，往往也是逆风时第一个抛弃团队的人。有韧劲的团队，要有顶着3.25的绩效（3.25在阿里的绩效考核里是不及格）坚持做正确事情的决心。这与绩效考评无关，只与我们自己内心的坚守有关，只与我们对这个社会的贡献有关。</p>\n\n<p>我们要面临的环境往往非常恶劣，什么都缺。但什么都缺才是创业，如果什么都不缺，那是享受。所以我们招人的时候，如果招来的人来了后嫌弃这没有、那没有，要资源没资源、要钱没钱，似乎就没法做事情了，这种人很难成为创业者。如果招来的人，一看什么都没有，不沮丧却很兴奋，从困难中看到了机会，而不是从机会中看到了困难，那么这种人就是我们需要的人。</p>\n\n<p>在人才选拔上我有两个最基本的要求：勤于思考，言出必践。我思考了很久后，想明白了这两点是所有岗位都有共性的基本要求。言出必践已经是极高的要求了，因为这意味着任何意外都不应该是失败的理由，所以想要拿到结果，一定要思虑周全，并有相应的执行力。从一些日常琐碎的小事就能观察出一个人对于承诺的认真程度，比如不能守时的人，也不会是一个很重承诺的人。如果说好的事情总是做不到，那么这种人多半是坑老板的人，不可用。一个不重承诺的人，哪怕再有才华，也是夸夸其谈，用之甚至有害，因为团队其他人会觉得不公平。</p>\n\n<p>一个团队里除了要有执行力强的人，还要有聪明的人。但聪明其实不是很好描述，过于主观。所以我认为我们真正需要的是勤于思考的人。对我们来说，时间比钱贵，只有真正肯花时间在一件事情上，才是真正的重视，才是真正的认真。我认为最应该花时间的事情就是思考。思考绝对不是小聪明，不是想着法偷懒或蒙混过关，而是思考如何正确的、高效的完成目标。很多时候工作做得不好，不是执行没到位，而是思考没到位。我们有很多需要思考的东西，思考事情、思考人，思考未来、思考风险、思考机会，思考谁是合作伙伴、谁是潜在的敌人。思考的深度，决定了结局。</p>\n\n<p>我很喜欢雷军说过的一句话：「不要用战术上的勤奋，掩盖战略上的懒惰。」，我稍加修改一下会更贴切：「不要用执行上的勤奋，掩盖思考上的懒惰。」。</p>\n\n<p>我们总是在不断犯错中前进，没有错误，就不会有进步。但犯错一定会带来伤害，或伤了人，或伤了业务，但只要没死，总能再生。我们不论成败，只论生死。</p>\n\n<p>这个过程中也并不是所有人都能坚持到最后，在中途也会有人熬不住而退出，因为确实苦。在2016年我们大获成功的WAF产品（WAF是Web应用防火墙的简称）身上发生的事情，可以充分反应出很多问题。也同样是我在提交给公司的内部报告上，我记录了这个产品经历的反复：</p>\n\n<p>很多创新业务，在最早的时候都是如此的窘迫，没有资源，借过来，简陋一点，也能开张。只要客户价值明显，就能生存下去。</p>\n\n<p>但也有客户价值不明显，经历过反复的。比如WAF产品，在2012年的时候，我离开公司前立项做的这个产品，我走后换了一位同事接手。等我2014年回到公司时，这个产品半死不活，版本有三四个，架构还各不相同，稳定性和扩展性都有问题，CDN团队用了我们的产品后还搞出过故障，压力很大。回来后我快刀斩乱麻的砍掉了几个版本，然后对主版本进行重构解决稳定性的问题，整个研发团队憋着一口气一定要打个翻身仗。经过了大半年的努力，整个软件版本终于变得稳定，这才有在2016年4月份开始重新商业化的机会，而回过头来看，前后已经过去了四年，产品形态也已经变化了三四次，经历了上线到下线，到重构，到再次重新上线，相当于凤凰涅磐了一次。在今年，WAF产品是我们的爆款产品，增长率超过了DDoS高防去年同期，是下一个明星产品。</p>\n\n<p>但和书上写的故事不同的是，当年憋着那口气要打个翻身仗，洗刷耻辱的那个研发团队，在重构完成后，多数人却陆续都离开了公司，没有能够坚持到WAF摘取商业化成功果实的那天。也许这才是真实的现实世界。</p>\n\n<p>现在WAF的研发团队还是那个团队，但人已经几乎全是新的面孔。部队打残了，只要番号还在，传承就还在，就可以重建，收拾残部，从头再战。</p>\n\n<p>但我依然想感谢所有离开了团队的人，不管你们的离开，是开心的还是沮丧的，若没有你们曾经的付出，不会成就今天的云盾。也要感谢所有目前依然不离不弃的人，因为没有你们今天的努力，不会成就云盾的明天。所有人都看到了WAF今天的成功，但我们自己不要忘记过去的那些人、那些事，因为这是我们最宝贵的财富。</p>\n\n<blockquote>\n  <p>对客户的敬畏</p>\n</blockquote>\n\n<p>在这29个月里，我还经历了两次3.25（绩效考评不及格），两次都是因为故障。在业务高速增长的同时，我们付出了惨痛的学费。其中在2015年9月1号发生的故障（我们内部代号称为901），是阿里云历史上最大的一次故障。故障发生在午休过后，突如其来的雪片纷飞般的报警一下子让我们懵了，大量客户的业务发生了中断。</p>\n\n<p>一个给学校做报名系统的客户联系了我，故障直接造成了他们业务的中断，因为那天刚好是学校开学，很多学生都没办法报到了。而那时我正和团队在紧张的进行着一项项故障恢复工作。国家各级监管部门都纷纷发函来询问故障原因，并要求我们提交故障报告。故障后第二天一大早进行的复盘会，全集团所有与基础设施和云计算相关的最高级别的技术专家几乎全部到场，塞满了整个屋子，所有人都板着脸。会议进行了两个小时，气氛很压抑。一周后，我到公司的总裁月会上，向集团CEO逍遥子、以及各事业群的总裁们汇报整个故障过程。这是我第一次参加集团的总裁会，可惜是去讲令人如此沮丧的事情。</p>\n\n<p>故障发生后，我深感内疚，所以决定在阿里云标准的赔付范围之外，再给予所有受到故障影响的客户单独的云盾产品赔付。故障解决之后，我还发动云盾团队所有同事和我一起为客户手写道歉信。可惜由于人手有限，因此只有部分客户能收到我们的信件。但收到信件的客户都给了我们一些正面的反馈，有的人还把信件的照片贴在了朋友圈里。</p>\n\n<p>事后，组织发展部的十三姨问我当时是不是压力很大，我想了想，回答她说，当时的想法是，在那时候没有人比我更适合处理这个事情，所以我必须顶上去，不能有半步退缩。至于之后的事情，没想那么多。</p>\n\n<p>这次故障后，整个阿里云从上到下进行了很大的反思，也更让我们刻骨铭心的体会到云计算作为基础设施对客户来说意味着身家性命，这和阿里以往的业务是很不一样的。我们需要时刻心怀敬畏。我们把稳定性建设，作为了研发团队的永久性战略目标。我也把每年的9月1号，定为了云盾日，希望团队能够好好反思历史上遭遇的所有挫折。也希望能够好好的感恩和回馈那些在危难时刻对我们依旧不离不弃的客户，没有这些客户与我们一起共同成长，我们也无法走下去，走得远。</p>\n\n<blockquote>\n  <p>数据化是未来</p>\n</blockquote>\n\n<p>这29个月里，我还学到了数据化的重要性。阿里是一家人工智能驱动的数据化公司，我们认为互联网公司最重要的资产就是数据。未来所有的产品改进，都应该是通过数据化驱动，而非功能驱动。如果一家公司的竞争力还依旧停留在硬件、软件的功能上，那么这是上一个时代的公司，没有什么前途。以现在的计算机编码发展水平，只要你能想得到，没有什么功能是写不出来的，缺的只是时间和投入而已。面向未来的公司一定是数据驱动的，只有数据驱动才能像滚雪球一样将竞争力做厚，才能在最短的时间内完成高效的规模化，建立起更高的门槛和壁垒。淘宝的搜索和商品推荐，取得了商业上的巨大成功，背后依赖的正是每天海量数据的计算。大约在2013年左右，淘宝用于后台数据计算的服务器数量，增幅超过了前台用于事务处理的服务器数量，这是一个里程碑，标志着阿里正式成为了一家数据化公司。</p>\n\n<p>所以我们看一家公司是不是数据公司，有一个简单的判断标准，看他有多少台服务器用作了数据计算。一些传统做硬件设备的公司，和一些销售本地化软件的公司，几乎没有任何数据分析的需求，自然也谈不上是数据公司。还有一些公司，数据很多，但是没有计算的能力，只能存放在存储里，用于计算的服务器数量也很少，这也不是数据公司。</p>\n\n<p>在云盾的态势感知产品中，阿里云的计算集群每天会调用超过数十万个核（我写这篇文章用的Macbook Air的CPU有两个核）用于海量数据的计算，来分析每一个客户遇到的安全问题。这些数据来自于客户在开通态势感知时授权云盾出于安全的目的进行计算。在这么大的计算量下，很多问题都是没有答案的，需要我们摸着石头过河。阿里云在安全态势感知上的挑战，是替整个安全行业在探索大数据的边界和瓶颈。</p>\n\n<p>态势感知这个产品的来历也颇有意思，这个概念最早是出现在军事领域，但是欧美的安全行业里几乎没有这个概念，可是最近一年在中国变得非常热门。</p>\n\n<p>2015年4月的时候，春暖花开，在西溪湿地的一个茶馆里，阿里云安全的核心管理团队开了一个为期两天的战略会，讨论未来的规划。当时参加这个会议的人还包括了肖力、云舒、老聂、方兴、王伟等人。我们当时觉得整个安全行业都出了比较大的问题，几乎没有厂商对客户的安全负责了，而且大多数安全产品用了后还是不能解决安全问题。我们在会上冥思苦想，这中间缺少的那一环到底是什么？最后憋出来四个字，就是「态势感知」。</p>\n\n<p>我们认为只有用大数据的手段先解决看问题的全面性，才有可能真正解决安全问题，很多安全解决方案的失败，不是在于防护做得不好，而是在于根本没看见敌人，防护就无从谈起。因为过去缺少对原始数据的计算能力，只靠单机设备想全面的看各个纬度的数据从而分析出威胁几乎是不可能的事情。我们当时曾斟酌过要不要用「威胁感知」来表达我们的想法，最后是方兴提出建议，认为威胁感知还是不够全面，用「态势」会更合适一些。最后我领了个任务，要去把纸上的四个字「态势感知」做出来。那时候安全行业还没有人提「态势感知」这个概念。</p>\n\n<p>到了2015年7月份，在北京举行的阿里安全峰会上，我正式做了一次产品发布，用的标题是「安全的未来是态势感知」，阐述了我们的理念。在此之后，国内的安全厂商忽然都开始做态势感知了。直到2016年4月19号，习大大在网络安全和信息化工作座谈会上，提出了「要树立正确的网络安全观，加快构建关键信息基础设施安全保障体系，全天候全方位感知网络安全态势，增强网络安全防御能力和威慑能力。」。于是乎，4.19讲话后，各种各样的态势感知系统如雨后春笋般冒了出来，很多厂商直接把过去的老产品比如SIEM、SOC改了个名字叫态势感知就拿出来卖。</p>\n\n<p>到了2016年12月27日，这段话直接写进了国务院全文刊发的《“十三五”国家信息化规划》里，同时公安部也在规划中的下一代等级保护标准里写入了态势感知。态势感知即将成为合规性需求。</p>\n\n<p>其实到今天为止，我都不知道蝴蝶的翅膀是怎么扇起来的。作为最早实践态势感知的人，我也至今还在探索什么样的系统、什么样的能力才称得上是态势感知，什么样的客户才需要态势感知。可是忽然一夜之间，行业里多出来了好多态势感知的专家，这让我很困惑。</p>\n\n<p>态势感知将承载大数据在安全行业落地的使命，但是需要数据化的却不仅仅是态势感知。在2017年，云盾的产品会全面拥抱数据化，这也是我们区别于其他厂商解决方案的最大不同。比如云盾的WAF将不再是一个软件或硬件，也不是一个基于转发或流量过滤的集群，而是一个旁挂了大数据计算集群的WAF。我们将带着阿里云数十万个核的大数据计算集群和其他厂商的单机设备竞争，这是两个时代的竞争。我也期待着云盾用于后台计算的服务器数量，超过用于前台事务处理的服务器数量的那天尽快到来。</p>\n\n<blockquote>\n  <p>总结</p>\n</blockquote>\n\n<p>这29个月里的每一天，对我来说，都过得非常的充实。我的性格变得比以往更加的锋利，正如我的网名「刺」一样，我比以往任何时候都更加带刺，也自然会伤到很多人。会不会得罪人永远不是我优先考虑的，因为根本没有时间去顾及别人是不是开心，时间紧迫，要做的事情却很多、很难。我常自嘲在团队内部我就像一个暴君，也因此我需要感谢所有能忍受我脾气的同事。创业不是一将功成万骨枯，创业是一个团队的成功。我很高兴我在一个值得信赖的团队，共同奋斗，建设更安全的互联网。</p>\n",
      "desc"     : "  本文来自于我的微信公众号：闪兔网络工作室，作者为阿里云首席安全研究员吴翰清。 阿里云道哥自述：重回阿里的29个月，转载请保留链接 ;)  无欲则刚回到阿里已经29个月了，算上此前在阿里的七年时间，已经为这家公司服役了将近十年。这十年的时光，加上2012年到2014年期间参与到安全宝创业的那两年，组成了迄今为止我的职业生涯。这些年经历的所有事情，吃过的所有苦头，所有的酸甜苦辣，都像刻刀一样..."
} ,
  
  
  
    {
      "title"    : "真正理解Mysql的四种事务隔离级别",
      "title-lower"    : "真正理解mysql的四种事务隔离级别",
      "sub-titile" : "Understand the Mysql four transaction isolation level",
      "sub-titile-lower" : "understand the mysql four transaction isolation level",
      "categories" : "",
      "tags"     : "数据库, Mysql, 事务隔离级别",
      "url"      : "/zcblog/2018/04/09/mysql-transaction-isolation-level/",
      "date"     : "2018-04-09 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的简书：<a href=\"https://www.jianshu.com/p/75187e19faf2\">真正理解Mysql的四种事务隔离级别</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<h3 id=\"什么是事务\"><strong>什么是事务</strong></h3>\n\n<p>事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。</p>\n\n<p>事务的结束有两种，当事务中的所以步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤消撤消之前到事务开始时的所以操作。</p>\n\n<p><strong>事务的 ACID</strong></p>\n\n<p>事务具有四个特征：原子性（ Atomicity ）、一致性（ Consistency ）、隔离性（ Isolation ）和持续性（ Durability）。这四个特性简称为 ACID 特性。</p>\n\n<ul>\n  <li>\n    <p>原子性：事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做。</p>\n  </li>\n  <li>\n    <p>一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。</p>\n  </li>\n  <li>隔离性。一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li>\n  <li>持续性。也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</li>\n</ul>\n\n<p><strong>Mysql的四种隔离级别</strong></p>\n\n<p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>\n\n<p><strong>Read Uncommitted（读取未提交内容）</strong></p>\n\n<p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p>\n\n<p><strong>Read Committed（读取提交内容）</strong></p>\n\n<p>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p>\n\n<p><strong>Repeatable Read（可重读）</strong></p>\n\n<p>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</p>\n\n<p><strong>Serializable（可串行化）</strong></p>\n\n<p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n\n<p>这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：</p>\n\n<p>脏读(Drity Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。</p>\n\n<p>不可重复读(Non-repeatable read)：在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</p>\n\n<p>幻读(Phantom Read):在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</p>\n\n<p>在MySQL中，实现了这四种隔离级别，分别有可能产生问题如下所示：</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-569e54f12a1edf4a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<h3 id=\"测试mysql的隔离级别\"><strong>测试Mysql的隔离级别</strong></h3>\n\n<p>下面，将利用MySQL的客户端程序，我们分别来测试一下这几种隔离级别。</p>\n\n<p>测试数据库为demo，表为test；表结构：</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-baf5617e74333630?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>两个命令行客户端分别为A，B；不断改变A的隔离级别，在B端修改数据。</p>\n\n<p><strong>（一）、将A的隔离级别设置为read uncommitted(未提交读)</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-395ff493be112c17?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：启动事务，此时数据为初始状态</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-314eabcddaec137f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>B：启动事务，更新数据，但不提交</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-3a20776e2b6bc93c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：再次读取数据，发现数据已经被修改了，这就是所谓的“脏读”</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-7b06bd13beb83519?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>B：回滚事务</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-5677c85f96467cbe?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：再次读数据，发现数据变回初始状态</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-d3c9d567815d3de0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>经过上面的实验可以得出结论，事务B更新了一条记录，但是没有提交，此时事务A可以查询出未提交记录。造成脏读现象。未提交读是最低的隔离级别。</p>\n\n<p><strong>（二）、将客户端A的事务隔离级别设置为read committed(已提交读)</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-c3e6091f1a2e3852?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：启动事务，此时数据为初始状态</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-14304b43d327ef25?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>B：启动事务，更新数据，但不提交</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-79742468da1544b7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：再次读数据，发现数据未被修改</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-0acda3f4c2fc1c8b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>B：提交事务</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-53cdbd020c97b591?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：再次读取数据，发现数据已发生变化，说明B提交的修改被事务中的A读到了，这就是所谓的“不可重复读”</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-9816682a9994220d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>经过上面的实验可以得出结论，已提交读隔离级别解决了脏读的问题，但是出现了不可重复读的问题，即事务A在两次查询的数据不一致，因为在两次查询之间事务B更新了一条数据。已提交读只允许读取已提交的记录，但不要求可重复读。</p>\n\n<p><strong>(三)、将A的隔离级别设置为repeatable read(可重复读)</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-2f33fb3c33595266?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：启动事务，此时数据为初始状态</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-aac812c9c69167e5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>B：启动事务，更新数据，但不提交</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-1c39a730013fa813?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：再次读取数据，发现数据未被修改</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-f312c27b945bb2a7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>B：提交事务</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-b77ca148dfd11921?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：再次读取数据，发现数据依然未发生变化，这说明这次可以重复读了</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-f8c3381d6193f422?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>B：插入一条新的数据，并提交</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-b5b13f58ae6347b7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：再次读取数据，发现数据依然未发生变化，虽然可以重复读了，但是却发现读的不是最新数据，这就是所谓的“幻读”</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-4bc8286e491e31d1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：提交本次事务，再次读取数据，发现读取正常了</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-cc9a3a86cb2aa3a1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>由以上的实验可以得出结论，可重复读隔离级别只允许读取已提交记录，而且在一个事务两次读取一个记录期间，其他事务部的更新该记录。但该事务不要求与其他事务可串行化。例如，当一个事务可以找到由一个已提交事务更新的记录，但是可能产生幻读问题(注意是可能，因为数据库对隔离级别的实现有所差别)。像以上的实验，就没有出现数据幻读的问题。</p>\n\n<p><strong>(四)、将A的隔离级别设置为可串行化(Serializable)</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-1782e92173a07ee1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：启动事务，此时数据为初始状态</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-7dc61aeb419483c9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>B：发现B此时进入了等待状态，原因是因为A的事务尚未提交，只能等待（此时，B可能会发生等待超时）</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-3f9b50d71c489b62?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>A：提交事务</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-9ac68445eef92398?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><strong>B：发现插入成功</strong></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-2cb357088fcdbc1b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>serializable完全锁定字段，若一个事务来查询同一份数据就必须等待，直到前一个事务完成并解除锁定为止。是完整的隔离级别，会锁定对应的数据表格，因而会有效率的问题。</p>\n",
      "desc"     : "  本文来自于我的简书：真正理解Mysql的四种事务隔离级别，转载请保留链接 ;)什么是事务事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。事务的结束有两种，当事务中的所以步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤消撤消之前到事务开始时的所..."
} ,
  
  
  
    {
      "title"    : "如何在私网环境实现异地SSH远程管理",
      "title-lower"    : "如何在私网环境实现异地ssh远程管理",
      "sub-titile" : "The private network environment to realize long-distance SSH remote management",
      "sub-titile-lower" : "the private network environment to realize long-distance ssh remote management",
      "categories" : "",
      "tags"     : "Linux, SSH, VPN",
      "url"      : "/zcblog/2018/03/30/ssh-remote-management/",
      "date"     : "2018-03-30 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的简书：<a href=\"https://www.jianshu.com/p/9f46ae1a1fcc\">如何在私网环境实现异地SSH远程管理</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p>由于不少中小型公司的宽带网络是没有固定IP的私网环境，同时还由于预算有限，因此通过传统方式很难建立VPN（<code class=\"highlighter-rouge\">Virtual Private Network</code>），对于IT运维人员而言异地SSH远程管理、维护就成了相当头疼的问题。</p>\n\n<p>不过面对此类问题，终于找到了解决方案。在使用花生壳中的蒲公英异地组网后，就可以轻松实现异地SSH远程管理，而且支持纯软件组网，即使在没有预算的情况下同样可以解决难题。</p>\n\n<h3 id=\"1-linux中安装并配置蒲公英\">1. Linux中安装并配置蒲公英</h3>\n\n<h4 id=\"1-1-预先准备\">1-1. 预先准备</h4>\n\n<p>服务器系统：<code class=\"highlighter-rouge\">Centos 7.2</code></p>\n\n<p>所需软件：Linux版蒲公英VPN</p>\n\n<p>下载地址：http://pgy.oray.com/download/</p>\n\n<p>蒲公英Linux版除了拥有支持Centos、Redhat的安装包外，官网还提供了Ubuntu安装包。我们可以预先下载完成上传至服务器，也可直接进行下载。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-1098da0577d488e0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>首先，我先将已经将蒲公英安装包预先上传至了服务器（路径：<code class=\"highlighter-rouge\">/home/jlcao/oray/PgyVPN_CentOS_2.0.1_x86_64.rpm</code>）。理论上，只要是蒲公英官方支持的Linux发行版，就不必再安装环境，一键安装即可（32位需下载32位安装包，64位需下载64位安装包）。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-374b3705e200763f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>我通过内网的一台Windows主机，使用Xshell5软件远程登录服务器，登录后使用su root命令获取了管理员权限，否则软件无法安装。</p>\n\n<h4 id=\"1-2-安装软件\">1-2. 安装软件</h4>\n\n<p>通过cd命令进入存放蒲公英安装软件的目录，输入rpm命令进行安装；</p>\n\n<p><code class=\"highlighter-rouge\">cd /home/jlcao/oray</code></p>\n\n<p><code class=\"highlighter-rouge\">rpm -ivh PgyVPN_CentOS_2.0.1_x86_64.rpm</code></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-dbf4f59b4637f888?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>刚刚已经装过了，所以package已经存在。</p>\n\n<h4 id=\"1-3-设置软件\">1-3. 设置软件</h4>\n\n<p>安装成功后，任意路径下输入“PgyVistor”命令即可调出交互界面，按照界面指示输入Oray账号或VPN ID进行登录，可以选择打开自动登录。如果没有账号可以在Oray官网（www.oray.com）注册即可。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-3f399ee0c362ec22?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>账号密码登陆一次后，直接记忆保存，下次直接登陆。</p>\n\n<p>登录成功后，输入对应的序号即可进入菜单，由于还未进行组网，因此获取组成员信息后，只能看到一个成员。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-7038a0dad7ee56c9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>到了这一步，Linux服务器端的设置已经完成。只要让蒲公英在后台运行即可，输入0后返回主界面，再输入9退出界面，让其在后台继续运行。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-e34527a91fd81e91?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<h3 id=\"2-添加成员实现异地组网\">2. 添加成员，实现异地组网</h3>\n\n<p> 打开www.oray.com，用刚才注册或是已有的Oray账号登录，进入蒲公英-智能组网一栏创建网络，并点击管理，添加成员。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-780db91d55fddd1b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-90294dbf2ba066b6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>为了便于异地组网，除了将已有的客户端成员加入外，也可手动添加组网成员；</p>\n\n<p>蒲公英组网成员分为客户端成员与路由器成员；</p>\n\n<p> 路由器成员，则需输入蒲公英路由器的SN码进行添加；</p>\n\n<p>客户端成员，则需设置添加的数量及登录的密码，确认后生成VPN ID，可用于登录蒲公英客户端，这样一来，我们就不需要将Oray账号告诉其他人。</p>\n\n<p>最后，点击完成即可完成异地组网。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-90c7e6df92b09e1d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-699006ab6d630efc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>值得注意的是，成员列表一栏中可以对所有的已有成员进行管理，可对客户端成员进行绑定手机、修改登录密码及重置的操作。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-b45ae2cc4daadc35?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-51ba3875cfb4638f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<h3 id=\"3-ssh远程管理测试\">3. SSH远程管理测试</h3>\n\n<h4 id=\"3-1桌面端以windows为例\">3-1 桌面端，以Windows为例</h4>\n\n<p>安装蒲公英Windows版，通过已有VPN ID或是Oray账号登录。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-9e8234e794cbd157?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>蒲公英VPN win安装包</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-77c9a8abd1793746?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>登录后可以看到已有成员，右键可以ping主机，测试是否联通。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-26773b0f42f53041?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>在Xshell 5 中键入蒲公英软件成员列表中显示的ip进行登录，现在即使在外网环境也可一样访问到公司里的服务器，进行远程维护。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-5020b6b5dd1a73c9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<h4 id=\"3-2移动端以ios为例\">3-2 移动端，以IOS为例</h4>\n\n<p>在手机中安装蒲公英软件，同样通过通过已有VPN ID或是Oray账号登录。登录后可以看到已有成员，Linux服务器已在其中。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-1c099f7c939848ea?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-28c00d80c3e1d5a1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>使用JuiceSSH等软件，键入蒲公英软件成员列表中显示的ip即可进行登录！</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-a78bcff2bd24a6df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<h4 id=\"3-3配合蒲公英路由器\">3-3 配合蒲公英路由器</h4>\n\n<p>如果在成员中添加有蒲公英路由器，凡是接入蒲公英路由器的主机可以像局域网环境一样直接SSH远程管理成员中的主机。</p>\n\n<h3 id=\"4-总结\">4. 总结：</h3>\n\n<p>以上采用蒲公英实现异地组网的方式，可以轻松解决私网环境无法通过SSH远程管理Linux服务器的问题，而且安装、配置过程相当简单，就算没有专业知识也能搞定。值得一提的是，蒲公英还拥有手机端管理App，即使出门在外也可对蒲公英VPN进行管理。</p>\n\n<p>不过，上述方式也存在一定的局限性，如果纯软件组网，可能无法满足多对多的情况，同时有多台服务器、多个运维需要异地SSH远程管理就可能无法很好的满足；而且蒲公英VPN软件要一直后台运行着并且登陆正常，才能正常工作；免费版本最多只能添加5个客户端（服务器+PC端+移动端就已经占了三个），可以满足个人的工作需求，但是此版本不符合企业级别，需要账号升级。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-90df7c3ccc9439a7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>这时就要加入蒲公英路由器，通过路由器来异地组网，满足多个运维访问多台服务器的需求。</p>\n",
      "desc"     : "  本文来自于我的简书：如何在私网环境实现异地SSH远程管理，转载请保留链接 ;)由于不少中小型公司的宽带网络是没有固定IP的私网环境，同时还由于预算有限，因此通过传统方式很难建立VPN（Virtual Private Network），对于IT运维人员而言异地SSH远程管理、维护就成了相当头疼的问题。不过面对此类问题，终于找到了解决方案。在使用花生壳中的蒲公英异地组网后，就可以轻松实现异地..."
} ,
  
  
  
    {
      "title"    : "Centos 7 系统如何挂载NTFS格式移动硬盘",
      "title-lower"    : "centos 7 系统如何挂载ntfs格式移动硬盘",
      "sub-titile" : "How to quickly transfer large data",
      "sub-titile-lower" : "how to quickly transfer large data",
      "categories" : "",
      "tags"     : "Centos 7, NTFS, linux",
      "url"      : "/zcblog/2018/03/30/centos-7-ntfs/",
      "date"     : "2018-03-30 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的简书：<a href=\"https://www.jianshu.com/p/b7d4f516c8df\">Centos 7 系统如何挂载NTFS格式移动硬盘</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p>有些时候做大数据量迁移时，为了快速迁移大数据，有可能在Linux服务器上临时挂载NTFS格式的移动硬盘， 一般情况下，linux是识别不了NTFS格式移动硬盘的（需要重编译Linux核心才能，加挂NTFS分区），这时候为了能让Linux服务器能够识别NTFS的移动硬盘，就必须安装ntfs-3g（Third Generation Read/Write NTFS Driver）的包。</p>\n\n<h3 id=\"什么是ntfs-3g\">什么是<code class=\"highlighter-rouge\">NTFS-3G</code>?</h3>\n\n<p><code class=\"highlighter-rouge\">NTFS-3G</code>是一个开源项目，<code class=\"highlighter-rouge\">NTFS-3G</code>是为Linux,Android, Mac OS X, FreeBSD, NetBSD, OpenSolaris, QNX, Haiku,和其他操作系统提供的一个稳定的，功能齐全，读写NTFS的驱动程序的。它提供了安全处理Windows XP，WindowsServer 2003，Windows 2000，Windows Vista，Windows Server 2008 和Windows 7 操作系统下的NTFS文件系统。</p>\n\n<p><code class=\"highlighter-rouge\">NTFS-3g</code>是一个开源软件，它支持在Linux下面读写NTFS格式的分区。它非常的快速，同时也很安全。它支持Windows2000、XP、2003和Vista，并且支持所有的符合POSIX标准的磁盘操作。 <code class=\"highlighter-rouge\">NTFS-3g</code>的目的是为了持续的发展，各硬件平台和操作系统的用户需要可靠的互通与支持ntfs的驱动，<code class=\"highlighter-rouge\">NTFS-3g</code>可以提供可信任的、功能丰富的高性能解决方案。经过了12年多的发展，<code class=\"highlighter-rouge\">NTFS-3g</code>已经逐渐稳定；</p>\n\n<h3 id=\"安装ntfs-3g步骤\">安装ntfs-3g步骤：</h3>\n\n<ol>\n  <li>编译安装fuse模块（支持库，若编辑环境已配置过，可跳过此步骤）</li>\n</ol>\n\n<ul>\n  <li>\n    <p>下载 <code class=\"highlighter-rouge\">fuse-2.7.0.tar.gz</code>  拷贝到linux系统上</p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">tar –zxvf fuse-2.7.0.tar.gz</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">cd fuse-2.7.0</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">./configure</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">make</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">make install</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">lsmod</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">modprobe fuse</code></p>\n  </li>\n</ul>\n\n<ol>\n  <li>安装<code class=\"highlighter-rouge\">ntfs-3g</code>软件</li>\n</ol>\n\n<ul>\n  <li>\n    <p>下载<code class=\"highlighter-rouge\">ntfs-3g</code>拷贝到linux系统上</p>\n  </li>\n  <li>\n    <p>下载地址：http://www.tuxera.com/community/ntfs-3g-download/ 当前最新的为：<code class=\"highlighter-rouge\">ntfs-3g_ntfsprogs-2017.3.23</code></p>\n  </li>\n</ul>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-ed3050fa7084e2fd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<ul>\n  <li>\n    <p><code class=\"highlighter-rouge\">tar –zxvf ntfs-3g_ntfsprogs-2017.3.23.gz</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">cd ntfs-3g_ntfsprogs-2017.3.23</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">./configure</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">make</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">make install</code></p>\n  </li>\n</ul>\n\n<ol>\n  <li>配置挂载<code class=\"highlighter-rouge\">NTFS</code>格式的移动硬盘</li>\n</ol>\n\n<p>3.1 首先得到<code class=\"highlighter-rouge\">NTFS</code>分区的信息</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">fdisk -l</code>（查看linux下挂载分区情况，找到移动硬盘分区）</li>\n</ul>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-16e3707c096b7adf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>ps:如果出现乱码（中文编码问题），如何解决？</p>\n\n<p>两行命令搞定：<code class=\"highlighter-rouge\">#export LC_ALL=zh_CN.GBK</code></p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">export.GBK</code></li>\n</ul>\n\n<p>3.2 设置挂载点，用如下命令实现挂载</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">mount -t ntfs-3g</code></li>\n</ul>\n\n<p>例如得到的NTFS分区信息为<code class=\"highlighter-rouge\">/dev/sdc1</code>，挂载点设置在<code class=\"highlighter-rouge\">/mnt/data</code>下，可以用</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">mount -t ntfs-3g /dev/sdc1 /mnt/data</code></li>\n</ul>\n\n<p>或者直接用:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">ntfs-3g ntfs-3g /dev/sdc1 /mnt/data</code></li>\n</ul>\n\n<p>PS:注意英文短横线和空格</p>\n\n<p>3.3 可以查看挂载情况</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">df –lh</code></li>\n</ul>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6039661-9f50435f64190842?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" /></p>\n\n<p>附：</p>\n\n<p>1.如果想实现开机自动挂载，可以在<code class=\"highlighter-rouge\">/etc/fstab</code>里面添加如下格式语句</p>\n\n<p><code class=\"highlighter-rouge\">ntfs-3g silent,umask=0,locale=zh_CN.utf8 0 0</code></p>\n\n<p>如：<code class=\"highlighter-rouge\">/dev/sda2 /mnt/data ntfs-3g silent,umask=0,locale=zh_CN.utf8 0 0</code></p>\n\n<p>这样可以实现NTFS分区里中文文件名的显示。</p>\n\n<p>2.卸载分区可以用<code class=\"highlighter-rouge\">umount</code>实现,如：</p>\n\n<p><code class=\"highlighter-rouge\">umount /mnt/data</code></p>\n",
      "desc"     : "  本文来自于我的简书：Centos 7 系统如何挂载NTFS格式移动硬盘，转载请保留链接 ;)有些时候做大数据量迁移时，为了快速迁移大数据，有可能在Linux服务器上临时挂载NTFS格式的移动硬盘， 一般情况下，linux是识别不了NTFS格式移动硬盘的（需要重编译Linux核心才能，加挂NTFS分区），这时候为了能让Linux服务器能够识别NTFS的移动硬盘，就必须安装ntfs-3g（T..."
} ,
  
  
  
    {
      "title"    : "自动化生成报告程序",
      "title-lower"    : "自动化生成报告程序",
      "sub-titile" : "Let the program help you to generate a report",
      "sub-titile-lower" : "let the program help you to generate a report",
      "categories" : "",
      "tags"     : "Python, 前端, 检测报告",
      "url"      : "/zcblog/2017/11/08/report-automatic-generation/",
      "date"     : "2017-11-08 00:00:00 +0800",
      "content": "<blockquote>\n  <p>本文来自于我的简书：<a href=\"https://www.jianshu.com/p/86d4ef73ca72\">自动化生成报告程序</a>，转载请保留链接 ;)</p>\n</blockquote>\n\n<p>各位看官初看标题可能觉得很高大上，可能联想AI这一块，其实就是一个小Demo。这个程序的产生思想可能要追溯到学生时代，在每个学期的期末是不是都要评定什么个人、班级等荣誉；每个奖状在打印的时候是不是有些基本内容是相同的，只需要把对应的个人信息和奖项名称填进去就行了；但是对于一个硬件设施不好的学校，可能会有许多老师和同学共同完成这个工作（毕竟当时年少无知嘛，老师叫你工作是一种光荣）；这无疑增加工作量，还降低了工作效率。要是有一个自动化的设备在里面输入几个指令就行了，然后设备就自动为你的需求而工作。</p>\n\n<p>最近一个偶然的机会，接触到一家基因科技的公司的一个项目。他们的项目和我之前说的小事例很相似，该项目的主要实现目标是实验室检测得出的数据结果与报告模板结合批量生成报告(pdf)。我在网上搜寻了很多方法，什么模板引擎，什么实验室软件等等；都很麻烦。主要是他们公司想要看初稿，就针对他们公司的一个基因检测套餐模板做一个小demo；当然了，我每天要上班，下班以后给他们弄，不可能在这么短时间自己搞个系统出来，所以一些主流的后端语言我就没有使用（因为有些编程语言不能和报告文件后缀能够完美的匹配）。</p>\n\n<p>我的思路是这样的，前期报告模板已word的形式确认后，用HTML+CSS等技术将报告模板以网页版呈现；报告生成demo在Liunx系统下，使用Python、php等技术，运用pdftk、wkhtml等格式转化软件进行格式上的处理；并采用Jinja2模板引擎和MarkupSafe模块对html自动转义和标记，同时高效的将源码转换成Pyhton字节码，加快模板执行时间；对现有表格数据批量快速导入SQL Server并结合php页面数据文件上传下载等功能对系统开发实现。最终实现了将得出的检测数据与与之对应的报告模板相结合，并生成最后的pdf格式报告。前端的报告模板代码我就不列出来了，下面附上.py代码截图，我还没传到Gitub上，有需要的可以留言，到时候我整理一下，把链接发出来，希望对大家有帮助，相互交流学习。</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564881471786-c56a68a3-b558-49d6-b97d-22dca015adbc.png\" alt=\"image\" /></p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1564881474503-322780a5-15d2-4d5a-b949-b5f9c363ec0f.png\" alt=\"image\" /></p>\n\n<p>代码部署完了，怎么操作得到后面的报告呢？我在这里以win操作系统简单的写出步骤：</p>\n\n<p>首先，进入报告程序路径  （程序路径，如：cd /home/jlcao/TP53/report）；</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1563289310105-18cb3818-dc51-4dad-93eb-48aee6c8f725.png\" alt=\"image\" /></p>\n\n<p>然后，在当前目录创建report文件夹，该文件夹即为创建的虚拟环境                                    （virtualenv-p<文件夹名>   如：/usr/local/bin/python3.5 report）；</文件夹名></p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1563289314650-7665ada7-dabf-4134-a136-6495142ed617.png\" alt=\"image\" /></p>\n\n<p>其次，激活虚拟环境（virtualenv） （source report/bin/activate）；</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1563289320059-a0fc4d29-3c8f-427b-8668-bd39704e9e6e.png\" alt=\"image\" /></p>\n\n<p> 再用pip安装依赖环境，运行requirements.txt  （pip install -r requirements.txt）；</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1563289328528-52c41177-3dac-4dd4-a3b4-5467d1b3e685.png\" alt=\"image\" /></p>\n\n<p>最后，python gen_report.py –result-dir result data/xxx.csv（xxx.csv为data文件夹数据文件） 执行此命令，即可在results文件夹里生成xxx.csv中指定的患者所有报告，报告保存在独立文件夹中。</p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1563289332975-c5ad43d0-8465-45e4-854b-e4339c7e9856.png\" alt=\"image\" /></p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1563289337742-61fe2ec5-2392-481b-bda8-10a15e68cfad.png\" alt=\"image\" /></p>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1563289346397-ea3420b5-75c7-403d-aaaa-3b31c33851c6.png\" alt=\"image\" /></p>\n\n<p>其中，创建激活虚拟环境和安装依赖环境只需要开始的一次即可，后面直接将相应的数据上传到服务器，然后按步骤操作即可。</p>\n\n<p>GitHub地址：<a href=\"https://github.com/caojiele/Automation-report\">https://github.com/caojiele/Automation-report</a>  欢迎star!</p>\n",
      "desc"     : "  本文来自于我的简书：自动化生成报告程序，转载请保留链接 ;)各位看官初看标题可能觉得很高大上，可能联想AI这一块，其实就是一个小Demo。这个程序的产生思想可能要追溯到学生时代，在每个学期的期末是不是都要评定什么个人、班级等荣誉；每个奖状在打印的时候是不是有些基本内容是相同的，只需要把对应的个人信息和奖项名称填进去就行了；但是对于一个硬件设施不好的学校，可能会有许多老师和同学共同完成这个..."
} ,
  
  
  
    {
      "title"    : "关于mongoDB对时区的处理",
      "title-lower"    : "关于mongodb对时区的处理",
      "sub-titile" : "mongoDB对时间的处理ISODate与我们时区相差8小时",
      "sub-titile-lower" : "mongodb对时间的处理isodate与我们时区相差8小时",
      "categories" : "",
      "tags"     : "数据库, mongoDB, Java",
      "url"      : "/zcblog/2016/05/02/mongoDB-ISODate/",
      "date"     : "2016-05-02 00:00:00 +0800",
      "content": "<p>在mongoDB数据库中，时间的保存是ISODate类型，orm关系映射为java.util.Date类型，其保存的时间与我们会有8小时的区别（保存的时间比我们早了8个小时）。</p>\n\n<p>原数据为：</p>\n<pre><code class=\"language-Bash\">Person [id=11188, name=doctorwho, age=888888, birth=2016-01-01 13:55:00]\n</code></pre>\n\n<p>mongoDB数据库中为：</p>\n<pre><code class=\"language-mongoDB\">{ \n    \"_id\" : \"11188\", \n    \"_class\" : \"com.doctor.domain.Person\", \n    \"name\" : \"doctorwho\", \n    \"age\" : NumberInt(888888), \n    \"birth\" : ISODate(\"2016-01-01T05:55:00.000+0000\")\n}\n</code></pre>\n\n<p>那我们用时间查询数据的时候，看下java 驱动如何做的（部分日志）：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kn\">package</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">doctor</span><span class=\"o\">.</span><span class=\"na\">springdoc</span><span class=\"o\">;</span>\n \n<span class=\"kn\">import</span> <span class=\"nn\">java.time.LocalDateTime</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.time.ZoneId</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.time.ZonedDateTime</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Date</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.List</span><span class=\"o\">;</span>\n \n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.mongodb.core.MongoTemplate</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.mongodb.core.query.Criteria</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.mongodb.core.query.Query</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.mongodb.core.query.Update</span><span class=\"o\">;</span>\n \n<span class=\"kn\">import</span> <span class=\"nn\">com.doctor.domain.Person</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">com.mongodb.WriteResult</span><span class=\"o\">;</span>\n \n<span class=\"cm\">/**\n * JSONSerializers L205-216有关mongoDB对时间的处理ISODate与我们时区相差8小时（做个时区转换）\n * \n * @author sdcuike\n *\n * @time 2015年12月27日 下午10:54:16\n */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SavingUpdatingRemovingDocuments</span> <span class=\"o\">{</span>\n \n    <span class=\"cm\">/**\n     * @param args\n     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ClassPathXmlApplicationContext</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ClassPathXmlApplicationContext</span><span class=\"o\">(</span><span class=\"s\">\"classpath:/mongoDBConfig/spring-mongoDB.xml\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">MongoTemplate</span> <span class=\"n\">mongoTemplate</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"nc\">MongoTemplate</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n \n        <span class=\"nc\">Person</span> <span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"s\">\"doctorwho\"</span><span class=\"o\">,</span> <span class=\"mi\">28888</span><span class=\"o\">,</span> <span class=\"s\">\"11188\"</span><span class=\"o\">);</span>\n \n        <span class=\"nc\">LocalDateTime</span> <span class=\"n\">localDateTime</span> <span class=\"o\">=</span> <span class=\"nc\">LocalDateTime</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"mi\">2016</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">55</span><span class=\"o\">);</span>\n        <span class=\"nc\">ZonedDateTime</span> <span class=\"n\">zonedDateTime</span> <span class=\"o\">=</span> <span class=\"n\">localDateTime</span><span class=\"o\">.</span><span class=\"na\">atZone</span><span class=\"o\">(</span><span class=\"nc\">ZoneId</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"s\">\"Asia/Shanghai\"</span><span class=\"o\">));</span>\n        <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"na\">setBirth</span><span class=\"o\">(</span><span class=\"nc\">Date</span><span class=\"o\">.</span><span class=\"na\">from</span><span class=\"o\">(</span><span class=\"n\">zonedDateTime</span><span class=\"o\">.</span><span class=\"na\">toInstant</span><span class=\"o\">()));</span>\n \n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">person</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mongoTemplate</span><span class=\"o\">.</span><span class=\"na\">findById</span><span class=\"o\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">(),</span> <span class=\"nc\">Person</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">mongoTemplate</span><span class=\"o\">.</span><span class=\"na\">insert</span><span class=\"o\">(</span><span class=\"n\">person</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n \n        <span class=\"nc\">Person</span> <span class=\"n\">findById</span> <span class=\"o\">=</span> <span class=\"n\">mongoTemplate</span><span class=\"o\">.</span><span class=\"na\">findById</span><span class=\"o\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">(),</span> <span class=\"nc\">Person</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">findById</span><span class=\"o\">);</span>\n \n        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">find</span> <span class=\"o\">=</span> <span class=\"n\">mongoTemplate</span><span class=\"o\">.</span><span class=\"na\">find</span><span class=\"o\">(</span><span class=\"nc\">Query</span><span class=\"o\">.</span><span class=\"na\">query</span><span class=\"o\">(</span><span class=\"nc\">Criteria</span><span class=\"o\">.</span><span class=\"na\">where</span><span class=\"o\">(</span><span class=\"s\">\"name\"</span><span class=\"o\">).</span><span class=\"na\">is</span><span class=\"o\">(</span><span class=\"s\">\"doctorwho\"</span><span class=\"o\">).</span><span class=\"na\">and</span><span class=\"o\">(</span><span class=\"s\">\"age\"</span><span class=\"o\">).</span><span class=\"na\">is</span><span class=\"o\">(</span><span class=\"mi\">28888</span><span class=\"o\">)),</span> <span class=\"nc\">Person</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">find</span><span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">::</span><span class=\"n\">println</span><span class=\"o\">);</span>\n \n        <span class=\"nc\">WriteResult</span> <span class=\"n\">updateMulti</span> <span class=\"o\">=</span> <span class=\"n\">mongoTemplate</span><span class=\"o\">.</span><span class=\"na\">updateMulti</span><span class=\"o\">(</span><span class=\"nc\">Query</span><span class=\"o\">.</span><span class=\"na\">query</span><span class=\"o\">(</span><span class=\"nc\">Criteria</span><span class=\"o\">.</span><span class=\"na\">where</span><span class=\"o\">(</span><span class=\"s\">\"age\"</span><span class=\"o\">).</span><span class=\"na\">is</span><span class=\"o\">(</span><span class=\"mi\">28888</span><span class=\"o\">)),</span> <span class=\"nc\">Update</span><span class=\"o\">.</span><span class=\"na\">update</span><span class=\"o\">(</span><span class=\"s\">\"age\"</span><span class=\"o\">,</span> <span class=\"mi\">888888</span><span class=\"o\">),</span> <span class=\"nc\">Person</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">updateMulti</span><span class=\"o\">.</span><span class=\"na\">getN</span><span class=\"o\">());</span>\n \n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"time query\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">find2</span> <span class=\"o\">=</span> <span class=\"n\">mongoTemplate</span><span class=\"o\">.</span><span class=\"na\">find</span><span class=\"o\">(</span><span class=\"nc\">Query</span><span class=\"o\">.</span><span class=\"na\">query</span><span class=\"o\">(</span><span class=\"nc\">Criteria</span><span class=\"o\">.</span><span class=\"na\">where</span><span class=\"o\">(</span><span class=\"s\">\"birth\"</span><span class=\"o\">).</span><span class=\"na\">is</span><span class=\"o\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"na\">getBirth</span><span class=\"o\">())),</span> <span class=\"nc\">Person</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">find2</span><span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">::</span><span class=\"n\">println</span><span class=\"o\">);</span>\n        <span class=\"c1\">// JSONSerializers L205-216有关mongoDB对时间的处理ISODate与我们时区相差8小时（做个时区转换）</span>\n    <span class=\"o\">}</span>\n \n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>time query:</p>\n\n<ul>\n  <li>\n    <p>01-02 22:12:37.195 main  DEBUG org.springframework.data.mongodb.core.MongoTemplate - find using query: { “birth” : { “$date” : “2016-01-01T05:55:00.000Z”}} fields: null for class: class com.doctor.domain.Person in collection: person</p>\n  </li>\n  <li>\n    <p>01-02 22:12:37.196 main  DEBUG org.springframework.data.mongodb.core.MongoDbUtils - Getting Mongo Database name=[sdcuike]\nPerson [id=11188, name=doctorwho, age=888888,birth=2016-01-01 13:55:00]</p>\n  </li>\n</ul>\n\n<p>{ “birth” : { “$date” : “2016-01-01T05:55:00.000Z”}}查询语句按我们的相差时间查询，返回的数据确实是我们需要的，即使数据库中我们看到的iso date相差8个小时。其实java 驱动帮我们做了转换。</p>\n\n<p>com.mongodb.util.JSONSerializers.LegacyDateSerializer代码：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">LegacyDateSerializer</span> <span class=\"kd\">extends</span> <span class=\"nc\">CompoundObjectSerializer</span> <span class=\"o\">{</span>\n \n        <span class=\"nc\">LegacyDateSerializer</span><span class=\"o\">(</span><span class=\"nc\">ObjectSerializer</span> <span class=\"n\">serializer</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">serializer</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n \n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">serialize</span><span class=\"o\">(</span><span class=\"nc\">Object</span> <span class=\"n\">obj</span><span class=\"o\">,</span> <span class=\"nc\">StringBuilder</span> <span class=\"n\">buf</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Date</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">Date</span><span class=\"o\">)</span> <span class=\"n\">obj</span><span class=\"o\">;</span>\n            <span class=\"nc\">SimpleDateFormat</span> <span class=\"n\">format</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SimpleDateFormat</span><span class=\"o\">(</span>\n                    <span class=\"s\">\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"</span><span class=\"o\">);</span>\n            <span class=\"n\">format</span><span class=\"o\">.</span><span class=\"na\">setCalendar</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">GregorianCalendar</span><span class=\"o\">(</span>\n                    <span class=\"k\">new</span> <span class=\"nf\">SimpleTimeZone</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s\">\"GMT\"</span><span class=\"o\">)));</span>\n            <span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"na\">serialize</span><span class=\"o\">(</span>\n                    <span class=\"k\">new</span> <span class=\"nf\">BasicDBObject</span><span class=\"o\">(</span><span class=\"s\">\"$date\"</span><span class=\"o\">,</span> <span class=\"n\">format</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)),</span>\n                    <span class=\"n\">buf</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>所以在这里<code class=\"highlighter-rouge\">GregorianCalendar</code> ，做了时区转换。</p>\n",
      "desc"     : "在mongoDB数据库中，时间的保存是ISODate类型，orm关系映射为java.util.Date类型，其保存的时间与我们会有8小时的区别（保存的时间比我们早了8个小时）。原数据为：Person [id=11188, name=doctorwho, age=888888, birth=2016-01-01 13:55:00]mongoDB数据库中为：{     &quot;_id&quo..."
} ,
  
  
  
    {
      "title"    : "Markdown介绍",
      "title-lower"    : "markdown介绍",
      "sub-titile" : "Markdown是一种轻量级标记语言",
      "sub-titile-lower" : "markdown是一种轻量级标记语言",
      "categories" : "",
      "tags"     : "Markdown, 标记语言",
      "url"      : "/zcblog/2016/03/07/markdown-introduce/",
      "date"     : "2016-03-07 00:00:00 +0800",
      "content": "<h2 id=\"主要内容\">主要内容</h2>\n<ul>\n  <li><a href=\"#Markdown是什么\">Markdown是什么</a></li>\n  <li><a href=\"#谁创造了它\">谁创造了它</a></li>\n  <li><a href=\"#为什么要使用它\">为什么要使用它</a></li>\n  <li><a href=\"#怎么使用\">怎么使用</a></li>\n  <li><a href=\"#谁在用\">谁在用</a></li>\n  <li><a href=\"#尝试一下\">尝试一下</a></li>\n  <li><a href=\"#其它\">其它</a></li>\n</ul>\n\n<h2 id=\"正文\">正文</h2>\n\n<h3 id=\"markdown是什么\">Markdown是什么</h3>\n<p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。  <br />\n<strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p>\n\n<h3 id=\"谁创造了它\">谁创造了它</h3>\n<p>它由<a href=\"http://www.aaronsw.com/\"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href=\"http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8\">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p>\n\n<p>他有着足以让你跪拜的人生经历：</p>\n<ul>\n  <li><strong>14岁</strong>参与RSS 1.0规格标准的制订。</li>\n  <li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。</li>\n  <li><strong>2005</strong>年创建<a href=\"http://infogami.org/\">Infogami</a>，之后与<a href=\"http://www.reddit.com/\">Reddit</a>合并成为其合伙人。</li>\n  <li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。</li>\n  <li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。</li>\n  <li><strong>2013</strong>年1月自杀身亡。</li>\n</ul>\n\n<p><img src=\"https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg\" alt=\"Aaron Swartz\" /></p>\n\n<p>天才都有早逝的归途。</p>\n\n<h3 id=\"为什么要使用它\">为什么要使用它</h3>\n<ul>\n  <li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>\n  <li>兼容HTML，可以转换为HTML格式发布。</li>\n  <li>跨平台使用。</li>\n  <li>越来越多的网站支持Markdown。</li>\n  <li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>\n  <li>摆脱Word（我不是认真的）。</li>\n</ul>\n\n<h3 id=\"怎么使用\">怎么使用</h3>\n<p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>\n\n<p>Markdown语法主要分为如下几大部分：\n<strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code class=\"highlighter-rouge\">\\</code></strong>，<strong>符号’`‘</strong>。</p>\n\n<h4 id=\"41-标题\">4.1 标题</h4>\n<p>两种形式：<br />\n1）使用<code class=\"highlighter-rouge\">=</code>和<code class=\"highlighter-rouge\">-</code>标记一级和二级标题。</p>\n<blockquote>\n  <p>一级标题 <br />\n<code class=\"highlighter-rouge\">=========</code> <br />\n二级标题  <br />\n<code class=\"highlighter-rouge\">---------</code></p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <h1 id=\"一级标题\">一级标题</h1>\n  <p>二级标题\n———</p>\n</blockquote>\n\n<p>2）使用<code class=\"highlighter-rouge\">#</code>，可表示1-6级标题。</p>\n<blockquote>\n  <p># 一级标题 <br />\n## 二级标题 <br />\n### 三级标题 <br />\n#### 四级标题 <br />\n##### 五级标题 <br />\n###### 六级标题</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <h1 id=\"一级标题-1\">一级标题</h1>\n  <h2 id=\"二级标题\">二级标题</h2>\n  <h3 id=\"三级标题\">三级标题</h3>\n  <h4 id=\"四级标题\">四级标题</h4>\n  <h5 id=\"五级标题\">五级标题</h5>\n  <h6 id=\"六级标题\">六级标题</h6>\n</blockquote>\n\n<h4 id=\"42-段落\">4.2 段落</h4>\n<p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>\n\n<h4 id=\"43-区块引用\">4.3 区块引用</h4>\n<p>在段落的每行或者只在第一行使用符号<code class=\"highlighter-rouge\">&gt;</code>,还可使用多个嵌套引用，如：</p>\n<blockquote>\n  <p>&gt; 区块引用<br />\n&gt;&gt; 嵌套引用</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p>区块引用</p>\n  <blockquote>\n    <p>嵌套引用</p>\n  </blockquote>\n</blockquote>\n\n<h4 id=\"44-代码区块\">4.4 代码区块</h4>\n<p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如  <br />\n普通段落：</p>\n\n<p>void main()  <br />\n{  <br />\n    printf(“Hello, Markdown.”);  <br />\n}</p>\n\n<p>代码区块：</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre>void main()\n{\n    printf(\"Hello, Markdown.\");\n}\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>注意</strong>:需要和普通段落之间存在空行。</p>\n\n<h4 id=\"45-强调\">4.5 强调</h4>\n<p>在强调内容两侧分别加上<code class=\"highlighter-rouge\">*</code>或者<code class=\"highlighter-rouge\">_</code>，如：</p>\n<blockquote>\n  <p>*斜体*，_斜体_  <br />\n**粗体**，__粗体__</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p><em>斜体</em>，<em>斜体</em>  <br />\n<strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n\n<h4 id=\"46-列表\">4.6 列表</h4>\n<p>使用<code class=\"highlighter-rouge\">·</code>、<code class=\"highlighter-rouge\">+</code>、或<code class=\"highlighter-rouge\">-</code>标记无序列表，如：</p>\n<blockquote>\n  <p>-（+*） 第一项\n-（+*） 第二项\n- （+*）第三项</p>\n</blockquote>\n\n<p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p>\n\n<p>效果：</p>\n<blockquote>\n  <ul>\n    <li>第一项</li>\n    <li>第二项</li>\n    <li>第三项</li>\n  </ul>\n</blockquote>\n\n<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code class=\"highlighter-rouge\">.</code>，如：</p>\n<blockquote>\n  <p>1 . 第一项 <br />\n2 . 第二项  <br />\n3 . 第三项</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <ol>\n    <li>第一项</li>\n    <li>第二项</li>\n    <li>第三项</li>\n  </ol>\n</blockquote>\n\n<h4 id=\"47-分割线\">4.7 分割线</h4>\n<p>分割线最常使用就是三个或以上<code class=\"highlighter-rouge\">*</code>，还可以使用<code class=\"highlighter-rouge\">-</code>和<code class=\"highlighter-rouge\">_</code>。</p>\n\n<h4 id=\"48-链接\">4.8 链接</h4>\n<p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。  <br />\n<strong>行内式</strong>：</p>\n<blockquote>\n  <p>[caojiele的Markdown库](https:://github.com/caojiele/Markdown “Markdown”)。</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p><a href=\"https:://github.com/caojiele/Markdown\" title=\"Markdown\">caojiele的Markdown库</a>。</p>\n</blockquote>\n\n<p><strong>参考式</strong>：</p>\n<blockquote>\n  <p>[caojiele的Markdown库1][1]  <br />\n[caojiele的Markdown库2][2]  <br />\n[1]:https:://github.com/caojiele/Markdown “Markdown”  <br />\n[2]:https:://github.com/caojiele/Markdown “Markdown”</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p><a href=\"https:://github.com/caojiele/Markdown\" title=\"Markdown\">caojiele的Markdown库1</a>  <br />\n<a href=\"https:://github.com/caojiele/Markdown\" title=\"Markdown\">caojiele的Markdown库2</a></p>\n</blockquote>\n\n<p><strong>注意</strong>：上述的<code class=\"highlighter-rouge\">[1]:https:://github.com/caojiele/Markdown \"Markdown\"</code>不出现在区块中。</p>\n\n<h4 id=\"49-图片\">4.9 图片</h4>\n<p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code class=\"highlighter-rouge\">！</code>。</p>\n<h4 id=\"410-反斜杠\">4.10 反斜杠<code class=\"highlighter-rouge\">\\</code></h4>\n<p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>\n<h4 id=\"411-符号\">4.11 符号’`’</h4>\n<p>起到标记作用。如：</p>\n<blockquote>\n  <p>`ctrl+a`</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p><code class=\"highlighter-rouge\">ctrl+a</code></p>\n</blockquote>\n\n<h4 id=\"谁在用\">谁在用？</h4>\n<p>Markdown的使用者：</p>\n<ul>\n  <li>GitHub</li>\n  <li>简书</li>\n  <li>Stack Overflow</li>\n  <li>Apollo</li>\n  <li>Moodle</li>\n  <li>Reddit</li>\n  <li>等等</li>\n</ul>\n\n<h4 id=\"尝试一下\">尝试一下</h4>\n<ul>\n  <li><strong>Chrome</strong>下的插件诸如<code class=\"highlighter-rouge\">stackedit</code>与<code class=\"highlighter-rouge\">markdown-here</code>等非常方便，也不用担心平台受限。</li>\n  <li><strong>在线</strong>的dillinger.io评价也不错</li>\n  <li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li>\n  <li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>\n  <li><strong>Linux</strong>下的ReText不错。</li>\n</ul>\n\n<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p>\n\n<hr />\n<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。\n虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]\n(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\n<em>**</em>\n以上基本是所有traditonal markdown的语法。</p>\n\n<h4 id=\"其它\">其它</h4>\n<p>列表的使用(非traditonal markdown)：</p>\n\n<p>用<code class=\"highlighter-rouge\">|</code>表示表格纵向边界，表头和表内容用<code class=\"highlighter-rouge\">-</code>隔开，并可用<code class=\"highlighter-rouge\">:</code>进行对齐设置，两边都有<code class=\"highlighter-rouge\">:</code>则表示居中，若不加<code class=\"highlighter-rouge\">:</code>则默认左对齐。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">代码库</th>\n      <th>链接</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">MarkDown</td>\n      <td><a href=\"https://github.com/caojiele/Markdown\" title=\"Markdown\">https://github.com/caojiele/Markdown</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">MarkDownCopy</td>\n      <td><a href=\"https://github.com/caojiele/Markdown\" title=\"Markdown\">https://github.com/caojiele/Markdown</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>关于其它扩展语法可参见具体工具的使用说明。</p>\n",
      "desc"     : "主要内容  Markdown是什么  谁创造了它  为什么要使用它  怎么使用  谁在用  尝试一下  其它正文Markdown是什么Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。  Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。谁创造了它它由Aaron Swartz和John Grub..."
} 
  
  
]
