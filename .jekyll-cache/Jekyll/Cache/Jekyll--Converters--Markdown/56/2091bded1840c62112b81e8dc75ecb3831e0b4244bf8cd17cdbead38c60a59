I"f<h3 id="先来看一下什么是-mvc-模式">先来看一下什么是 MVC 模式</h3>

<p>MVC 是一种设计模式。</p>

<p><strong>MVC 的原理图如下：</strong></p>

<p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/60679444.jpg" alt="MVC的原理图" /></p>

<h3 id="springmvc-简单介绍">SpringMVC 简单介绍</h3>

<p>SpringMVC 框架是以请求为驱动，围绕 Servlet 设计，将请求发给控制器，然后通过模型对象，分派器来展示请求结果视图。其中核心类是 DispatcherServlet，它是一个 Servlet，顶层是实现的Servlet接口。</p>

<h3 id="springmvc-使用">SpringMVC 使用</h3>

<p>需要在 web.xml 中配置 DispatcherServlet 。并且需要配置 Spring 监听器ContextLoaderListener</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre>
<span class="nt">&lt;listener&gt;</span>
	<span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener
	<span class="nt">&lt;/listener-class&gt;</span>
<span class="nt">&lt;/listener&gt;</span>
<span class="nt">&lt;servlet&gt;</span>
	<span class="nt">&lt;servlet-name&gt;</span>springmvc<span class="nt">&lt;/servlet-name&gt;</span>
	<span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet
	<span class="nt">&lt;/servlet-class&gt;</span>
	<span class="c">&lt;!-- 如果不设置init-param标签，则必须在/WEB-INF/下创建xxx-servlet.xml文件，其中xxx是servlet-name中配置的名称。 --&gt;</span>
	<span class="nt">&lt;init-param&gt;</span>
		<span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
		<span class="nt">&lt;param-value&gt;</span>classpath:spring/springmvc-servlet.xml<span class="nt">&lt;/param-value&gt;</span>
	<span class="nt">&lt;/init-param&gt;</span>
	<span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
<span class="nt">&lt;/servlet&gt;</span>
<span class="nt">&lt;servlet-mapping&gt;</span>
	<span class="nt">&lt;servlet-name&gt;</span>springmvc<span class="nt">&lt;/servlet-name&gt;</span>
	<span class="nt">&lt;url-pattern&gt;</span>/<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/servlet-mapping&gt;</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="springmvc-工作原理重要">SpringMVC 工作原理（重要）</h3>

<p><strong>简单来说：</strong></p>

<p>客户端发送请求-&gt; 前端控制器 DispatcherServlet 接受客户端请求 -&gt; 找到处理器映射 HandlerMapping 解析请求对应的 Handler-&gt; HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑 -&gt; 处理器返回一个模型视图 ModelAndView -&gt; 视图解析器进行解析 -&gt; 返回一个视图对象-&gt;前端控制器 DispatcherServlet 渲染数据（Moder）-&gt;将得到视图对象返回给用户</p>

<p><strong>如下图所示：</strong>
<img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/49790288.jpg" alt="SpringMVC运行原理" /></p>

<p>上图的一个笔误的小问题：Spring MVC 的入口函数也就是前端控制器 DispatcherServlet 的作用是接收请求，响应结果。</p>

<p><strong>流程说明（重要）：</strong></p>

<p>（1）客户端（浏览器）发送请求，直接请求到 DispatcherServlet。</p>

<p>（2）DispatcherServlet 根据请求信息调用 HandlerMapping，解析请求对应的 Handler。</p>

<p>（3）解析到对应的 Handler（也就是我们平常说的 Controller 控制器）后，开始由 HandlerAdapter 适配器处理。</p>

<p>（4）HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑。</p>

<p>（5）处理器处理完业务后，会返回一个 ModelAndView 对象，Model 是返回的数据对象，View 是个逻辑上的 View。</p>

<p>（6）ViewResolver 会根据逻辑 View 查找实际的 View。</p>

<p>（7）DispaterServlet 把返回的 Model 传给 View（视图渲染）。</p>

<p>（8）把 View 返回给请求者（浏览器）。</p>

<h3 id="springmvc-重要组件说明">SpringMVC 重要组件说明</h3>

<p><strong>1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供（重要）</strong></p>

<p>作用：<strong>Spring MVC 的入口函数。接收请求，响应结果，相当于转发器，中央处理器。有了 DispatcherServlet 减少了其它组件之间的耦合度。用户请求到达前端控制器，它就相当于mvc模式中的c，DispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet的存在降低了组件之间的耦合性。</strong></p>

<p><strong>2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供</strong></p>

<p>作用：根据请求的url查找Handler。HandlerMapping负责根据用户请求找到Handler即处理器（Controller），SpringMVC提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>

<p><strong>3、处理器适配器HandlerAdapter</strong></p>

<p>作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler
通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>

<p><strong>4、处理器Handler(需要工程师开发)</strong></p>

<p>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler
Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。
由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p>

<p><strong>5、视图解析器View resolver(不需要工程师开发),由框架提供</strong></p>

<p>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）
View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。
一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p>

<p><strong>6、视图View(需要工程师开发)</strong></p>

<p>View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）</p>

<p><strong>注意：处理器Handler（也就是我们平常说的Controller控制器）以及视图层view都是需要我们自己手动开发的。其他的一些组件比如：前端控制器DispatcherServlet、处理器映射器HandlerMapping、处理器适配器HandlerAdapter等等都是框架提供给我们的，不需要自己手动开发。</strong></p>

<h3 id="dispatcherservlet详细解析">DispatcherServlet详细解析</h3>

<p>首先看下源码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">;</span>
 
<span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"serial"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DispatcherServlet</span> <span class="kd">extends</span> <span class="nc">FrameworkServlet</span> <span class="o">{</span>
 
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">MULTIPART_RESOLVER_BEAN_NAME</span> <span class="o">=</span> <span class="s">"multipartResolver"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">LOCALE_RESOLVER_BEAN_NAME</span> <span class="o">=</span> <span class="s">"localeResolver"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">THEME_RESOLVER_BEAN_NAME</span> <span class="o">=</span> <span class="s">"themeResolver"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">HANDLER_MAPPING_BEAN_NAME</span> <span class="o">=</span> <span class="s">"handlerMapping"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">HANDLER_ADAPTER_BEAN_NAME</span> <span class="o">=</span> <span class="s">"handlerAdapter"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">HANDLER_EXCEPTION_RESOLVER_BEAN_NAME</span> <span class="o">=</span> <span class="s">"handlerExceptionResolver"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME</span> <span class="o">=</span> <span class="s">"viewNameTranslator"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">VIEW_RESOLVER_BEAN_NAME</span> <span class="o">=</span> <span class="s">"viewResolver"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">FLASH_MAP_MANAGER_BEAN_NAME</span> <span class="o">=</span> <span class="s">"flashMapManager"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">WEB_APPLICATION_CONTEXT_ATTRIBUTE</span> <span class="o">=</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">".CONTEXT"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">LOCALE_RESOLVER_ATTRIBUTE</span> <span class="o">=</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">".LOCALE_RESOLVER"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">THEME_RESOLVER_ATTRIBUTE</span> <span class="o">=</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">".THEME_RESOLVER"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">THEME_SOURCE_ATTRIBUTE</span> <span class="o">=</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">".THEME_SOURCE"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">INPUT_FLASH_MAP_ATTRIBUTE</span> <span class="o">=</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">".INPUT_FLASH_MAP"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">OUTPUT_FLASH_MAP_ATTRIBUTE</span> <span class="o">=</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">".OUTPUT_FLASH_MAP"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">FLASH_MAP_MANAGER_ATTRIBUTE</span> <span class="o">=</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">".FLASH_MAP_MANAGER"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">EXCEPTION_ATTRIBUTE</span> <span class="o">=</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">".EXCEPTION"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">PAGE_NOT_FOUND_LOG_CATEGORY</span> <span class="o">=</span> <span class="s">"org.springframework.web.servlet.PageNotFound"</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">DEFAULT_STRATEGIES_PATH</span> <span class="o">=</span> <span class="s">"DispatcherServlet.properties"</span><span class="o">;</span>
	<span class="kd">protected</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Log</span> <span class="n">pageNotFoundLogger</span> <span class="o">=</span> <span class="nc">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="no">PAGE_NOT_FOUND_LOG_CATEGORY</span><span class="o">);</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Properties</span> <span class="n">defaultStrategies</span><span class="o">;</span>
	<span class="kd">static</span> <span class="o">{</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="nc">ClassPathResource</span> <span class="n">resource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathResource</span><span class="o">(</span><span class="no">DEFAULT_STRATEGIES_PATH</span><span class="o">,</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
			<span class="n">defaultStrategies</span> <span class="o">=</span> <span class="nc">PropertiesLoaderUtils</span><span class="o">.</span><span class="na">loadProperties</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"Could not load 'DispatcherServlet.properties': "</span> <span class="o">+</span> <span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span>
	<span class="o">}</span>
 
	<span class="cm">/** Detect all HandlerMappings or just expect "handlerMapping" bean? */</span>
	<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">detectAllHandlerMappings</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
 
	<span class="cm">/** Detect all HandlerAdapters or just expect "handlerAdapter" bean? */</span>
	<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">detectAllHandlerAdapters</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
 
	<span class="cm">/** Detect all HandlerExceptionResolvers or just expect "handlerExceptionResolver" bean? */</span>
	<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">detectAllHandlerExceptionResolvers</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
 
	<span class="cm">/** Detect all ViewResolvers or just expect "viewResolver" bean? */</span>
	<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">detectAllViewResolvers</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
 
	<span class="cm">/** Throw a NoHandlerFoundException if no Handler was found to process this request? **/</span>
	<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">throwExceptionIfNoHandlerFound</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
 
	<span class="cm">/** Perform cleanup of request attributes after include request? */</span>
	<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">cleanupAfterInclude</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
 
	<span class="cm">/** MultipartResolver used by this servlet */</span>
	<span class="kd">private</span> <span class="nc">MultipartResolver</span> <span class="n">multipartResolver</span><span class="o">;</span>
 
	<span class="cm">/** LocaleResolver used by this servlet */</span>
	<span class="kd">private</span> <span class="nc">LocaleResolver</span> <span class="n">localeResolver</span><span class="o">;</span>
 
	<span class="cm">/** ThemeResolver used by this servlet */</span>
	<span class="kd">private</span> <span class="nc">ThemeResolver</span> <span class="n">themeResolver</span><span class="o">;</span>
 
	<span class="cm">/** List of HandlerMappings used by this servlet */</span>
	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerMapping</span><span class="o">&gt;</span> <span class="n">handlerMappings</span><span class="o">;</span>
 
	<span class="cm">/** List of HandlerAdapters used by this servlet */</span>
	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerAdapter</span><span class="o">&gt;</span> <span class="n">handlerAdapters</span><span class="o">;</span>
 
	<span class="cm">/** List of HandlerExceptionResolvers used by this servlet */</span>
	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerExceptionResolver</span><span class="o">&gt;</span> <span class="n">handlerExceptionResolvers</span><span class="o">;</span>
 
	<span class="cm">/** RequestToViewNameTranslator used by this servlet */</span>
	<span class="kd">private</span> <span class="nc">RequestToViewNameTranslator</span> <span class="n">viewNameTranslator</span><span class="o">;</span>
 
	<span class="kd">private</span> <span class="nc">FlashMapManager</span> <span class="n">flashMapManager</span><span class="o">;</span>
 
	<span class="cm">/** List of ViewResolvers used by this servlet */</span>
	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ViewResolver</span><span class="o">&gt;</span> <span class="n">viewResolvers</span><span class="o">;</span>
 
	<span class="kd">public</span> <span class="nf">DispatcherServlet</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="nf">DispatcherServlet</span><span class="o">(</span><span class="nc">WebApplicationContext</span> <span class="n">webApplicationContext</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">webApplicationContext</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRefresh</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">initStrategies</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initStrategies</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">initMultipartResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initLocaleResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initThemeResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initHandlerMappings</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initHandlerAdapters</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initHandlerExceptionResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initRequestToViewNameTranslator</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initViewResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initFlashMapManager</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>DispatcherServlet类中的属性beans：</p>

<ul>
  <li>HandlerMapping：用于handlers映射请求和一系列的对于拦截器的前处理和后处理，大部分用@Controller注解。</li>
  <li>HandlerAdapter：帮助DispatcherServlet处理映射请求处理程序的适配器，而不用考虑实际调用的是 哪个处理程序。- - -</li>
  <li>ViewResolver：根据实际配置解析实际的View类型。</li>
  <li>ThemeResolver：解决Web应用程序可以使用的主题，例如提供个性化布局。</li>
  <li>MultipartResolver：解析多部分请求，以支持从HTML表单上传文件。-</li>
  <li>FlashMapManager：存储并检索可用于将一个请求属性传递到另一个请求的input和output的FlashMap，通常用于重定向。</li>
</ul>

<p>在Web MVC框架中，每个DispatcherServlet都拥自己的WebApplicationContext，它继承了ApplicationContext。WebApplicationContext包含了其上下文和Servlet实例之间共享的所有的基础框架beans。</p>

<p><strong>HandlerMapping</strong></p>

<p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/96666164.jpg" alt="HandlerMapping" /></p>

<p>HandlerMapping接口处理请求的映射HandlerMapping接口的实现类：</p>

<ul>
  <li>SimpleUrlHandlerMapping类通过配置文件把URL映射到Controller类。</li>
  <li>DefaultAnnotationHandlerMapping类通过注解把URL映射到Controller类。</li>
</ul>

<p><strong>HandlerAdapter</strong></p>

<p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/91433100.jpg" alt="HandlerAdapter" /></p>

<p>HandlerAdapter接口-处理请求映射</p>

<p>AnnotationMethodHandlerAdapter：通过注解，把请求URL映射到Controller类的方法上。</p>

<p><strong>HandlerExceptionResolver</strong></p>

<p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/50343885.jpg" alt="HandlerExceptionResolver" /></p>

<p>HandlerExceptionResolver接口-异常处理接口</p>

<ul>
  <li>SimpleMappingExceptionResolver通过配置文件进行异常处理。</li>
  <li>AnnotationMethodHandlerExceptionResolver：通过注解进行异常处理。</li>
</ul>

<p><strong>ViewResolver</strong></p>

<p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-10-11/49497279.jpg" alt="ViewResolver" /></p>

<p>ViewResolver接口解析View视图。</p>

<p>UrlBasedViewResolver类 通过配置文件，把一个视图名交给到一个View来处理。</p>
:ET